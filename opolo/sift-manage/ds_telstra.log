
We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:

    #1) Respect the privacy of others.
    #2) Think before you type.
    #3) With great power comes great responsibility.

sudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper
sudo: a password is required

We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:

    #1) Respect the privacy of others.
    #2) Think before you type.
    #3) With great power comes great responsibility.

sudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper
sudo: a password is required

We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:

    #1) Respect the privacy of others.
    #2) Think before you type.
    #3) With great power comes great responsibility.

sudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper
sudo: a password is required
Starting sift datasource...
HOSTNAME NOT MATCHING: 198.18.48.3
HOSTNAME: data-source-file-telstra-0
Generating Sift Data Source:  DATA_SOURCE_FILE_TELSTRA
****************************************************************************************
Persist Address: 10.193.33.106,10.193.33.238,10.193.34.15,10.193.35.50
Bucket: opolo_default_np
************************************* Initialised CouchClient ********** com.couchbase.client.java.AsyncCollection@205b132e
Persist Address: 10.193.33.106,10.193.33.238,10.193.34.15,10.193.35.50
Bucket: opolo_config_np
************************************* Initialised CouchClient ********** com.couchbase.client.java.AsyncCollection@22bb5646
DS NAME: DATA_SOURCE_FILE_TELSTRA
Panda cache config: com.knowesis.persist.couchbase.CouchbaseV7PersistClient@4f63e3c7
DATA SOURCE OBJECT: {"businessUnit":"Opolo Dev,Opolo Test,Hawk ,TEST_BU,Premium_Partner,Basic_Partner,TEST_DHIRAAGU","remarks":"","docType":"DataSource","id":"DATA_SOURCE_FILE_TELSTRA","types":"FILE","host":"streams","cimMapping":"CIM_DEC","numberOfParallelProcess":"1","dataSourceProperties":[{"type":"FILE","compressionType":"NA","fileNamePattern":"DEC*.csv","inputDirectory":"/opt/knowesis/sift/core/sift/pworkspace/SiFT_Source_data/input/DEC","deleteFile":"No","processedDirectory":"/opt/knowesis/sift/core/sift/pworkspace/SiFT_Source_data/processed/DEC","validationNeeded":"false","rawDataSinkNeeded":"false","validPattern":"NA"},{"compressionType":"NA","startDate":"2021-09-09T16:03:19.488+0530","type":"SiftAudience"},{"compressionType":"NA","query":"test","connectionStatement":"test","userName":"test","password":"test","frequency":"Recurring","dayOfWeek":"\"Sunday,Monday,Wednesday\"","endDate":"2021-09-30T10:45:19.003+0530","type":"HIVE"}],"updateHistory":[{"updatedBy":"shirin","updatedTimestamp":1685433651307,"remarks":"CREATED"},{"updatedBy":"shirin","updatedTimestamp":1685433698987,"remarks":"Data Source initiated for Deployment"},{"updatedBy":"shirin","updatedTimestamp":1685433742696,"remarks":"Data Source initiated for Deployment"},{"updatedBy":"akshay","updatedTimestamp":1685438964514,"remarks":"Data Source initiated for Deployment"},{"updatedBy":"akshay","updatedTimestamp":1685517251827,"remarks":"Data Source initiated for Deployment"},{"updatedBy":"rajeev","updatedTimestamp":1685517337020,"remarks":"Data Source initiated for Deployment"},{"updatedBy":"akshay","updatedTimestamp":1685517590122,"remarks":"Data Source initiated for Deployment"}],"mode":"2","status":"Pending","dataSourceDestinationProperties":[{"destinationName":"SIFT","destinationType":"SIFT","downstreamDataFormat":"CIM","filters":"DEFAULT"}],"versionHistory":[{"version":"0","updatedTimeStamp":1685433651376,"comments":"Created Version : 0","docid":"DATA_SOURCE_FILE_TELSTRA","updatedBy":"shirin"}],"version":"0","approvalWorkflowEnabled":"false","approverGroups":"","approvalRemarks":"","docStructure":"NEWDATASOURCE"}
Reading from **** Persist **** 
Reading from **** Persist **** 
Reading from **** Persist **** 
Compiling Function : "getCreditExpiryDaysCountForExport" -- > "int expiry = (int) getCreditExpiryDaysCount();\r\nreturn expiry;"
Preprocessed Expression : int expiry = (int)  SIFTMATH.getCreditExpiryDaysCount();
return expiry;
ANTLR Tool version 4.4 used for code generation does not match the current runtime version 4.5ANTLR Tool version 4.4 used for code generation does not match the current runtime version 4.5line 1:0 no viable alternative at input 'int'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getDaysSinceLastSimulatedContact" -- > "long lastTriggerDateTime = 0l;\r\n\r\n\t\tif( category.equals( \"*\" ) ){\r\n\t\t\tif( offer.equals( \"*\" ) ){\r\n\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\tJsonElement contactSeriesEle = OFFER_COUNT_LifeTime_Simulation.get( \"CONTACT_SERIES\" );\r\n\t\t\t\t\tif( contactSeriesEle == null || contactSeriesEle.isJsonNull() )\r\n\t\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\t\tJsonArray contactSeriesArray = contactSeriesEle.getAsJsonArray();\r\n\t\t\t\t\tlastTriggerDateTime = contactSeriesArray.get( contactSeriesArray.size() - 1 ).getAsLong();\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// TODO: Days since last Channelwise contact\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t} else{\r\n\t\t\t\tString[] offerCategories = null;\r\n\t\t\t\tif( OFFER_CATEGORY == null || OFFER_CATEGORY.equals( \"\" ) ) {\r\n\t\t\t\t\tcom.google.gson.JsonElement offerCatEle = getSiftwareAttribute( \"Offer\", offer, \"category\" );\r\n\t\t\t\t\tif( offerCatEle == null || offerCatEle.isJsonNull() ) {\r\n\t\t\t\t\t\tofferCategories = new String[ 1 ];\r\n\t\t\t\t\t\tofferCategories[ 0 ] = \"GENERIC\";\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\tofferCategories = offerCatEle.getAsString().split( \",\" );\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tofferCategories = OFFER_CATEGORY.split( \",\" );\r\n\r\n\t\t\t\tboolean found = false;\r\n\t\t\t\tfor( int i = 0; i < offerCategories.length; i ++ ){\r\n\t\t\t\t\tString cat = offerCategories[ i ];\r\n\t\t\t\t\tJsonElement catele = OFFER_COUNT_LifeTime_Simulation.get( cat );\r\n\t\t\t\t\tif( catele == null )\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\tJsonObject catObj = catele.getAsJsonObject();\r\n\t\t\t\t\tJsonElement catOfferEle = catObj.get( offer );\r\n\t\t\t\t\tif( catOfferEle == null )\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\tfound = true;\r\n\r\n\t\t\t\t\tJsonObject catOfferObj = catOfferEle.getAsJsonObject();\r\n\t\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\t\tJsonElement dateEle = catOfferObj.get( \"date_series\" );\r\n\t\t\t\t\t\tif( dateEle == null )\r\n\t\t\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\t\t\tJsonArray dateArr = dateEle.getAsJsonArray(); \r\n\t\t\t\t\t\tlastTriggerDateTime = dateArr.get( dateArr.size() - 1 ).getAsLong();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else{\r\n\t\t\t\t\t\tJsonElement channelEle = catOfferObj.get( channel + \"_date_series\" );\r\n\t\t\t\t\t\tif( channelEle == null )\r\n\t\t\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\t\t\tJsonArray dateArr = channelEle.getAsJsonArray(); \r\n\t\t\t\t\t\tlastTriggerDateTime = dateArr.get( dateArr.size() - 1 ).getAsLong();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif( ! found ) return -1;\r\n\t\t\t}\r\n\t\t} else{\r\n\t\t\tJsonElement catEle = OFFER_COUNT_LifeTime_Simulation.get( category );\r\n\t\t\tif( catEle == null || catEle.isJsonNull() )\r\n\t\t\t\treturn -1;\r\n\r\n\t\t\tJsonObject catObj = catEle.getAsJsonObject();\r\n\t\t\tif( offer.equals( \"*\" ) ){\r\n\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\tJsonElement catDateEle = catObj.get( \"date_series\" );\r\n\t\t\t\t\tif( catDateEle == null || catDateEle.isJsonNull() )\r\n\t\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\t\tJsonArray catDateArr = catDateEle.getAsJsonArray();\r\n\t\t\t\t\tlastTriggerDateTime = catDateArr.get( catDateArr.size() - 1 ).getAsLong();\r\n\t\t\t\t} else{\r\n\t\t\t\t\tJsonElement catChannelDateEle = catObj.get( channel + \"_date_series\" );\r\n\t\t\t\t\tif( catChannelDateEle == null || catChannelDateEle.isJsonNull() )\r\n\t\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\t\tJsonArray catChannelDateArr = catChannelDateEle.getAsJsonArray();\r\n\t\t\t\t\tlastTriggerDateTime = catChannelDateArr.get( catChannelDateArr.size() - 1 ).getAsLong();\r\n\t\t\t\t}\r\n\t\t\t} else{\r\n\t\t\t\tJsonElement catOfferEle = catObj.get( offer );\r\n\t\t\t\tif( catOfferEle == null || catOfferEle.isJsonNull() )\r\n\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\tJsonObject catOfferObj = catOfferEle.getAsJsonObject();\r\n\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\tJsonElement catOfferChannelEle = catOfferObj.get( \"date_series\" );\r\n\t\t\t\t\tif( catOfferChannelEle == null || catOfferChannelEle.isJsonNull() )\r\n\t\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\t\tJsonArray catOfferChannelArr = catOfferChannelEle.getAsJsonArray();\r\n\t\t\t\t\tlastTriggerDateTime = catOfferChannelArr.get( catOfferChannelArr.size() - 1 ).getAsLong();\r\n\t\t\t\t} else{\r\n\t\t\t\t\tJsonElement catOfferChannelEle = catOfferObj.get( channel + \"_date_series\" );\r\n\t\t\t\t\tif( catOfferChannelEle == null || catOfferChannelEle.isJsonNull() )\r\n\t\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\t\tJsonArray catOfferChannelArr = catOfferChannelEle.getAsJsonArray();\r\n\t\t\t\t\tlastTriggerDateTime = catOfferChannelArr.get( catOfferChannelArr.size() - 1 ).getAsLong();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif( lastTriggerDateTime == 0l )\r\n\t\t\treturn -1;\r\n\t\t\t\r\n\t\tlong ltoday = getCurrentDay() / 86400000;\r\n\t\tlastTriggerDateTime = ( lastTriggerDateTime - (lastTriggerDateTime % 86400000 )) / 86400000;\r\n\t\treturn (int)( ltoday - lastTriggerDateTime);"
Preprocessed Expression : long lastTriggerDateTime = 0l;

		if( category.equals( "*" ) ){
			if( offer.equals( "*" ) ){
				if( channel.equals( "*" ) ){
					JsonElement contactSeriesEle = OFFER_COUNT_LifeTime_Simulation.get( "CONTACT_SERIES" );
					if( contactSeriesEle == null || contactSeriesEle.isJsonNull() )
						return -1;

					JsonArray contactSeriesArray = contactSeriesEle.getAsJsonArray();
					lastTriggerDateTime = contactSeriesArray.get( contactSeriesArray.size() - 1 ).getAsLong();				
				}
				else{
					// TODO: Days since last Channelwise contact
					return -1;
				}
			} else{
				String[] offerCategories = null;
				if( OFFER_CATEGORY == null || OFFER_CATEGORY.equals( "" ) ) {
					com.google.gson.JsonElement offerCatEle =  SIFTMATH.getSiftwareAttribute( "Offer", offer, "category" );
					if( offerCatEle == null || offerCatEle.isJsonNull() ) {
						offerCategories = new String[ 1 ];
						offerCategories[ 0 ] = "GENERIC";
					} else
						offerCategories = offerCatEle.getAsString().split( "," );
				}
				else
					offerCategories = OFFER_CATEGORY.split( "," );

				boolean found = false;
				for( int i = 0; i < offerCategories.length; i ++ ){
					String cat = offerCategories[ i ];
					JsonElement catele = OFFER_COUNT_LifeTime_Simulation.get( cat );
					if( catele == null )
						continue;

					JsonObject catObj = catele.getAsJsonObject();
					JsonElement catOfferEle = catObj.get( offer );
					if( catOfferEle == null )
						continue;

					found = true;

					JsonObject catOfferObj = catOfferEle.getAsJsonObject();
					if( channel.equals( "*" ) ){
						JsonElement dateEle = catOfferObj.get( "date_series" );
						if( dateEle == null )
							return -1;

						JsonArray dateArr = dateEle.getAsJsonArray(); 
						lastTriggerDateTime = dateArr.get( dateArr.size() - 1 ).getAsLong();
						break;
					} else{
						JsonElement channelEle = catOfferObj.get( channel + "_date_series" );
						if( channelEle == null )
							return -1;

						JsonArray dateArr = channelEle.getAsJsonArray(); 
						lastTriggerDateTime = dateArr.get( dateArr.size() - 1 ).getAsLong();
						break;
					}
				}
				if( ! found ) return -1;
			}
		} else{
			JsonElement catEle = OFFER_COUNT_LifeTime_Simulation.get( category );
			if( catEle == null || catEle.isJsonNull() )
				return -1;

			JsonObject catObj = catEle.getAsJsonObject();
			if( offer.equals( "*" ) ){
				if( channel.equals( "*" ) ){
					JsonElement catDateEle = catObj.get( "date_series" );
					if( catDateEle == null || catDateEle.isJsonNull() )
						return -1;

					JsonArray catDateArr = catDateEle.getAsJsonArray();
					lastTriggerDateTime = catDateArr.get( catDateArr.size() - 1 ).getAsLong();
				} else{
					JsonElement catChannelDateEle = catObj.get( channel + "_date_series" );
					if( catChannelDateEle == null || catChannelDateEle.isJsonNull() )
						return -1;

					JsonArray catChannelDateArr = catChannelDateEle.getAsJsonArray();
					lastTriggerDateTime = catChannelDateArr.get( catChannelDateArr.size() - 1 ).getAsLong();
				}
			} else{
				JsonElement catOfferEle = catObj.get( offer );
				if( catOfferEle == null || catOfferEle.isJsonNull() )
					return -1;

				JsonObject catOfferObj = catOfferEle.getAsJsonObject();
				if( channel.equals( "*" ) ){
					JsonElement catOfferChannelEle = catOfferObj.get( "date_series" );
					if( catOfferChannelEle == null || catOfferChannelEle.isJsonNull() )
						return -1;

					JsonArray catOfferChannelArr = catOfferChannelEle.getAsJsonArray();
					lastTriggerDateTime = catOfferChannelArr.get( catOfferChannelArr.size() - 1 ).getAsLong();
				} else{
					JsonElement catOfferChannelEle = catOfferObj.get( channel + "_date_series" );
					if( catOfferChannelEle == null || catOfferChannelEle.isJsonNull() )
						return -1;

					JsonArray catOfferChannelArr = catOfferChannelEle.getAsJsonArray();
					lastTriggerDateTime = catOfferChannelArr.get( catOfferChannelArr.size() - 1 ).getAsLong();
				}
			}
		}

		if( lastTriggerDateTime == 0l )
			return -1;
			
		long ltoday =  SIFTMATH.getCurrentDay() / 86400000;
		lastTriggerDateTime = ( lastTriggerDateTime - (lastTriggerDateTime % 86400000 )) / 86400000;
		return (int)( ltoday - lastTriggerDateTime);
line 1:0 no viable alternative at input 'long'
------------Infered params OFFER_COUNT_LifeTime_Simulation -- com.google.gson.JsonObject -- JsonObject
------------Infered params OFFER_CATEGORY -- java.lang.String -- String
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getRechargeCountSinceBonusSent" -- > "String offerId = getLastBonusOfferId();\r\n\t\t \r\nif (offerId != null && offerId.trim().length() > 0 && !offerId.equals(\"\") ) {\r\n\t\r\n\tif (LATEST_OFFER_FULFILMENT_COUNTS != null && !LATEST_OFFER_FULFILMENT_COUNTS.isJsonNull()) {\r\n\t\tString searchKey = \"BESTOWAL_NOTIFICATION_PROGRAM-\" + offerId;\r\n\t\t\r\n\t\tif (LATEST_OFFER_FULFILMENT_COUNTS.has(searchKey)) {\r\n\t\t\treturn LATEST_OFFER_FULFILMENT_COUNTS.get(searchKey).getAsInt();\r\n\t    }\r\n\t}\r\n}\r\n\r\nreturn 0;"
Preprocessed Expression : String offerId =  SIFTMATH.execStringFunction("getLastBonusOfferId" );
		 
if (offerId != null && offerId.trim().length() > 0 && !offerId.equals("") ) {
	
	if (LATEST_OFFER_FULFILMENT_COUNTS != null && !LATEST_OFFER_FULFILMENT_COUNTS.isJsonNull()) {
		String searchKey = "BESTOWAL_NOTIFICATION_PROGRAM-" + offerId;
		
		if (LATEST_OFFER_FULFILMENT_COUNTS.has(searchKey)) {
			return LATEST_OFFER_FULFILMENT_COUNTS.get(searchKey).getAsInt();
	    }
	}
}

return 0;
line 1:0 no viable alternative at input 'String'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params LATEST_OFFER_FULFILMENT_COUNTS -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getRechargeCountSinceActivationOver30" -- > "int count = 0;\r\nif(ACCOUNT_STARTDATE_LifeTime!= 0l && ACCOUNT_STARTDATE_LifeTime!=-99l){\r\n\tlong activationDate = ACCOUNT_STARTDATE_LifeTime;\r\n\tif(RECHARGE_BLOCK_SERIES_LifeTime!=null && !RECHARGE_BLOCK_SERIES_LifeTime.isJsonNull() && RECHARGE_BLOCK_SERIES_LifeTime.entrySet().size()>0 ) {\r\n\t\tif(RECHARGE_BLOCK_SERIES_LifeTime.has(\"keys\")){\r\n\t\t\tJsonArray ekeys = RECHARGE_BLOCK_SERIES_LifeTime.get(\"keys\").getAsJsonArray();\r\n\t\t\tfor(int i=0;i<=ekeys.size()-1;i++){\r\n\t\t\t\tif(ekeys.get(i).getAsLong()>=activationDate){\r\n\t\t\t\t\tJsonObject obj = RECHARGE_BLOCK_SERIES_LifeTime.getAsJsonObject(ekeys.get(i).getAsString());\r\n\t\t\t\t\tif(obj!=null && !obj.isJsonNull() && obj.entrySet().size()!=0 && obj.has(\"RECHARGE_DATA\")){\r\n\t\t\t\t\t\tJsonArray rechrgeData = obj.get(\"RECHARGE_DATA\").getAsJsonArray();\r\n\t\t\t\t\t\tint rechargeAmount = rechrgeData.get(0).getAsInt();\r\n\t\t\t\t\t\tif(rechargeAmount >= 30)\r\n\t\t\t\t\t\t\tcount = count+1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nreturn count;"
Preprocessed Expression : int count = 0;
if(ACCOUNT_STARTDATE_LifeTime!= 0l && ACCOUNT_STARTDATE_LifeTime!=-99l){
	long activationDate = ACCOUNT_STARTDATE_LifeTime;
	if(RECHARGE_BLOCK_SERIES_LifeTime!=null && !RECHARGE_BLOCK_SERIES_LifeTime.isJsonNull() && RECHARGE_BLOCK_SERIES_LifeTime.entrySet().size()>0 ) {
		if(RECHARGE_BLOCK_SERIES_LifeTime.has("keys")){
			JsonArray ekeys = RECHARGE_BLOCK_SERIES_LifeTime.get("keys").getAsJsonArray();
			for(int i=0;i<=ekeys.size()-1;i++){
				if(ekeys.get(i).getAsLong()>=activationDate){
					JsonObject obj = RECHARGE_BLOCK_SERIES_LifeTime.getAsJsonObject(ekeys.get(i).getAsString());
					if(obj!=null && !obj.isJsonNull() && obj.entrySet().size()!=0 && obj.has("RECHARGE_DATA")){
						JsonArray rechrgeData = obj.get("RECHARGE_DATA").getAsJsonArray();
						int rechargeAmount = rechrgeData.get(0).getAsInt();
						if(rechargeAmount >= 30)
							count = count+1;
					}
				}
			}
		}
	}
}
return count;
line 1:0 no viable alternative at input 'int'
------------Infered params ACCOUNT_STARTDATE_LifeTime -- long -- long
------------Infered params RECHARGE_BLOCK_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getPromotionDetails" -- > "String result=\"|\";\r\nString promoExpValue=\"\";\r\nString promo=\"\";\r\nif(PROMOTION_PO_ID_LifeTime !=null && !PROMOTION_PO_ID_LifeTime.isJsonNull() && PROMOTION_PO_ID_LifeTime.entrySet().size()>0)\r\n{\r\n\tJsonArray keyArray = PROMOTION_PO_ID_LifeTime.get(\"keys\").getAsJsonArray();\r\n\tfor(int i=0;i<keyArray.size();i++) {\r\n\t\tJsonObject keyObj = PROMOTION_PO_ID_LifeTime.getAsJsonObject(keyArray.get(i).toString());\r\n\t\tjava.util.Set<Entry<String, JsonElement>> entrySet = keyObj.entrySet();\r\n\t\tfor (java.util.Map.Entry<String, JsonElement> entry : entrySet) {\r\n\t\t\tLong expDate=Long.valueOf(entry.getValue().toString());\r\n\t\t\tif(expDate>=getCurrentDay()){\r\n\t\t\t\tif(promo.equals(\"\"))\r\n\t\t\t\t\tpromo = entry.getKey().toString();\r\n\t\t\t\telse\r\n\t\t\t\t\tpromo = promo + \"~\" + entry.getKey().toString();\r\n\r\n\t\t\t\t\r\n\t\t\t\tjava.util.Date dte= new java.util.Date(expDate);\r\n\t\t\t\tjava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n\t\t\t\tString date = d.format(dte);\r\n\t\t\t\t\r\n\t\t\t\tif( promoExpValue.equals(\"\"))\r\n\t\t\t\t\tpromoExpValue = date;\r\n\t\t\t\telse\r\n\t\t\t\t\tpromoExpValue = promoExpValue+ \"~\" + date;\r\n\t\t\t}\r\n\t\t}\r\n\t result = promo + \"|\" + promoExpValue;\r\n\t}\r\n}\r\nreturn result;"
Preprocessed Expression : String result="|";
String promoExpValue="";
String promo="";
if(PROMOTION_PO_ID_LifeTime !=null && !PROMOTION_PO_ID_LifeTime.isJsonNull() && PROMOTION_PO_ID_LifeTime.entrySet().size()>0)
{
	JsonArray keyArray = PROMOTION_PO_ID_LifeTime.get("keys").getAsJsonArray();
	for(int i=0;i<keyArray.size();i++) {
		JsonObject keyObj = PROMOTION_PO_ID_LifeTime.getAsJsonObject(keyArray.get(i).toString());
		java.util.Set<Entry<String, JsonElement>> entrySet = keyObj.entrySet();
		for (java.util.Map.Entry<String, JsonElement> entry : entrySet) {
			Long expDate=Long.valueOf(entry.getValue().toString());
			if(expDate>= SIFTMATH.getCurrentDay()){
				if(promo.equals(""))
					promo = entry.getKey().toString();
				else
					promo = promo + "~" + entry.getKey().toString();

				
				java.util.Date dte= new java.util.Date(expDate);
				java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String date = d.format(dte);
				
				if( promoExpValue.equals(""))
					promoExpValue = date;
				else
					promoExpValue = promoExpValue+ "~" + date;
			}
		}
	 result = promo + "|" + promoExpValue;
	}
}
return result;
line 1:0 no viable alternative at input 'String'
------------Infered params PROMOTION_PO_ID_LifeTime -- com.google.gson.JsonObject -- JsonObject
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getHistoryOfRechargeChannels" -- > "JsonObject RECHARGE_SERIES =  RECHARGE_BLOCK_SERIES_LifeTime;\r\nString channelType = null;\r\njava.util.ArrayList<String> recharge_channels = new java.util.ArrayList<String>();\r\n\r\nif (RECHARGE_SERIES.has(\"keys\")) {\r\n\tJsonArray RECHARGE_SERIES_KEYArray = (JsonArray) RECHARGE_SERIES.get(\"keys\");\r\n\tif (RECHARGE_SERIES_KEYArray != null) {\r\n\t\tint count = 0;\r\n\t\tfor (int j = RECHARGE_SERIES_KEYArray.size() - 1; j >= 0; j--) {\r\n\r\n\t\t\tJsonObject keyElement = (JsonObject) RECHARGE_SERIES\r\n\t\t\t\t\t\t\t.get(String.valueOf(RECHARGE_SERIES_KEYArray.get(j)));\r\n\r\n\t\t\tif (keyElement.has(\"RECHARGE_DATA\")) {\r\n\t\t\t\tJsonArray rechargeArray = keyElement.get(\"RECHARGE_DATA\").getAsJsonArray();\r\n\r\n\t\t\t\tif (count < xrecharges) {\r\n\t\t\t\t\tif (rechargeArray.size() == 4) {\r\n\t\t\t\t\t\tchannelType = rechargeArray.get(3).getAsString();\r\n\t\t\t\t\t\t\t\trecharge_channels.add(channelType);\r\n\t\t\t\t\t} else if (rechargeArray.size() == 3) {\r\n\t\t\t\t\t\t\t\trecharge_channels.add(\"-99\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//String RECHARGE_CHANNELS = String.join(\",\", recharge_channels);\r\nString RECHARGE_CHANNELS = recharge_channels.toString();\r\nRECHARGE_CHANNELS = RECHARGE_CHANNELS.substring(1,RECHARGE_CHANNELS.length()-1).trim();\r\nreturn RECHARGE_CHANNELS;"
Preprocessed Expression : JsonObject RECHARGE_SERIES =  RECHARGE_BLOCK_SERIES_LifeTime;
String channelType = null;
java.util.ArrayList<String> recharge_channels = new java.util.ArrayList<String>();

if (RECHARGE_SERIES.has("keys")) {
	JsonArray RECHARGE_SERIES_KEYArray = (JsonArray) RECHARGE_SERIES.get("keys");
	if (RECHARGE_SERIES_KEYArray != null) {
		int count = 0;
		for (int j = RECHARGE_SERIES_KEYArray.size() - 1; j >= 0; j--) {

			JsonObject keyElement = (JsonObject) RECHARGE_SERIES
							.get(String.valueOf(RECHARGE_SERIES_KEYArray.get(j)));

			if (keyElement.has("RECHARGE_DATA")) {
				JsonArray rechargeArray = keyElement.get("RECHARGE_DATA").getAsJsonArray();

				if (count < xrecharges) {
					if (rechargeArray.size() == 4) {
						channelType = rechargeArray.get(3).getAsString();
								recharge_channels.add(channelType);
					} else if (rechargeArray.size() == 3) {
								recharge_channels.add("-99");
					}
					count++;
				} else {
					break;
				}

			}
		}
	}
}

//String RECHARGE_CHANNELS = String.join(",", recharge_channels);
String RECHARGE_CHANNELS = recharge_channels.toString();
RECHARGE_CHANNELS = RECHARGE_CHANNELS.substring(1,RECHARGE_CHANNELS.length()-1).trim();
return RECHARGE_CHANNELS;
line 1:0 no viable alternative at input 'JsonObject'
------------Infered params RECHARGE_BLOCK_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getHistoryOfRechargeMethods" -- > "JsonObject RECHARGE_SERIES =  RECHARGE_BLOCK_SERIES_LifeTime;\r\nString method = null;\r\njava.util.ArrayList<String> recharge_methods = new java.util.ArrayList<String>();\r\nif (RECHARGE_SERIES.has(\"keys\")) {\r\n\tJsonArray RECHARGE_SERIES_KEYArray = (JsonArray) RECHARGE_SERIES.get(\"keys\");\r\n\t\t\t\r\n\tif (RECHARGE_SERIES_KEYArray != null) {\r\n\t\tint count = 0;\r\n\t\tfor (int j = RECHARGE_SERIES_KEYArray.size() - 1; j >= 0; j--) {\r\n\r\n\t\t\tJsonObject keyElement = (JsonObject) RECHARGE_SERIES\r\n\t\t\t\t\t\t\t.get(String.valueOf(RECHARGE_SERIES_KEYArray.get(j)));\r\n\r\n\t\t\tif (keyElement.has(\"RECHARGE_DATA\")) {\r\n\t\t\t\tJsonArray rechargeArray = keyElement.get(\"RECHARGE_DATA\").getAsJsonArray();\r\n\r\n\t\t\t\tif (count < xrecharges) {\r\n\t\t\t\t\tmethod = rechargeArray.get(2).getAsString();\r\n\t\t\t\t\trecharge_methods.add(method);\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//String RECHARGE_METHODS = String.join(\",\", recharge_methods);\r\nString RECHARGE_METHODS = recharge_methods.toString();\r\nRECHARGE_METHODS = RECHARGE_METHODS.substring(1,RECHARGE_METHODS.length()-1).trim();\r\nreturn RECHARGE_METHODS;"
Preprocessed Expression : JsonObject RECHARGE_SERIES =  RECHARGE_BLOCK_SERIES_LifeTime;
String method = null;
java.util.ArrayList<String> recharge_methods = new java.util.ArrayList<String>();
if (RECHARGE_SERIES.has("keys")) {
	JsonArray RECHARGE_SERIES_KEYArray = (JsonArray) RECHARGE_SERIES.get("keys");
			
	if (RECHARGE_SERIES_KEYArray != null) {
		int count = 0;
		for (int j = RECHARGE_SERIES_KEYArray.size() - 1; j >= 0; j--) {

			JsonObject keyElement = (JsonObject) RECHARGE_SERIES
							.get(String.valueOf(RECHARGE_SERIES_KEYArray.get(j)));

			if (keyElement.has("RECHARGE_DATA")) {
				JsonArray rechargeArray = keyElement.get("RECHARGE_DATA").getAsJsonArray();

				if (count < xrecharges) {
					method = rechargeArray.get(2).getAsString();
					recharge_methods.add(method);
					count++;
				} else {
					break;
				}	
			}
		}
	}
}

//String RECHARGE_METHODS = String.join(",", recharge_methods);
String RECHARGE_METHODS = recharge_methods.toString();
RECHARGE_METHODS = RECHARGE_METHODS.substring(1,RECHARGE_METHODS.length()-1).trim();
return RECHARGE_METHODS;
line 1:0 no viable alternative at input 'JsonObject'
------------Infered params RECHARGE_BLOCK_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getNthRecharge" -- > "if( nthRecharge == 0 )\r\n\t\t\treturn false;\r\n\t\tint count = getRechargeCounts( value, value, start, numDays );\r\n\t\tif( count == -1 )\r\n\t\t\treturn false;\r\n\t\tif( count == 0 )\r\n\t\t\treturn false;\r\n\t\tif( count % nthRecharge == 0 )\r\n\t\t\treturn true;\r\n\t\treturn false;"
Preprocessed Expression : if( nthRecharge == 0 )
			return false;
		int count =  SIFTMATH.getRechargeCounts( value, value, start, numDays );
		if( count == -1 )
			return false;
		if( count == 0 )
			return false;
		if( count % nthRecharge == 0 )
			return true;
		return false;
line 1:0 no viable alternative at input 'if'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getBundleInfo" -- > "String bundleName = \"\";\r\nString bundleUnit = \"\";\r\nString bundleType = \"\";\r\nString bundleQuota = \"\";\r\nString bundleCategory = \"\";\r\nString totalActiveBalance = \"\";\r\nString currentAverageScore = \"\";\r\nString totalActiveInstances = \"\";\r\nString bundleStartDte = \"\";\r\nString bundleExpiryDate = \"\";\r\nString bundleInfo = \"\";\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\nd.setTimeZone(java.util.TimeZone.getTimeZone(\"GMT\"));\r\nif (BUNDLE_INFO_LifeTime != null && !BUNDLE_INFO_LifeTime.isJsonNull()\r\n\t\t&& BUNDLE_INFO_LifeTime.entrySet().size() != 0) {\r\n\tjava.util.Set<java.util.Map.Entry<String, JsonElement>> entrySet = BUNDLE_INFO_LifeTime.entrySet();\r\n\tfor (java.util.Map.Entry<String, JsonElement> entry : entrySet) {\r\n\t\tbundleName = (String) entry.getKey();\r\n\t\tJsonObject bundleObject = (JsonObject) entry.getValue();\r\n\t\tif (bundleObject != null && !bundleObject.isJsonNull() && bundleObject.entrySet().size() != 0) {\r\n\t\t\tif (bundleObject.has(\"bundleUnit\") && !bundleObject.get(\"bundleUnit\").getAsString().equals(\"-99\")) {\r\n\t\t\t\tbundleUnit = bundleObject.get(\"bundleUnit\").getAsString();\r\n\t\t\t}\r\n\t\t\tif (bundleObject.has(\"bundleType\") && !bundleObject.get(\"bundleType\").getAsString().equals(\"-99\")) {\r\n\t\t\t\tbundleType = bundleObject.get(\"bundleType\").getAsString();\r\n\t\t\t}\r\n\t\t\tif (bundleObject.has(\"bundleQuantity\")\r\n\t\t\t\t\t&& !bundleObject.get(\"bundleQuantity\").getAsString().equals(\"-99\")) {\r\n\t\t\t\tbundleQuota = bundleObject.get(\"bundleQuantity\").getAsString();\r\n\t\t\t}\r\n\t\t\tif (bundleObject.has(\"category\") && !bundleObject.get(\"category\").getAsString().equals(\"-99\")) {\r\n\t\t\t\tbundleCategory = bundleObject.get(\"category\").getAsString();\r\n\t\t\t}\r\n\t\t\tif (bundleObject.has(\"totalActiveBalance\")\r\n\t\t\t\t\t&& !bundleObject.get(\"totalActiveBalance\").getAsString().equals(\"-99\")) {\r\n\t\t\t\ttotalActiveBalance = bundleObject.get(\"totalActiveBalance\").getAsString();\r\n\t\t\t}\r\n\t\t\tif (bundleObject.has(\"currentScore\")\r\n\t\t\t\t\t&& !bundleObject.get(\"currentScore\").getAsString().equals(\"-99\")) {\r\n\t\t\t\tcurrentAverageScore = bundleObject.get(\"currentScore\").getAsString();\r\n\t\t\t}\r\n\t\t\tif (bundleObject.has(\"activeInstances\")\r\n\t\t\t\t\t&& bundleObject.get(\"activeInstances\").getAsJsonArray().size() != 0) {\r\n\t\t\t\tJsonArray activeInstances = bundleObject.get(\"activeInstances\").getAsJsonArray();\r\n\t\t\t\ttotalActiveInstances = String.valueOf(activeInstances.size());\r\n\t\t\t}\r\n\t\t\tif (bundleObject.has(\"bundleStartDate\")\r\n\t\t\t&& bundleObject.get(\"bundleStartDate\").getAsJsonArray().size() != 0) {\r\n\t\t\t\tJsonArray startDate = bundleObject.get(\"bundleStartDate\").getAsJsonArray();\r\n\t\t\t\tif (startDate.get(0).getAsLong() != -99) {\r\n\t\t\t\t\tlong stDate = startDate.get(0).getAsLong();\r\n\t\t\t\t\tjava.util.Date Stdte = new java.util.Date(stDate);\r\n\t\t\t\t\tbundleStartDte = d.format(Stdte);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (bundleObject.has(\"bundleExpiryDate\")\r\n\t\t\t\t\t&& bundleObject.get(\"bundleExpiryDate\").getAsLong() != -99) {\r\n\t\t\t\tlong endDate = bundleObject.get(\"bundleExpiryDate\").getAsLong();\r\n\t\t\t\tjava.util.Date Expdte = new java.util.Date(endDate);\r\n\t\t\t\tbundleExpiryDate = d.format(Expdte);\r\n\t\t\t}\r\n\t\t\tif (bundleInfo.equals(\"\"))\r\n\t\t\t\tbundleInfo = bundleName + \"~\" + bundleUnit + \"~\" + bundleType + \"~\" + bundleQuota + \"~\"\r\n\t\t\t\t\t\t+ bundleCategory + \"~\" + totalActiveBalance + \"~\" + currentAverageScore + \"~\"\r\n\t\t\t\t\t\t+ totalActiveInstances + \"~\" + bundleStartDte + \"~\" + bundleExpiryDate;\r\n\t\t\telse\r\n\t\t\t    bundleInfo = bundleInfo + \"~\" + bundleName + \"~\" + bundleUnit + \"~\" + bundleType + \"~\" + bundleQuota + \"~\"\r\n\t\t\t\t\t\t+ bundleCategory + \"~\" + totalActiveBalance + \"~\" + currentAverageScore + \"~\"\r\n\t\t\t\t\t\t+ totalActiveInstances + \"~\" + bundleStartDte + \"~\" + bundleExpiryDate;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\nreturn bundleInfo;"
Preprocessed Expression : String bundleName = "";
String bundleUnit = "";
String bundleType = "";
String bundleQuota = "";
String bundleCategory = "";
String totalActiveBalance = "";
String currentAverageScore = "";
String totalActiveInstances = "";
String bundleStartDte = "";
String bundleExpiryDate = "";
String bundleInfo = "";
java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
d.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));
if (BUNDLE_INFO_LifeTime != null && !BUNDLE_INFO_LifeTime.isJsonNull()
		&& BUNDLE_INFO_LifeTime.entrySet().size() != 0) {
	java.util.Set<java.util.Map.Entry<String, JsonElement>> entrySet = BUNDLE_INFO_LifeTime.entrySet();
	for (java.util.Map.Entry<String, JsonElement> entry : entrySet) {
		bundleName = (String) entry.getKey();
		JsonObject bundleObject = (JsonObject) entry.getValue();
		if (bundleObject != null && !bundleObject.isJsonNull() && bundleObject.entrySet().size() != 0) {
			if (bundleObject.has("bundleUnit") && !bundleObject.get("bundleUnit").getAsString().equals("-99")) {
				bundleUnit = bundleObject.get("bundleUnit").getAsString();
			}
			if (bundleObject.has("bundleType") && !bundleObject.get("bundleType").getAsString().equals("-99")) {
				bundleType = bundleObject.get("bundleType").getAsString();
			}
			if (bundleObject.has("bundleQuantity")
					&& !bundleObject.get("bundleQuantity").getAsString().equals("-99")) {
				bundleQuota = bundleObject.get("bundleQuantity").getAsString();
			}
			if (bundleObject.has("category") && !bundleObject.get("category").getAsString().equals("-99")) {
				bundleCategory = bundleObject.get("category").getAsString();
			}
			if (bundleObject.has("totalActiveBalance")
					&& !bundleObject.get("totalActiveBalance").getAsString().equals("-99")) {
				totalActiveBalance = bundleObject.get("totalActiveBalance").getAsString();
			}
			if (bundleObject.has("currentScore")
					&& !bundleObject.get("currentScore").getAsString().equals("-99")) {
				currentAverageScore = bundleObject.get("currentScore").getAsString();
			}
			if (bundleObject.has("activeInstances")
					&& bundleObject.get("activeInstances").getAsJsonArray().size() != 0) {
				JsonArray activeInstances = bundleObject.get("activeInstances").getAsJsonArray();
				totalActiveInstances = String.valueOf(activeInstances.size());
			}
			if (bundleObject.has("bundleStartDate")
			&& bundleObject.get("bundleStartDate").getAsJsonArray().size() != 0) {
				JsonArray startDate = bundleObject.get("bundleStartDate").getAsJsonArray();
				if (startDate.get(0).getAsLong() != -99) {
					long stDate = startDate.get(0).getAsLong();
					java.util.Date Stdte = new java.util.Date(stDate);
					bundleStartDte = d.format(Stdte);
				}
			}
			if (bundleObject.has("bundleExpiryDate")
					&& bundleObject.get("bundleExpiryDate").getAsLong() != -99) {
				long endDate = bundleObject.get("bundleExpiryDate").getAsLong();
				java.util.Date Expdte = new java.util.Date(endDate);
				bundleExpiryDate = d.format(Expdte);
			}
			if (bundleInfo.equals(""))
				bundleInfo = bundleName + "~" + bundleUnit + "~" + bundleType + "~" + bundleQuota + "~"
						+ bundleCategory + "~" + totalActiveBalance + "~" + currentAverageScore + "~"
						+ totalActiveInstances + "~" + bundleStartDte + "~" + bundleExpiryDate;
			else
			    bundleInfo = bundleInfo + "~" + bundleName + "~" + bundleUnit + "~" + bundleType + "~" + bundleQuota + "~"
						+ bundleCategory + "~" + totalActiveBalance + "~" + currentAverageScore + "~"
						+ totalActiveInstances + "~" + bundleStartDte + "~" + bundleExpiryDate;
				}
			}
		}
return bundleInfo;
line 1:0 no viable alternative at input 'String'
------------Infered params BUNDLE_INFO_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "slice" -- > "JsonArray result = new JsonArray();\r\n\t\tfor( int i = start; i <= end; i++ )\r\n\t\t\tresult.add( array.get( i ) );\r\n\t\treturn result;"
Preprocessed Expression : JsonArray result = new JsonArray();
		for( int i = start; i <= end; i++ )
			result.add( array.get( i ) );
		return result;
line 1:0 no viable alternative at input 'JsonArray'
Compiling Function : "getMaxExpDiscountDate" -- > "if (OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime != null && !OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.isJsonNull() && OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.entrySet().size() > 0) {\r\n     String formatedDate =\"\";\r\n\tif (OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.has(\"maxExpDiscountDate\")) {\r\n\t\tJsonElement maxExpDiscountDate = OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.get(\"maxExpDiscountDate\");\r\n\t\t\r\n\t\tif (!maxExpDiscountDate.isJsonNull()) {\r\n\r\n\t\t\ttry {\r\n\t\t\t   long expDate= Long.parseLong(maxExpDiscountDate.getAsString());\r\n\t\t\t    if(expDate>0) {\r\n\t\t\t\tjava.util.Date date = new java.util.Date(Long.parseLong(maxExpDiscountDate.getAsString()));\r\n\t\t\t\tjava.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n\t\t\t\tdateFormat.setTimeZone(java.util.TimeZone.getTimeZone(\"GMT\"));\r\n\t\t\t\tformatedDate = dateFormat.format(date);\r\n\t\t\t\t}\r\n\t\t\t\treturn formatedDate;\r\n\t\t\t\t\r\n\t\t\t} catch (NumberFormatException e) {\r\n\t\t\t\treturn \"\";\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n}\r\n\r\nreturn \"\";"
Preprocessed Expression : if (OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime != null && !OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.isJsonNull() && OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.entrySet().size() > 0) {
     String formatedDate ="";
	if (OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.has("maxExpDiscountDate")) {
		JsonElement maxExpDiscountDate = OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.get("maxExpDiscountDate");
		
		if (!maxExpDiscountDate.isJsonNull()) {

			try {
			   long expDate= Long.parseLong(maxExpDiscountDate.getAsString());
			    if(expDate>0) {
				java.util.Date date = new java.util.Date(Long.parseLong(maxExpDiscountDate.getAsString()));
				java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				dateFormat.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));
				formatedDate = dateFormat.format(date);
				}
				return formatedDate;
				
			} catch (NumberFormatException e) {
				return "";
			}
		}
    }
}

return "";
line 1:0 no viable alternative at input 'if'
------------Infered params OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getHendrixBundleBalance" -- > "Double coreShortBalance = getActiveBundleBalance(\"CFSS_C_MB_PRE_B_ND\");\r\nString coreDataBalanceShortExpiry = (coreShortBalance==0.0)?\"\":String.format (\"%.6f\", coreShortBalance);\r\nDouble coreLongBalance = getActiveBundleBalance(\"CFSS_C_MB_PRE_B_NBLKD\");\r\nString coreDataBalanceLongExpiry = (coreLongBalance==0.0)?\"\":String.format (\"%.6f\", coreLongBalance);\r\nDouble dataBal = getActiveBundleBalance(\"CFSS_C_MB_PRE_B_MIG_NDBNK,CFSS_C_MB_PRE_B_MIG_TDBNK\");\r\nString dataBalance = (dataBal==0.0)?\"\":String.format (\"%.6f\", dataBal);\r\nDouble bonusDataBal = getActiveBundleBalance(\"CFSS_C_MB_PRE_B_NBNSD,CFSS_C_MB_PRE_SB_ND\");\r\nString bonusDataBalance = (bonusDataBal==0.0)?\"\":String.format (\"%.6f\", bonusDataBal);\r\nDouble intlZone1 = getActiveBundleBalance(\"CFSS_C_MB_PRE_B_TIVZ1,CFSS_C_MB_PRE_B_BIVZ1\");\r\nString intlCallingBalZone1 = (intlZone1==0.0)?\"\":String.format (\"%.6f\", intlZone1);\r\nDouble intlZone2 = getActiveBundleBalance(\"CFSS_C_MB_PRE_B_TIVZ2,CFSS_C_MB_PRE_B_BIVZ2\");\r\nString intlCallingBalZone2 = (intlZone2==0.0)?\"\":String.format (\"%.6f\", intlZone2);\r\nDouble dataRollover = getActiveBundleBalance(\"CFSS_C_MB_PRE_B_RO_CON,CFSS_C_MB_PRE_B_RO_1OFF,CFSS_C_MB_PRE_B_RO\");\r\nString dataRolloverBalance = (dataRollover==0.0)?\"\":String.format (\"%.6f\", dataRollover);\r\nreturn coreDataBalanceShortExpiry+\"|\"+coreDataBalanceLongExpiry+\"|\"+dataBalance+\"|\"+bonusDataBalance+\"|\"+intlCallingBalZone1+\"|\"+intlCallingBalZone2+\"|\"+dataRolloverBalance;"
Preprocessed Expression : Double coreShortBalance =  SIFTMATH.execDoubleFunction("getActiveBundleBalance", "CFSS_C_MB_PRE_B_ND");
String coreDataBalanceShortExpiry = (coreShortBalance==0.0)?"":String.format ("%.6f", coreShortBalance);
Double coreLongBalance =  SIFTMATH.execDoubleFunction("getActiveBundleBalance", "CFSS_C_MB_PRE_B_NBLKD");
String coreDataBalanceLongExpiry = (coreLongBalance==0.0)?"":String.format ("%.6f", coreLongBalance);
Double dataBal =  SIFTMATH.execDoubleFunction("getActiveBundleBalance", "CFSS_C_MB_PRE_B_MIG_NDBNK,CFSS_C_MB_PRE_B_MIG_TDBNK");
String dataBalance = (dataBal==0.0)?"":String.format ("%.6f", dataBal);
Double bonusDataBal =  SIFTMATH.execDoubleFunction("getActiveBundleBalance", "CFSS_C_MB_PRE_B_NBNSD,CFSS_C_MB_PRE_SB_ND");
String bonusDataBalance = (bonusDataBal==0.0)?"":String.format ("%.6f", bonusDataBal);
Double intlZone1 =  SIFTMATH.execDoubleFunction("getActiveBundleBalance", "CFSS_C_MB_PRE_B_TIVZ1,CFSS_C_MB_PRE_B_BIVZ1");
String intlCallingBalZone1 = (intlZone1==0.0)?"":String.format ("%.6f", intlZone1);
Double intlZone2 =  SIFTMATH.execDoubleFunction("getActiveBundleBalance", "CFSS_C_MB_PRE_B_TIVZ2,CFSS_C_MB_PRE_B_BIVZ2");
String intlCallingBalZone2 = (intlZone2==0.0)?"":String.format ("%.6f", intlZone2);
Double dataRollover =  SIFTMATH.execDoubleFunction("getActiveBundleBalance", "CFSS_C_MB_PRE_B_RO_CON,CFSS_C_MB_PRE_B_RO_1OFF,CFSS_C_MB_PRE_B_RO");
String dataRolloverBalance = (dataRollover==0.0)?"":String.format ("%.6f", dataRollover);
return coreDataBalanceShortExpiry+"|"+coreDataBalanceLongExpiry+"|"+dataBalance+"|"+bonusDataBalance+"|"+intlCallingBalZone1+"|"+intlCallingBalZone2+"|"+dataRolloverBalance;
line 1:0 no viable alternative at input 'Double'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "notReachedMaxFulfillmentPerCustomer" -- > "return true;"
Preprocessed Expression : return true;
line 1:0 no viable alternative at input 'return'
Compiling Function : "getControlledContactCount" -- > "long lStart, lEnd;\r\n\t\tint count = 0;\r\n\t\tlong msecPerDay = 86400000l;\r\n\t\tif( start == - 1 )\r\n\t\t\tlStart = -1;\r\n\t\telse \r\n\t\t\tlStart = getCurrentTime() - start * msecPerDay;\t\t// Until the current time of the day\r\n\r\n\t\tif( duration == -1 )\r\n\t\t\tlEnd = -1;\r\n\t\telse{\r\n\t\t\tlEnd = ( lStart - lStart % msecPerDay ) - ( ( duration - 1 ) * msecPerDay );\r\n\t\t\tlStart += msecPerDay - 1000;\r\n\t\t}\r\n\r\n\t\tif( category.equals( \"*\" ) ){\r\n\t\t\tif( offer.equals( \"*\" ) ){\r\n\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\treturn OFFER_COUNT_LifeTime_Control.get( \"TotalCount\" ).getAsInt();\t\t\t\t\t\t\t\t\t// getContactCount( \"*\", \"*\", \"*\", -1, -1 );\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tcom.google.gson.JsonElement contactSeriesEle = OFFER_COUNT_LifeTime_Control.get( \"CONTACT_SERIES\" );\r\n\t\t\t\t\t\tif( contactSeriesEle == null || contactSeriesEle.isJsonNull() )\r\n\t\t\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\t\t\treturn getRangeCountFromArray( contactSeriesEle.getAsJsonArray(), lStart, lEnd );\r\n\t\t\t\t\t}\r\n\t\t\t\t} else{\r\n\t\t\t\t\tif( lStart == -1 ){\r\n\t\t\t\t\t\tcom.google.gson.JsonElement channelEle = OFFER_COUNT_LifeTime_Control.get( channel);\r\n\t\t\t\t\t\tif( channelEle == null )\r\n\t\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\treturn channelEle.getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// getContactCount( \"*\", \"*\", \"SMS\", -1, -1 );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// TODO: Need to add for getContactCount( \"*\", \"*\", \"SMS\", 0, 30 );\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else{\r\n\r\n\t\t\t\tString[] offerCategories = null;\r\n\t\t\t\tif( OFFER_CATEGORY == null || OFFER_CATEGORY.equals( \"\" ) ) {\r\n\t\t\t\t\tcom.google.gson.JsonElement offerCatEle = getSiftwareAttribute( \"Offer\", offer, \"category\" );\r\n\t\t\t\t\tif( offerCatEle == null || offerCatEle.isJsonNull() ) {\r\n\t\t\t\t\t\tofferCategories = new String[ 1 ];\r\n\t\t\t\t\t\tofferCategories[ 0 ] = \"GENERIC\";\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\tofferCategories = offerCatEle.getAsString().split( \",\" );\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tofferCategories = OFFER_CATEGORY.split( \",\" );\r\n\r\n\r\n\t\t\t\tfor( int i = 0; i < offerCategories.length; i ++ ){\r\n\t\t\t\t\tjava.lang.String cat = offerCategories[ i ];\r\n\t\t\t\t\tcom.google.gson.JsonElement catele = OFFER_COUNT_LifeTime_Control.get( cat );\r\n\t\t\t\t\tif( catele == null )\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\tcom.google.gson.JsonObject catObj = catele.getAsJsonObject();\r\n\t\t\t\t\tcom.google.gson.JsonElement catOfferEle = catObj.get( offer);\r\n\t\t\t\t\tif( catOfferEle == null )\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\tcom.google.gson.JsonObject catOfferObj = catOfferEle.getAsJsonObject();\r\n\t\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\t\treturn catOfferObj.get( \"count\" ).getAsInt();\t\t\t\t\t\t\t\t\t\t\t// getContactCount( \"*\", \"Offer1\", \"*\", -1, -1 );\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tcom.google.gson.JsonElement dateSeriesEle = catOfferObj.get( \"date_series\" );\r\n\t\t\t\t\t\t\tif( dateSeriesEle == null )\r\n\t\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\t\treturn getRangeCountFromArray( dateSeriesEle.getAsJsonArray(), lStart, lEnd );\t\t\t// getContactCount( \"*\", \"Offer1\", \"*\", 0, 30 );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else{\r\n\t\t\t\t\t\tif( lStart == -1 ){\r\n\t\t\t\t\t\t\tcom.google.gson.JsonElement channelEle = catOfferObj.get( channel);\r\n\t\t\t\t\t\t\tif( channelEle == null )\r\n\t\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\t\treturn channelEle.getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// getContactCount( \"*\", \"Offer1\", \"SMS\", -1, -1 );\r\n\t\t\t\t\t\t} else{\r\n\t\t\t\t\t\t\tcom.google.gson.JsonElement channelDateSeriesEle = catOfferObj.get( channel+ \"_date_series\" );\r\n\t\t\t\t\t\t\tif( channelDateSeriesEle == null )\r\n\t\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\t\treturn getRangeCountFromArray( channelDateSeriesEle.getAsJsonArray(), lStart, lEnd );\t//  getContactCount( \"*\", \"Offer1\", \"SMS\", 0, 30 );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else{\r\n\t\t\tcom.google.gson.JsonElement catEle = OFFER_COUNT_LifeTime_Control.get( category );\r\n\t\t\tif( catEle == null )\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\tcom.google.gson.JsonObject catObj = catEle.getAsJsonObject();\r\n\t\t\tif( offer.equals( \"*\" ) ){\r\n\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\treturn catObj.get( \"count\" ).getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t//  getContactCount( \"Cat1\", \"*\", \"*\", -1, -1 );\r\n\r\n\t\t\t\t\tcom.google.gson.JsonElement dateSeriesEle = catObj.get( \"date_series\" );\r\n\t\t\t\t\tif( dateSeriesEle == null )\r\n\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\treturn getRangeCountFromArray( dateSeriesEle.getAsJsonArray(), lStart, lEnd );\t\t\t\t\t//  getContactCount( \"Cat1\", \"*\", \"*\", 0, 30 );\r\n\t\t\t\t} else{\r\n\t\t\t\t\tif( lStart == -1 ){\r\n\t\t\t\t\t\tcom.google.gson.JsonElement channelEle = catObj.get( channel);\r\n\t\t\t\t\t\tif( channelEle == null )\r\n\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\treturn catObj.get( channel).getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t//  getContactCount( \"Cat1\", \"*\", \"SMS\", -1, -1 );\r\n\t\t\t\t\t} else{\r\n\t\t\t\t\t\tcom.google.gson.JsonElement catchannelEle = catObj.get( channel+ \"_date_series\" );\r\n\t\t\t\t\t\tif( catchannelEle == null ) \r\n\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\treturn getRangeCountFromArray( catchannelEle.getAsJsonArray(), lStart, lEnd );\t\t\t\t//  getContactCount( \"Cat1\", \"*\", \"SMS\", 0, 30 );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else{\r\n\t\t\t\tcom.google.gson.JsonElement offerEle = catObj.get( offer);\r\n\t\t\t\tif( offerEle == null )\r\n\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\tcom.google.gson.JsonObject offerObj = offerEle.getAsJsonObject();\r\n\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\treturn offerObj.get( \"count\" ).getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t//  getContactCount( \"Cat1\", \"Offer1\", \"*\", -1, -1 );\r\n\r\n\t\t\t\t\tcom.google.gson.JsonElement dateSeriesEle = offerObj.get( \"date_series\" );\r\n\t\t\t\t\tif( dateSeriesEle == null )\r\n\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\treturn getRangeCountFromArray( dateSeriesEle.getAsJsonArray(), lStart, lEnd );\t\t\t\t\t//  getContactCount( \"Cat1\", \"Offer1\", \"*\", 0, 30 );\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tcom.google.gson.JsonElement channelEle = offerObj.get( channel);\r\n\t\t\t\t\tif( channelEle == null )\r\n\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\treturn offerObj.get( channel).getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t//  getContactCount( \"Cat1\", \"Offer1\", \"SMS\", -1, -1 );\r\n\r\n\t\t\t\t\tcom.google.gson.JsonElement channelDateSeriesEle = offerObj.get( channel+ \"_date_series\" );\r\n\t\t\t\t\tif( channelDateSeriesEle == null )\r\n\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\treturn getRangeCountFromArray( channelDateSeriesEle.getAsJsonArray(), lStart, lEnd );\t\t\t//  getContactCount( \"Cat1\", \"Offer1\", \"SMS\", 0, 30 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn count;"
Preprocessed Expression : long lStart, lEnd;
		int count = 0;
		long msecPerDay = 86400000l;
		if( start == - 1 )
			lStart = -1;
		else 
			lStart =  SIFTMATH.getCurrentTime() - start * msecPerDay;		// Until the current time of the day

		if( duration == -1 )
			lEnd = -1;
		else{
			lEnd = ( lStart - lStart % msecPerDay ) - ( ( duration - 1 ) * msecPerDay );
			lStart += msecPerDay - 1000;
		}

		if( category.equals( "*" ) ){
			if( offer.equals( "*" ) ){
				if( channel.equals( "*" ) ){
					if( lStart == -1 )
						return OFFER_COUNT_LifeTime_Control.get( "TotalCount" ).getAsInt();									//  SIFTMATH.execIntFunction("getContactCount",  "*", "*", "*", -1, -1 );
					else{
						com.google.gson.JsonElement contactSeriesEle = OFFER_COUNT_LifeTime_Control.get( "CONTACT_SERIES" );
						if( contactSeriesEle == null || contactSeriesEle.isJsonNull() )
							return -1;

						return  SIFTMATH.execIntFunction("getRangeCountFromArray",  contactSeriesEle.getAsJsonArray(), lStart, lEnd );
					}
				} else{
					if( lStart == -1 ){
						com.google.gson.JsonElement channelEle = OFFER_COUNT_LifeTime_Control.get( channel);
						if( channelEle == null )
							return 0;
						return channelEle.getAsInt();																//  SIFTMATH.execIntFunction("getContactCount",  "*", "*", "SMS", -1, -1 );
					} else {
						// TODO: Need to add for  SIFTMATH.execIntFunction("getContactCount",  "*", "*", "SMS", 0, 30 );
						return -1;
					}
				}
			} else{

				String[] offerCategories = null;
				if( OFFER_CATEGORY == null || OFFER_CATEGORY.equals( "" ) ) {
					com.google.gson.JsonElement offerCatEle =  SIFTMATH.getSiftwareAttribute( "Offer", offer, "category" );
					if( offerCatEle == null || offerCatEle.isJsonNull() ) {
						offerCategories = new String[ 1 ];
						offerCategories[ 0 ] = "GENERIC";
					} else
						offerCategories = offerCatEle.getAsString().split( "," );
				}
				else
					offerCategories = OFFER_CATEGORY.split( "," );


				for( int i = 0; i < offerCategories.length; i ++ ){
					java.lang.String cat = offerCategories[ i ];
					com.google.gson.JsonElement catele = OFFER_COUNT_LifeTime_Control.get( cat );
					if( catele == null )
						continue;

					com.google.gson.JsonObject catObj = catele.getAsJsonObject();
					com.google.gson.JsonElement catOfferEle = catObj.get( offer);
					if( catOfferEle == null )
						continue;

					com.google.gson.JsonObject catOfferObj = catOfferEle.getAsJsonObject();
					if( channel.equals( "*" ) ){
						if( lStart == -1 )
							return catOfferObj.get( "count" ).getAsInt();											//  SIFTMATH.execIntFunction("getContactCount",  "*", "Offer1", "*", -1, -1 );
						else{
							com.google.gson.JsonElement dateSeriesEle = catOfferObj.get( "date_series" );
							if( dateSeriesEle == null )
								return 0;

							return  SIFTMATH.execIntFunction("getRangeCountFromArray",  dateSeriesEle.getAsJsonArray(), lStart, lEnd );			//  SIFTMATH.execIntFunction("getContactCount",  "*", "Offer1", "*", 0, 30 );
						}
					} else{
						if( lStart == -1 ){
							com.google.gson.JsonElement channelEle = catOfferObj.get( channel);
							if( channelEle == null )
								return 0;

							return channelEle.getAsInt();															//  SIFTMATH.execIntFunction("getContactCount",  "*", "Offer1", "SMS", -1, -1 );
						} else{
							com.google.gson.JsonElement channelDateSeriesEle = catOfferObj.get( channel+ "_date_series" );
							if( channelDateSeriesEle == null )
								return 0;

							return  SIFTMATH.execIntFunction("getRangeCountFromArray",  channelDateSeriesEle.getAsJsonArray(), lStart, lEnd );	//   SIFTMATH.execIntFunction("getContactCount",  "*", "Offer1", "SMS", 0, 30 );
						}
					}
				}
			}
		} else{
			com.google.gson.JsonElement catEle = OFFER_COUNT_LifeTime_Control.get( category );
			if( catEle == null )
				return 0;

			com.google.gson.JsonObject catObj = catEle.getAsJsonObject();
			if( offer.equals( "*" ) ){
				if( channel.equals( "*" ) ){
					if( lStart == -1 )
						return catObj.get( "count" ).getAsInt();													//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "*", "*", -1, -1 );

					com.google.gson.JsonElement dateSeriesEle = catObj.get( "date_series" );
					if( dateSeriesEle == null )
						return 0;

					return  SIFTMATH.execIntFunction("getRangeCountFromArray",  dateSeriesEle.getAsJsonArray(), lStart, lEnd );					//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "*", "*", 0, 30 );
				} else{
					if( lStart == -1 ){
						com.google.gson.JsonElement channelEle = catObj.get( channel);
						if( channelEle == null )
							return 0;

						return catObj.get( channel).getAsInt();													//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "*", "SMS", -1, -1 );
					} else{
						com.google.gson.JsonElement catchannelEle = catObj.get( channel+ "_date_series" );
						if( catchannelEle == null ) 
							return 0;

						return  SIFTMATH.execIntFunction("getRangeCountFromArray",  catchannelEle.getAsJsonArray(), lStart, lEnd );				//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "*", "SMS", 0, 30 );
					}
				}
			} else{
				com.google.gson.JsonElement offerEle = catObj.get( offer);
				if( offerEle == null )
					return 0;

				com.google.gson.JsonObject offerObj = offerEle.getAsJsonObject();
				if( channel.equals( "*" ) ){
					if( lStart == -1 )
						return offerObj.get( "count" ).getAsInt();													//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "Offer1", "*", -1, -1 );

					com.google.gson.JsonElement dateSeriesEle = offerObj.get( "date_series" );
					if( dateSeriesEle == null )
						return 0;

					return  SIFTMATH.execIntFunction("getRangeCountFromArray",  dateSeriesEle.getAsJsonArray(), lStart, lEnd );					//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "Offer1", "*", 0, 30 );
				}
				else{
					com.google.gson.JsonElement channelEle = offerObj.get( channel);
					if( channelEle == null )
						return 0;

					if( lStart == -1 )
						return offerObj.get( channel).getAsInt();													//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "Offer1", "SMS", -1, -1 );

					com.google.gson.JsonElement channelDateSeriesEle = offerObj.get( channel+ "_date_series" );
					if( channelDateSeriesEle == null )
						return 0;

					return  SIFTMATH.execIntFunction("getRangeCountFromArray",  channelDateSeriesEle.getAsJsonArray(), lStart, lEnd );			//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "Offer1", "SMS", 0, 30 );
				}
			}
		}
		return count;
line 1:0 no viable alternative at input 'long'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params OFFER_COUNT_LifeTime_Control -- com.google.gson.JsonObject -- JsonObject
------------Infered params OFFER_CATEGORY -- java.lang.String -- String
Compiling Function : "getEtlInfo" -- > "/*String simType=\"\";\r\nString segmentList=\"\";\r\nString subscriberId=\"\";\r\nString subscriberService=\"\";*/\r\nString subscriberStatus=\"\";\r\n/*\r\nif(SIM_TYPE_LifeTime!=null && !SIM_TYPE_LifeTime.equals(\"-99\"))\r\n{\r\nsimType=SIM_TYPE_LifeTime;\r\n}\r\nif(SEGMENT_LIST_LifeTime!=null && !SEGMENT_LIST_LifeTime.equals(\"-99\"))\r\n{\r\nsegmentList=SEGMENT_LIST_LifeTime;\r\n}\r\nif(SUBSCRIBER_ID_LifeTime!=null && !SUBSCRIBER_ID_LifeTime.equals(\"-99\"))\r\n{\r\nsubscriberId=SUBSCRIBER_ID_LifeTime;\r\n}\r\nif(SUBSCRIBER_SERVICE_LifeTime!=null && !SUBSCRIBER_SERVICE_LifeTime.equals(\"-99\"))\r\n{\r\nsubscriberService=SUBSCRIBER_SERVICE_LifeTime;\r\n}\r\n*/\r\nif(SUBSCRIBER_STATUS_LifeTime!=null && !SUBSCRIBER_STATUS_LifeTime.equals(\"-99\"))\r\n{ \r\n    subscriberStatus=SUBSCRIBER_STATUS_LifeTime;\r\n}\r\n\r\nreturn subscriberStatus;"
Preprocessed Expression : /*String simType="";
String segmentList="";
String subscriberId="";
String subscriberService="";*/
String subscriberStatus="";
/*
if(SIM_TYPE_LifeTime!=null && !SIM_TYPE_LifeTime.equals("-99"))
{
simType=SIM_TYPE_LifeTime;
}
if(SEGMENT_LIST_LifeTime!=null && !SEGMENT_LIST_LifeTime.equals("-99"))
{
segmentList=SEGMENT_LIST_LifeTime;
}
if(SUBSCRIBER_ID_LifeTime!=null && !SUBSCRIBER_ID_LifeTime.equals("-99"))
{
subscriberId=SUBSCRIBER_ID_LifeTime;
}
if(SUBSCRIBER_SERVICE_LifeTime!=null && !SUBSCRIBER_SERVICE_LifeTime.equals("-99"))
{
subscriberService=SUBSCRIBER_SERVICE_LifeTime;
}
*/
if(SUBSCRIBER_STATUS_LifeTime!=null && !SUBSCRIBER_STATUS_LifeTime.equals("-99"))
{ 
    subscriberStatus=SUBSCRIBER_STATUS_LifeTime;
}

return subscriberStatus;
line 5:0 no viable alternative at input 'String'
------------Infered params SUBSCRIBER_STATUS_LifeTime -- java.lang.String -- String
Compiling Function : "getAverageRecharge" -- > "long msecPerDay = 86400000L;\r\n\t\tJsonObject jCreditSeries = CREDIT_SERIES_LifeTime;\r\n\t\tint numdays = numDays - 1;\r\n\t\tlong lStart = getCurrentTime() - ( startDay * msecPerDay );\r\n\t\tlStart = lStart - ( lStart % msecPerDay );\r\n\t\tlong lEnd = lStart - ( numdays * msecPerDay );\r\n\r\n\t\tint totalCount = 0;\r\n\t\tdouble totalAmount = 0;\r\n\t\tfor( long i = lEnd; i <= lStart; i += msecPerDay ) {\r\n\t\t\tString index = new Long( i ).toString();\r\n\t\t\tJsonElement e = jCreditSeries.get( index );\r\n\t\t\tif( e == null )\r\n\t\t\t\tcontinue;\r\n\t\t\tJsonArray outerArray = e.getAsJsonArray();\r\n\t\t\tfor( int j = 0; j < outerArray.size(); j++ ) {\r\n\t\t\t\tJsonArray innerArray = outerArray.get( j ).getAsJsonArray();\r\n\t\t\t\tJsonElement eCreditValue = innerArray.get( 0 );\r\n\t\t\t\tif( eCreditValue != null ) {\r\n\t\t\t\t\ttotalCount++;\r\n\t\t\t\t\ttotalAmount += eCreditValue.getAsDouble();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif( totalCount == 0 )\r\n\t\t\treturn -1.0;\r\n\t\treturn totalAmount / totalCount;"
Preprocessed Expression : long msecPerDay = 86400000L;
		JsonObject jCreditSeries = CREDIT_SERIES_LifeTime;
		int numdays = numDays - 1;
		long lStart =  SIFTMATH.getCurrentTime() - ( startDay * msecPerDay );
		lStart = lStart - ( lStart % msecPerDay );
		long lEnd = lStart - ( numdays * msecPerDay );

		int totalCount = 0;
		double totalAmount = 0;
		for( long i = lEnd; i <= lStart; i += msecPerDay ) {
			String index = new Long( i ).toString();
			JsonElement e = jCreditSeries.get( index );
			if( e == null )
				continue;
			JsonArray outerArray = e.getAsJsonArray();
			for( int j = 0; j < outerArray.size(); j++ ) {
				JsonArray innerArray = outerArray.get( j ).getAsJsonArray();
				JsonElement eCreditValue = innerArray.get( 0 );
				if( eCreditValue != null ) {
					totalCount++;
					totalAmount += eCreditValue.getAsDouble();
				}
			}
		}
		if( totalCount == 0 )
			return -1.0;
		return totalAmount / totalCount;
line 1:0 no viable alternative at input 'long'
------------Infered params CREDIT_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getBundleBalance" -- > "JsonElement bundleInfoJele = BUNDLE_INFO_LifeTime;\r\n\t\tif( bundleInfoJele != null && !bundleInfoJele.isJsonNull() ) {\r\n\t\t\tJsonElement bundleNameJele = bundleInfoJele.getAsJsonObject().get( bundleName );\r\n\t\t\tif( bundleNameJele != null && !bundleNameJele.isJsonNull() ) {\r\n\t\t\t\tJsonElement totalActiveBalanceJele = bundleNameJele.getAsJsonObject().get( \"totalActiveBalance\" );\r\n\t\t\t\tif( totalActiveBalanceJele != null && !totalActiveBalanceJele.isJsonNull() ) {\r\n\t\t\t\t\treturn totalActiveBalanceJele.getAsDouble();\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0.0;"
Preprocessed Expression : JsonElement bundleInfoJele = BUNDLE_INFO_LifeTime;
		if( bundleInfoJele != null && !bundleInfoJele.isJsonNull() ) {
			JsonElement bundleNameJele = bundleInfoJele.getAsJsonObject().get( bundleName );
			if( bundleNameJele != null && !bundleNameJele.isJsonNull() ) {
				JsonElement totalActiveBalanceJele = bundleNameJele.getAsJsonObject().get( "totalActiveBalance" );
				if( totalActiveBalanceJele != null && !totalActiveBalanceJele.isJsonNull() ) {
					return totalActiveBalanceJele.getAsDouble();

				}
			}
		}
		return 0.0;
line 1:0 no viable alternative at input 'JsonElement'
------------Infered params BUNDLE_INFO_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getRangeCountFromArray" -- > "int count = 0;\r\n\t\tfor( int i = array.size() - 1; i >= 0; i -- ){\r\n\t\t\tlong currentKey = array.get( i ).getAsLong();\r\n\t\t\tif( currentKey < end )\r\n\t\t\t\treturn count;\r\n\r\n\t\t\tif( currentKey > start )\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tcount ++;\r\n\t\t}\r\n\t\treturn count;"
Preprocessed Expression : int count = 0;
		for( int i = array.size() - 1; i >= 0; i -- ){
			long currentKey = array.get( i ).getAsLong();
			if( currentKey < end )
				return count;

			if( currentKey > start )
				continue;

			count ++;
		}
		return count;
line 1:0 no viable alternative at input 'int'
Compiling Function : "getLastRechargeChannelType" -- > "String channelType = \"\";\r\nif(RECHARGE_BLOCK_SERIES_LifeTime!=null && !RECHARGE_BLOCK_SERIES_LifeTime.isJsonNull() && RECHARGE_BLOCK_SERIES_LifeTime.entrySet().size() > 0){\r\n\tJsonObject jRechargeSeries = RECHARGE_BLOCK_SERIES_LifeTime;\r\n\tJsonArray ekeys = jRechargeSeries.get(\"keys\").getAsJsonArray();\r\n\tString latestRechargeDate = ekeys.get(ekeys.size()-1).getAsString();\r\n\tif(jRechargeSeries.has( latestRechargeDate )){\r\n\t\tJsonObject rechargeData = jRechargeSeries.get( latestRechargeDate ).getAsJsonObject();\r\n\t\tif(rechargeData.has(\"RECHARGE_DATA\")){\r\n\t\t\tJsonArray rechargeDataArray = rechargeData.get(\"RECHARGE_DATA\").getAsJsonArray();\r\n\t\t\tif(rechargeDataArray.size() >=4)\r\n\t\t\t\tchannelType = rechargeDataArray.get(3).getAsString();\r\n\t\t}\r\n\t}\r\n}\r\nreturn channelType;"
Preprocessed Expression : String channelType = "";
if(RECHARGE_BLOCK_SERIES_LifeTime!=null && !RECHARGE_BLOCK_SERIES_LifeTime.isJsonNull() && RECHARGE_BLOCK_SERIES_LifeTime.entrySet().size() > 0){
	JsonObject jRechargeSeries = RECHARGE_BLOCK_SERIES_LifeTime;
	JsonArray ekeys = jRechargeSeries.get("keys").getAsJsonArray();
	String latestRechargeDate = ekeys.get(ekeys.size()-1).getAsString();
	if(jRechargeSeries.has( latestRechargeDate )){
		JsonObject rechargeData = jRechargeSeries.get( latestRechargeDate ).getAsJsonObject();
		if(rechargeData.has("RECHARGE_DATA")){
			JsonArray rechargeDataArray = rechargeData.get("RECHARGE_DATA").getAsJsonArray();
			if(rechargeDataArray.size() >=4)
				channelType = rechargeDataArray.get(3).getAsString();
		}
	}
}
return channelType;
line 1:0 no viable alternative at input 'String'
------------Infered params RECHARGE_BLOCK_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "isSubscriberMonitoredByProgram" -- > "if( OFFER_HISTORY_LifeTime != null && !OFFER_HISTORY_LifeTime.isJsonNull() && OFFER_HISTORY_LifeTime.entrySet().size() > 0 ) {\r\n\t\t\tlong currentTime = getCurrentTime();\r\n\t\t\tjava.util.Set< java.util.Map.Entry< String, JsonElement > > entrySet = OFFER_HISTORY_LifeTime.entrySet();\r\n\t\t\tfor( java.util.Map.Entry< String, JsonElement > entry : entrySet ) {\r\n\t\t\t\tString thiskey = entry.getKey().toString();\r\n\t\t\t\t\r\n\t\t\t\tJsonObject thisOffer = OFFER_HISTORY_LifeTime.get( thiskey ).getAsJsonObject();\r\n\t\t\t\t\r\n\r\n\t\t\t\tif( thisOffer.has(\"PROGRAM_ID\") && (thisOffer.get(\"PROGRAM_ID\").getAsString()).equals(prog_id)  && thisOffer.has(\"IS_CONTROL\" ) && !thisOffer.get(\"IS_CONTROL\" ).getAsBoolean() && thisOffer.has( \"OFFER_END_DATE\" ) ) {\r\n\t\t\t\t\tlong offerEndDate = thisOffer.get( \"OFFER_END_DATE\" ).getAsLong();\r\n\t\t\t\t\tif( offerEndDate > currentTime ) {\r\n\t\t\t\t\t\t// check if the max fulfillment limits reached or not\r\n\t\t\t\t\t\t// check if the max fulfillment limits reached or not\r\n\t\t\t\t\t\t//to uncomment after checking with product team\r\n\t\t\t\t\t//\tString expKey = \"MAX_FULFILLMENTS_\" + thisOffer.get( \"OFFER_ID\" ).getAsString();\r\n\t\t\t\t\t//\tObject fulfilResult = evaluateExpression( expKey );\r\n\t\t\t\t\t//\tif( fulfilResult.toString().equals( \"true\" ) ) \r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;"
Preprocessed Expression : if( OFFER_HISTORY_LifeTime != null && !OFFER_HISTORY_LifeTime.isJsonNull() && OFFER_HISTORY_LifeTime.entrySet().size() > 0 ) {
			long currentTime =  SIFTMATH.getCurrentTime();
			java.util.Set< java.util.Map.Entry< String, JsonElement > > entrySet = OFFER_HISTORY_LifeTime.entrySet();
			for( java.util.Map.Entry< String, JsonElement > entry : entrySet ) {
				String thiskey = entry.getKey().toString();
				
				JsonObject thisOffer = OFFER_HISTORY_LifeTime.get( thiskey ).getAsJsonObject();
				

				if( thisOffer.has("PROGRAM_ID") && (thisOffer.get("PROGRAM_ID").getAsString()).equals(prog_id)  && thisOffer.has("IS_CONTROL" ) && !thisOffer.get("IS_CONTROL" ).getAsBoolean() && thisOffer.has( "OFFER_END_DATE" ) ) {
					long offerEndDate = thisOffer.get( "OFFER_END_DATE" ).getAsLong();
					if( offerEndDate > currentTime ) {
						// check if the max fulfillment limits reached or not
						// check if the max fulfillment limits reached or not
						//to uncomment after checking with product team
					//	String expKey = "MAX_FULFILLMENTS_" + thisOffer.get( "OFFER_ID" ).getAsString();
					//	Object fulfilResult =  SIFTMATH.evaluateExpression( expKey );
					//	if( fulfilResult.toString().equals( "true" ) ) 
							return true;
					}
				}
			}
		}
		return false;
line 1:0 no viable alternative at input 'if'
------------Infered params OFFER_HISTORY_LifeTime -- com.google.gson.JsonObject -- JsonObject
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getSfmcFeedInfo" -- > "String contactId=\"\";\r\nString siebelBan=\"\";\r\nString sfAccountId=\"\";\r\n/*String prefchannel=\"\";*/\r\nif(CONTACT_ID_LifeTime!=null && !CONTACT_ID_LifeTime.equals(\"-99\"))\r\n{\r\ncontactId=CONTACT_ID_LifeTime;\r\n}\r\nif(SIEBEL_BAN_LifeTime!=null && !SIEBEL_BAN_LifeTime.equals(\"-99\"))\r\n{\r\nsiebelBan=SIEBEL_BAN_LifeTime;\r\n}\r\nif(SF_ACCOUNT_ID_LifeTime!=null && !SF_ACCOUNT_ID_LifeTime.equals(\"-99\"))\r\n{\r\nsfAccountId=SF_ACCOUNT_ID_LifeTime;}\r\n/*if(PREF_CHANNEL_LifeTime!=null && !PREF_CHANNEL_LifeTime.equals(\"-99\"))\r\n{\r\nprefchannel=PREF_CHANNEL_LifeTime;}*/\r\nreturn contactId + \"|\" + siebelBan + \"|\" + sfAccountId;"
Preprocessed Expression : String contactId="";
String siebelBan="";
String sfAccountId="";
/*String prefchannel="";*/
if(CONTACT_ID_LifeTime!=null && !CONTACT_ID_LifeTime.equals("-99"))
{
contactId=CONTACT_ID_LifeTime;
}
if(SIEBEL_BAN_LifeTime!=null && !SIEBEL_BAN_LifeTime.equals("-99"))
{
siebelBan=SIEBEL_BAN_LifeTime;
}
if(SF_ACCOUNT_ID_LifeTime!=null && !SF_ACCOUNT_ID_LifeTime.equals("-99"))
{
sfAccountId=SF_ACCOUNT_ID_LifeTime;}
/*if(PREF_CHANNEL_LifeTime!=null && !PREF_CHANNEL_LifeTime.equals("-99"))
{
prefchannel=PREF_CHANNEL_LifeTime;}*/
return contactId + "|" + siebelBan + "|" + sfAccountId;
line 1:0 no viable alternative at input 'String'
------------Infered params CONTACT_ID_LifeTime -- java.lang.String -- String
------------Infered params SIEBEL_BAN_LifeTime -- java.lang.String -- String
------------Infered params SF_ACCOUNT_ID_LifeTime -- java.lang.String -- String
Compiling Function : "housekeepMapSeries" -- > "long startDay = limitDate;\r\n\t\tfor( int i = 0; i < cleanDaysCount; i++ ) {\r\n\t\t\tlimitDate = startDay - i * 86400000L;\r\n\t\t\tjobj.remove( new Long( limitDate ).toString() );\r\n\t\t}\r\n\t\treturn true;"
Preprocessed Expression : long startDay = limitDate;
		for( int i = 0; i < cleanDaysCount; i++ ) {
			limitDate = startDay - i * 86400000L;
			jobj.remove( new Long( limitDate ).toString() );
		}
		return true;
line 1:0 no viable alternative at input 'long'
Compiling Function : "getBurnerRate" -- > "JsonElement bundleInfoJele = BUNDLE_INFO_LifeTime;\r\n\t\t\tif( bundleInfoJele != null && !bundleInfoJele.isJsonNull() ) {\r\n\t\t\t\tdouble totalBurnerRate = 0;\r\n\t\t\t\tint count = 0;\r\n\t\t\t\tif( bundleType.equals( \"bundleType\" ) || bundleType.equals( \"category\" ) ) {\r\n\r\n\t\t\t\t\tfor( java.util.Map.Entry< String, JsonElement > entry : bundleInfoJele.getAsJsonObject().entrySet() ) {\r\n\t\t\t\t\tcom.google.gson.Gson gson = new com.google.gson.Gson();\r\n\t\t\t\t\t\tJsonElement bundleNameJEle = gson.toJsonTree(entry.getValue());\r\n\t\t\t\t\t\tif( bundleNameJEle != null && !bundleNameJEle.isJsonNull() ) {\r\n\t\t\t\t\t\t\tJsonElement bundleTypeJele = bundleNameJEle.getAsJsonObject().get( bundleType );\r\n\t\t\t\t\t\t\tif( bundleTypeJele != null && !bundleTypeJele.isJsonNull() ) {\r\n\t\t\t\t\t\t\t\tif( bundleTypeJele.getAsString().equals( value ) ) {\r\n\r\n\t\t\t\t\t\t\t\t\tJsonElement currentScoreJele = bundleNameJEle.getAsJsonObject().get( \"currentScore\" );\r\n\t\t\t\t\t\t\t\t\tif( currentScoreJele != null && !currentScoreJele.isJsonNull() ) {\r\n\t\t\t\t\t\t\t\t\t\ttotalBurnerRate = totalBurnerRate + currentScoreJele.getAsDouble();\r\n\t\t\t\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif( count > 0 ) {\r\n\t\t\t\t\t\ttotalBurnerRate = totalBurnerRate / count;\r\n\t\t\t\t\t\treturn totalBurnerRate;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}else if( bundleType.equals( \"bundleName\" ) ) {\r\n\r\n\t\t\t\t\tJsonElement bundleNameJele = bundleInfoJele.getAsJsonObject().get( value );\r\n\t\t\t\t\tif( bundleNameJele != null && !bundleNameJele.isJsonNull() ) {\r\n\t\t\t\t\t\tJsonElement currentScoreJele = bundleNameJele.getAsJsonObject().get( \"currentScore\" );\r\n\t\t\t\t\t\tif( currentScoreJele != null && !currentScoreJele.isJsonNull() ) {\r\n\t\t\t\t\t\t\treturn currentScoreJele.getAsDouble();\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\treturn 0.0;"
Preprocessed Expression : JsonElement bundleInfoJele = BUNDLE_INFO_LifeTime;
			if( bundleInfoJele != null && !bundleInfoJele.isJsonNull() ) {
				double totalBurnerRate = 0;
				int count = 0;
				if( bundleType.equals( "bundleType" ) || bundleType.equals( "category" ) ) {

					for( java.util.Map.Entry< String, JsonElement > entry : bundleInfoJele.getAsJsonObject().entrySet() ) {
					com.google.gson.Gson gson = new com.google.gson.Gson();
						JsonElement bundleNameJEle = gson.toJsonTree(entry.getValue());
						if( bundleNameJEle != null && !bundleNameJEle.isJsonNull() ) {
							JsonElement bundleTypeJele = bundleNameJEle.getAsJsonObject().get( bundleType );
							if( bundleTypeJele != null && !bundleTypeJele.isJsonNull() ) {
								if( bundleTypeJele.getAsString().equals( value ) ) {

									JsonElement currentScoreJele = bundleNameJEle.getAsJsonObject().get( "currentScore" );
									if( currentScoreJele != null && !currentScoreJele.isJsonNull() ) {
										totalBurnerRate = totalBurnerRate + currentScoreJele.getAsDouble();
										count++;
									}

								}
							}

						}

					}
					if( count > 0 ) {
						totalBurnerRate = totalBurnerRate / count;
						return totalBurnerRate;
					}

				}else if( bundleType.equals( "bundleName" ) ) {

					JsonElement bundleNameJele = bundleInfoJele.getAsJsonObject().get( value );
					if( bundleNameJele != null && !bundleNameJele.isJsonNull() ) {
						JsonElement currentScoreJele = bundleNameJele.getAsJsonObject().get( "currentScore" );
						if( currentScoreJele != null && !currentScoreJele.isJsonNull() ) {
							return currentScoreJele.getAsDouble();

						}
					}

				}

			}
			return 0.0;
line 1:0 no viable alternative at input 'JsonElement'
------------Infered params BUNDLE_INFO_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getAccountStartDate" -- > "String date = \"NULL\";\r\nif(ACCOUNT_STARTDATE_LifeTime != 0 ){\r\nlong startDate = ACCOUNT_STARTDATE_LifeTime;\r\njava.util.Date dte= new java.util.Date(startDate);\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyyMMddHHmmss\");\r\ndate = d.format(dte);\r\n}\r\nreturn date;"
Preprocessed Expression : String date = "NULL";
if(ACCOUNT_STARTDATE_LifeTime != 0 ){
long startDate = ACCOUNT_STARTDATE_LifeTime;
java.util.Date dte= new java.util.Date(startDate);
java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
date = d.format(dte);
}
return date;
line 1:0 no viable alternative at input 'String'
------------Infered params ACCOUNT_STARTDATE_LifeTime -- long -- long
Compiling Function : "getLatestCreditActivityDateFormat" -- > "String date = \"\";\r\nJsonObject jCreditSeries = CREDIT_SERIES_LifeTime;\r\nif(jCreditSeries.has( \"latestCreditActivityDate\" )){\r\nJsonElement eLatestCreditDate= jCreditSeries.get( \"latestCreditActivityDate\" );\r\nif( eLatestCreditDate == null )\r\nreturn \"\";\r\nelse\r\n\r\n{\r\n    long date_1 = eLatestCreditDate.getAsLong();\r\njava.util.Date dte= new java.util.Date(date_1);\r\n\tjava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n\td.setTimeZone(java.util.TimeZone.getTimeZone(\"GMT\"));\r\n\tdate = d.format(dte);\r\n\treturn date;\r\n\r\n}\r\n}\r\nelse return \"\";"
Preprocessed Expression : String date = "";
JsonObject jCreditSeries = CREDIT_SERIES_LifeTime;
if(jCreditSeries.has( "latestCreditActivityDate" )){
JsonElement eLatestCreditDate= jCreditSeries.get( "latestCreditActivityDate" );
if( eLatestCreditDate == null )
return "";
else

{
    long date_1 = eLatestCreditDate.getAsLong();
java.util.Date dte= new java.util.Date(date_1);
	java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	d.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));
	date = d.format(dte);
	return date;

}
}
else return "";
line 1:0 no viable alternative at input 'String'
------------Infered params CREDIT_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getAccountInfo" -- > "String startdate=\"\";\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\nd.setTimeZone(java.util.TimeZone.getTimeZone(\"GMT\"));\r\nif(ACCOUNT_STARTDATE_LifeTime !=0l ){\r\n\tjava.util.Date dte1= new java.util.Date(ACCOUNT_STARTDATE_LifeTime);\r\n\tstartdate = d.format(dte1);\r\n}\r\nreturn startdate;"
Preprocessed Expression : String startdate="";
java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
d.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));
if(ACCOUNT_STARTDATE_LifeTime !=0l ){
	java.util.Date dte1= new java.util.Date(ACCOUNT_STARTDATE_LifeTime);
	startdate = d.format(dte1);
}
return startdate;
line 1:0 no viable alternative at input 'String'
------------Infered params ACCOUNT_STARTDATE_LifeTime -- long -- long
Compiling Function : "getActiveOfferEventDefinitionKey" -- > "return \"APIEvent-7dbea83f-3550-39ee-1296-19545fa3f891\";"
Preprocessed Expression : return "APIEvent-7dbea83f-3550-39ee-1296-19545fa3f891";
line 1:0 no viable alternative at input 'return'
Compiling Function : "getDateAsString" -- > "String date =\"-99\";\r\n if(epochdate == 0l)\r\n epochdate = getCurrentTime();\r\njava.util.Date dte= new java.util.Date(epochdate);\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyyMMddhhmmss\");\r\ndate = d.format(dte);\r\nreturn date;"
Preprocessed Expression : String date ="-99";
 if(epochdate == 0l)
 epochdate =  SIFTMATH.getCurrentTime();
java.util.Date dte= new java.util.Date(epochdate);
java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyyMMddhhmmss");
date = d.format(dte);
return date;
line 1:0 no viable alternative at input 'String'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getMessageDefinitionKey" -- > "if(SIFT_INTERNAL_RECORD_TYPE.equals(\"ContactCount\") && RECORD_TYPE.equals(\"REGISTER_ACTION\"))\r\nreturn \"\";\r\nreturn \"txn-sms-def-prd-01\";"
Preprocessed Expression : if(SIFT_INTERNAL_RECORD_TYPE.equals("ContactCount") && RECORD_TYPE.equals("REGISTER_ACTION"))
return "";
return "txn-sms-def-prd-01";
line 1:0 no viable alternative at input 'if'
------------Infered params SIFT_INTERNAL_RECORD_TYPE -- java.lang.String -- String
------------Infered params RECORD_TYPE -- java.lang.String -- String
Compiling Function : "getDateAsOf" -- > "long currentTime = getCurrentTime();\r\njava.util.Date dte= new java.util.Date(currentTime);\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\nd.setTimeZone(java.util.TimeZone.getTimeZone(\"GMT\"));\r\nString date = d.format(dte);\r\nreturn date;"
Preprocessed Expression : long currentTime =  SIFTMATH.getCurrentTime();
java.util.Date dte= new java.util.Date(currentTime);
java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
d.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));
String date = d.format(dte);
return date;
line 1:0 no viable alternative at input 'long'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getSalesforcePolicyCount" -- > "String counts = getJsonSupportingData( \"SF_GLOBAL_CONTACT_POLICY\" , type );\r\nJsonParser parser = new JsonParser();\r\nJsonElement jCounts = parser.parse(counts) ;\r\nJsonArray finalCounts = new JsonArray();\r\n\r\nif( type.equals(\"global_count\") )\r\n\tfinalCounts = jCounts.getAsJsonArray();\r\nelse if( !(subType.equals(\"*\") || subType.equals(\"\")) && (type.equals(\"channel_wise_count\") || type.equals(\"journey_category\")) ){\r\n\tif( jCounts.getAsJsonObject().has(subType) )\r\n    \tfinalCounts = jCounts.getAsJsonObject().get(subType).getAsJsonArray();\r\n    else\r\n        return -1;\r\n}else\r\n\treturn -1;\r\nif( frequency.equals(\"day\") )\r\n    return finalCounts.get(0).getAsInt();\r\nelse if ( frequency.equals(\"week\" ))\r\n    return finalCounts.get(1).getAsInt();\r\nelse if ( frequency.equals(\"month\" ))\r\n    return finalCounts.get(2).getAsInt();\r\n\r\nreturn -1;"
Preprocessed Expression : String counts =  SIFTMATH.getJsonSupportingData( "SF_GLOBAL_CONTACT_POLICY" , type );
JsonParser parser = new JsonParser();
JsonElement jCounts = parser.parse(counts) ;
JsonArray finalCounts = new JsonArray();

if( type.equals("global_count") )
	finalCounts = jCounts.getAsJsonArray();
else if( !(subType.equals("*") || subType.equals("")) && (type.equals("channel_wise_count") || type.equals("journey_category")) ){
	if( jCounts.getAsJsonObject().has(subType) )
    	finalCounts = jCounts.getAsJsonObject().get(subType).getAsJsonArray();
    else
        return -1;
}else
	return -1;
if( frequency.equals("day") )
    return finalCounts.get(0).getAsInt();
else if ( frequency.equals("week" ))
    return finalCounts.get(1).getAsInt();
else if ( frequency.equals("month" ))
    return finalCounts.get(2).getAsInt();

return -1;
line 1:0 no viable alternative at input 'String'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getRechargeDetailsOnDate" -- > "long startDate =1670238001000l;\r\nlong endDate = 1670435051000l;\r\nString rechargedetails=\"\",details=\"\";\r\nif(RECHARGE_BLOCK_SERIES_LifeTime.has(\"keys\")){\r\n\tJsonArray ekeys = RECHARGE_BLOCK_SERIES_LifeTime.get(\"keys\").getAsJsonArray();\r\n\tfor(int i=0;i<=ekeys.size()-1;i++){\r\n\t\tlong rechargeDate=ekeys.get(i).getAsLong();\r\n\t\tint rechargeAmount =0;\r\n\t\tif(rechargeDate>=startDate && rechargeDate <= endDate){\r\n\t\t\tSystem.out.println(rechargeDate);\r\n\t\t\tJsonObject obj = RECHARGE_BLOCK_SERIES_LifeTime.getAsJsonObject(ekeys.get(i).getAsString());\r\n\t\t\tif(obj!=null && !obj.isJsonNull() && obj.entrySet().size()!=0 && obj.has(\"RECHARGE_DATA\")){\r\n\t\t\t\tJsonArray rechrgeData = obj.get(\"RECHARGE_DATA\").getAsJsonArray();\r\n\t\t\t\trechargeAmount = rechrgeData.get(0).getAsInt();\r\n\t\t\t}\r\n\t\t\trechargedetails =rechargeAmount+\",\"+rechargeDate;\r\n\t\t\tdetails=(!details.equals(\"\")) ? details+\"#\"+rechargedetails: rechargedetails;\r\n\t\t}\r\n\t}\r\n}\r\nreturn details;"
Preprocessed Expression : long startDate =1670238001000l;
long endDate = 1670435051000l;
String rechargedetails="",details="";
if(RECHARGE_BLOCK_SERIES_LifeTime.has("keys")){
	JsonArray ekeys = RECHARGE_BLOCK_SERIES_LifeTime.get("keys").getAsJsonArray();
	for(int i=0;i<=ekeys.size()-1;i++){
		long rechargeDate=ekeys.get(i).getAsLong();
		int rechargeAmount =0;
		if(rechargeDate>=startDate && rechargeDate <= endDate){
			System.out.println(rechargeDate);
			JsonObject obj = RECHARGE_BLOCK_SERIES_LifeTime.getAsJsonObject(ekeys.get(i).getAsString());
			if(obj!=null && !obj.isJsonNull() && obj.entrySet().size()!=0 && obj.has("RECHARGE_DATA")){
				JsonArray rechrgeData = obj.get("RECHARGE_DATA").getAsJsonArray();
				rechargeAmount = rechrgeData.get(0).getAsInt();
			}
			rechargedetails =rechargeAmount+","+rechargeDate;
			details=(!details.equals("")) ? details+"#"+rechargedetails: rechargedetails;
		}
	}
}
return details;
line 1:0 no viable alternative at input 'long'
------------Infered params RECHARGE_BLOCK_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "housekeepListSeries" -- > "int delLimit = arr.size() - retentionDays;\r\n\t\tif( delLimit < 0 )\r\n\t\t\treturn true;\r\n\t\tfor( int i = 0; i < delLimit; i++ ) {\r\n\t\t\tarr.remove( 0 );\r\n\t\t}\r\n\t\treturn true;"
Preprocessed Expression : int delLimit = arr.size() - retentionDays;
		if( delLimit < 0 )
			return true;
		for( int i = 0; i < delLimit; i++ ) {
			arr.remove( 0 );
		}
		return true;
line 1:0 no viable alternative at input 'int'
Compiling Function : "getCurrentMonitoringRewardValidity" -- > "JsonArray currentlyMonitored = isCurrentlyMonitored();\r\nif (currentlyMonitored!=null && !currentlyMonitored.isJsonNull() && currentlyMonitored.size() >0){\r\n    return (currentlyMonitored.get(4).getAsString());\r\n}\r\nreturn \"\";"
Preprocessed Expression : JsonArray currentlyMonitored =  SIFTMATH.execJsonArrayFunction("isCurrentlyMonitored" );
if (currentlyMonitored!=null && !currentlyMonitored.isJsonNull() && currentlyMonitored.size() >0){
    return (currentlyMonitored.get(4).getAsString());
}
return "";
line 1:0 no viable alternative at input 'JsonArray'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getRechargeCountsinRangeRB" -- > "return getRechargeCountsRB(range, startDay, numDays);"
Preprocessed Expression : return  SIFTMATH.getRechargeCountsRB(range, startDay, numDays);
line 1:0 no viable alternative at input 'return'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "applySalesforceGlobalPolicy" -- > "//String categoryCounts = getJsonSupportingData( \"SF_GLOBAL_CONTACT_POLICY\" , \"journey_category\" );\r\n//JsonParser parser = new JsonParser();\r\n//JsonObject jCategoryCounts = (JsonObject) parser.parse(categoryCounts) ;\r\n//if( jCategoryCounts.has(OFFER_CATEGORY) ){\r\n//int dailyCatergoryCounts = jCategoryCounts.get(OFFER_CATEGORY).getAsJsonArray().get(0).getAsInt();\r\nboolean returnValue = true;\r\n    int dailyCounts = getSalesforcePolicyCount( \"global_count\" , \"*\", \"day\" );\r\n    int weeklyCounts = getSalesforcePolicyCount( \"global_count\" , \"*\", \"week\" );\r\n    int monthlyCounts = getSalesforcePolicyCount( \"global_count\" , \"*\", \"month\" );\r\n    \r\n       //System.out.println( \"Global returned values\" +  dailyCounts + weeklyCounts + monthlyCounts  );\r\n\r\n    \r\n    int dailyCatCounts = getSalesforcePolicyCount( \"journey_category\" , OFFER_CATEGORY, \"day\" );\r\n    int weeklyCatCounts = getSalesforcePolicyCount( \"journey_category\" , OFFER_CATEGORY, \"week\" );\r\n    int monthlyCatCounts = getSalesforcePolicyCount( \"journey_category\" , OFFER_CATEGORY, \"month\" );\r\n\r\n   //System.out.println( \"Global returned values\" +  OFFER_CATEGORY + \" \" +  dailyCatCounts +  weeklyCatCounts +  monthlyCatCounts );\r\n   // if( dailyCatergoryCounts == -1 && weeklyCatergoryCounts == -1 && monthlyCatergoryCounts == -1 )\r\n    //    return false;\r\n  \r\n    if( ( dailyCounts == -1 || getContactCount( \"*\",\"*\",\"*\" ,0,1 ) < dailyCounts ) && ( weeklyCounts == -1 || getContactCount( \"*\",\"*\",\"*\" ,0,7 ) < weeklyCounts ) && ( monthlyCounts == -1 || getContactCount( \"*\",\"*\",\"*\" ,0,30 ) < monthlyCounts ) )\r\n        returnValue = false;\r\n        \r\n    if (!(( ( dailyCatCounts == -1 || getContactCount( OFFER_CATEGORY,\"*\",\"*\" ,0,1 ) < dailyCatCounts ) && ( weeklyCatCounts == -1 || getContactCount( OFFER_CATEGORY ,\"*\",\"*\" ,0,7 ) < weeklyCatCounts ) && ( monthlyCatCounts == -1 || getContactCount( OFFER_CATEGORY ,\"*\",\"*\" ,0,30 ) < monthlyCatCounts ) )))\r\n        returnValue = true;\r\n    \r\n\r\nreturn returnValue;\r\n//getContactCount(java.lang.String category, java.lang.String offer, java.lang.String channel, int start, int duration )"
Preprocessed Expression : //String categoryCounts =  SIFTMATH.getJsonSupportingData( "SF_GLOBAL_CONTACT_POLICY" , "journey_category" );
//JsonParser parser = new JsonParser();
//JsonObject jCategoryCounts = (JsonObject) parser.parse(categoryCounts) ;
//if( jCategoryCounts.has(OFFER_CATEGORY) ){
//int dailyCatergoryCounts = jCategoryCounts.get(OFFER_CATEGORY).getAsJsonArray().get(0).getAsInt();
boolean returnValue = true;
    int dailyCounts =  SIFTMATH.execIntFunction("getSalesforcePolicyCount",  "global_count" , "*", "day" );
    int weeklyCounts =  SIFTMATH.execIntFunction("getSalesforcePolicyCount",  "global_count" , "*", "week" );
    int monthlyCounts =  SIFTMATH.execIntFunction("getSalesforcePolicyCount",  "global_count" , "*", "month" );
    
       //System.out.println( "Global returned values" +  dailyCounts + weeklyCounts + monthlyCounts  );

    
    int dailyCatCounts =  SIFTMATH.execIntFunction("getSalesforcePolicyCount",  "journey_category" , OFFER_CATEGORY, "day" );
    int weeklyCatCounts =  SIFTMATH.execIntFunction("getSalesforcePolicyCount",  "journey_category" , OFFER_CATEGORY, "week" );
    int monthlyCatCounts =  SIFTMATH.execIntFunction("getSalesforcePolicyCount",  "journey_category" , OFFER_CATEGORY, "month" );

   //System.out.println( "Global returned values" +  OFFER_CATEGORY + " " +  dailyCatCounts +  weeklyCatCounts +  monthlyCatCounts );
   // if( dailyCatergoryCounts == -1 && weeklyCatergoryCounts == -1 && monthlyCatergoryCounts == -1 )
    //    return false;
  
    if( ( dailyCounts == -1 ||  SIFTMATH.execIntFunction("getContactCount",  "*","*","*" ,0,1 ) < dailyCounts ) && ( weeklyCounts == -1 ||  SIFTMATH.execIntFunction("getContactCount",  "*","*","*" ,0,7 ) < weeklyCounts ) && ( monthlyCounts == -1 ||  SIFTMATH.execIntFunction("getContactCount",  "*","*","*" ,0,30 ) < monthlyCounts ) )
        returnValue = false;
        
    if (!(( ( dailyCatCounts == -1 ||  SIFTMATH.execIntFunction("getContactCount",  OFFER_CATEGORY,"*","*" ,0,1 ) < dailyCatCounts ) && ( weeklyCatCounts == -1 ||  SIFTMATH.execIntFunction("getContactCount",  OFFER_CATEGORY ,"*","*" ,0,7 ) < weeklyCatCounts ) && ( monthlyCatCounts == -1 ||  SIFTMATH.execIntFunction("getContactCount",  OFFER_CATEGORY ,"*","*" ,0,30 ) < monthlyCatCounts ) )))
        returnValue = true;
    

return returnValue;
// SIFTMATH.execIntFunction("getContactCount", java.lang.String category, java.lang.String offer, java.lang.String channel, int start, int duration )
line 6:0 no viable alternative at input 'boolean'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params OFFER_CATEGORY -- java.lang.String -- String
Compiling Function : "getDataUsageInfo" -- > "String dataVolumeConsumed = \"\";\r\nString latestDataUsageDate = \"\";\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyyMMddHHmmss\");\r\nif(DATA_USAGE_SERIES_LifeTime!=null && !DATA_USAGE_SERIES_LifeTime.isJsonNull() && DATA_USAGE_SERIES_LifeTime.entrySet().size()!=0) {\r\nJsonArray ekeys = DATA_USAGE_SERIES_LifeTime.get(\"keys\").getAsJsonArray();\r\nif(ekeys.size()!=0){\r\nlong latestDate = ekeys.get(ekeys.size()-1).getAsLong();\r\njava.util.Date dte= new java.util.Date(latestDate);\r\nlatestDataUsageDate = d.format(dte);\r\nif(DATA_USAGE_SERIES_LifeTime.has(String.valueOf(latestDate)))\r\ndataVolumeConsumed = DATA_USAGE_SERIES_LifeTime.get(String.valueOf(latestDate)).getAsString();\r\n}\r\n}\r\nreturn dataVolumeConsumed + \"~\" + latestDataUsageDate;"
Preprocessed Expression : String dataVolumeConsumed = "";
String latestDataUsageDate = "";
java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
if(DATA_USAGE_SERIES_LifeTime!=null && !DATA_USAGE_SERIES_LifeTime.isJsonNull() && DATA_USAGE_SERIES_LifeTime.entrySet().size()!=0) {
JsonArray ekeys = DATA_USAGE_SERIES_LifeTime.get("keys").getAsJsonArray();
if(ekeys.size()!=0){
long latestDate = ekeys.get(ekeys.size()-1).getAsLong();
java.util.Date dte= new java.util.Date(latestDate);
latestDataUsageDate = d.format(dte);
if(DATA_USAGE_SERIES_LifeTime.has(String.valueOf(latestDate)))
dataVolumeConsumed = DATA_USAGE_SERIES_LifeTime.get(String.valueOf(latestDate)).getAsString();
}
}
return dataVolumeConsumed + "~" + latestDataUsageDate;
line 1:0 no viable alternative at input 'String'
------------Infered params DATA_USAGE_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getSummaryContactCount" -- > "long msecPerDay = 86400000L;\r\n\r\n                                com.google.gson.JsonObject jInd = getSummaryIndicator( \"TELCO_OFFER_COUNT_LifeTime\" );\r\n                                if( category.equals( \"*\" ) ){\r\n                                                if( offer.equals( \"*\" ) ){\r\n                                                                if( channel.equals( \"*\" ) ){\r\n                                                                                return jInd.get( \"TotalCount\" ).getAsLong() ;                                                                                                                                      \r\n                                                                                // getContactCount( \"*\", \"*\", \"*\", -1, -1 );\r\n                                                                } else{\r\n                                                                                com.google.gson.JsonElement channelEle = jInd.get( channel );\r\n                                                                                if( channelEle == null )\r\n                                                                                                return 0l;\r\n                                                                                return channelEle.getAsLong() ;                                                                                                                                                                                                                                                                \r\n                                                                                // getContactCount( \"*\", \"*\", \"SMS\", -1, -1 );\r\n                                                                }\r\n                                                } else{\r\n                                                                String[] offerCategories = null;\r\n                                                                if( OFFER_CATEGORY == null || OFFER_CATEGORY.equals( \"\" ) ) {\r\n                                                                                com.google.gson.JsonElement offerCatEle = getSiftwareAttribute( \"Offer\", offer, \"category\" );\r\n                                                                                if( offerCatEle == null || offerCatEle.isJsonNull() ) {\r\n                                                                                                offerCategories = new String[ 1 ];\r\n                                                                                                offerCategories[ 0 ] = \"GENERIC\";\r\n                                                                                } else\r\n                                                                                                offerCategories = offerCatEle.getAsString().split( \",\" );\r\n                                                                }\r\n                                                                else\r\n                                                                                offerCategories = OFFER_CATEGORY.split( \",\" );\r\n\r\n                                                                for( int i = 0; i < offerCategories.length; i ++ ){\r\n                                                                                java.lang.String cat = offerCategories[ i ];\r\n                                                                                com.google.gson.JsonElement catele = jInd.get( cat );\r\n                                                                                if( catele == null )\r\n                                                                                                continue;\r\n\r\n                                                                                com.google.gson.JsonObject catObj = catele.getAsJsonObject();\r\n                                                                                com.google.gson.JsonElement catOfferEle = catObj.get( offer );\r\n                                                                                if( catOfferEle == null )\r\n                                                                                                continue;\r\n\r\n                                                                                com.google.gson.JsonObject catOfferObj = catOfferEle.getAsJsonObject();\r\n                                                                                if( channel.equals( \"*\" ) )\r\n                                                                                                return catOfferObj.get( \"count\" ).getAsLong() ;                                                                                                                                                                \r\n                                                                                // getContactCount( \"*\", \"Offer1\", \"*\", -1, -1 );\r\n                                                                                else{\r\n                                                                                                com.google.gson.JsonElement channelEle = catOfferObj.get( channel );\r\n                                                                                                if( channelEle == null )\r\n                                                                                                                return 0l;\r\n\r\n                                                                                                return channelEle.getAsLong() ;                                                                                                                                                                                                                                                \r\n                                                                                                // getContactCount( \"*\", \"Offer1\", \"SMS\", -1, -1 );\r\n                                                                                }\r\n                                                                }\r\n                                                }\r\n                                } else{\r\n                                                com.google.gson.JsonElement catEle = jInd.get( category );\r\n                                                if( catEle == null )\r\n                                                                return 0l;\r\n\r\n                                                com.google.gson.JsonObject catObj = catEle.getAsJsonObject();\r\n                                                if( offer.equals( \"*\" ) ){\r\n                                                                if( channel.equals( \"*\" ) ){\r\n                                                                                return catObj.get( \"count\" ).getAsLong() ;                                                                                                                                                                                                           \r\n                                                                                //  getContactCount( \"Cat1\", \"*\", \"*\", -1, -1 );\r\n                                                                } else{\r\n                                                                                com.google.gson.JsonElement channelEle = catObj.get( channel );\r\n                                                                                if( channelEle == null )\r\n                                                                                                return 0l;\r\n\r\n                                                                                return catObj.get( channel ).getAsLong();                                                                                                                                                                                                            \r\n                                                                                //  getContactCount( \"Cat1\", \"*\", \"SMS\", -1, -1 );\r\n                                                                }\r\n                                                } else{\r\n                                                                com.google.gson.JsonElement offerEle = catObj.get( offer );\r\n                                                                if( offerEle == null )\r\n                                                                                return 0l;\r\n\r\n                                                                com.google.gson.JsonObject offerObj = offerEle.getAsJsonObject();\r\n                                                                if( channel.equals( \"*\" ) ){\r\n                                                                                return offerObj.get( \"count\" ).getAsLong() ;                                                                                                                                                                                                       \r\n                                                                                //  getContactCount( \"Cat1\", \"Offer1\", \"*\", -1, -1 );\r\n                                                                }\r\n                                                                else{\r\n                                                                                com.google.gson.JsonElement channelEle = offerObj.get( channel );\r\n                                                                                if( channelEle == null )\r\n                                                                                                return 0l;\r\n\r\n                                                                                return offerObj.get( channel ).getAsLong() ;                                                                                                                                                                                                       \r\n                                                                                //  getContactCount( \"Cat1\", \"Offer1\", \"SMS\", -1, -1 );\r\n                                                                }\r\n                                                }\r\n                                }\r\n                                return 0l;"
Preprocessed Expression : long msecPerDay = 86400000L;

                                com.google.gson.JsonObject jInd =  SIFTMATH.getSummaryIndicator( "TELCO_OFFER_COUNT_LifeTime" );
                                if( category.equals( "*" ) ){
                                                if( offer.equals( "*" ) ){
                                                                if( channel.equals( "*" ) ){
                                                                                return jInd.get( "TotalCount" ).getAsLong() ;                                                                                                                                      
                                                                                //  SIFTMATH.execIntFunction("getContactCount",  "*", "*", "*", -1, -1 );
                                                                } else{
                                                                                com.google.gson.JsonElement channelEle = jInd.get( channel );
                                                                                if( channelEle == null )
                                                                                                return 0l;
                                                                                return channelEle.getAsLong() ;                                                                                                                                                                                                                                                                
                                                                                //  SIFTMATH.execIntFunction("getContactCount",  "*", "*", "SMS", -1, -1 );
                                                                }
                                                } else{
                                                                String[] offerCategories = null;
                                                                if( OFFER_CATEGORY == null || OFFER_CATEGORY.equals( "" ) ) {
                                                                                com.google.gson.JsonElement offerCatEle =  SIFTMATH.getSiftwareAttribute( "Offer", offer, "category" );
                                                                                if( offerCatEle == null || offerCatEle.isJsonNull() ) {
                                                                                                offerCategories = new String[ 1 ];
                                                                                                offerCategories[ 0 ] = "GENERIC";
                                                                                } else
                                                                                                offerCategories = offerCatEle.getAsString().split( "," );
                                                                }
                                                                else
                                                                                offerCategories = OFFER_CATEGORY.split( "," );

                                                                for( int i = 0; i < offerCategories.length; i ++ ){
                                                                                java.lang.String cat = offerCategories[ i ];
                                                                                com.google.gson.JsonElement catele = jInd.get( cat );
                                                                                if( catele == null )
                                                                                                continue;

                                                                                com.google.gson.JsonObject catObj = catele.getAsJsonObject();
                                                                                com.google.gson.JsonElement catOfferEle = catObj.get( offer );
                                                                                if( catOfferEle == null )
                                                                                                continue;

                                                                                com.google.gson.JsonObject catOfferObj = catOfferEle.getAsJsonObject();
                                                                                if( channel.equals( "*" ) )
                                                                                                return catOfferObj.get( "count" ).getAsLong() ;                                                                                                                                                                
                                                                                //  SIFTMATH.execIntFunction("getContactCount",  "*", "Offer1", "*", -1, -1 );
                                                                                else{
                                                                                                com.google.gson.JsonElement channelEle = catOfferObj.get( channel );
                                                                                                if( channelEle == null )
                                                                                                                return 0l;

                                                                                                return channelEle.getAsLong() ;                                                                                                                                                                                                                                                
                                                                                                //  SIFTMATH.execIntFunction("getContactCount",  "*", "Offer1", "SMS", -1, -1 );
                                                                                }
                                                                }
                                                }
                                } else{
                                                com.google.gson.JsonElement catEle = jInd.get( category );
                                                if( catEle == null )
                                                                return 0l;

                                                com.google.gson.JsonObject catObj = catEle.getAsJsonObject();
                                                if( offer.equals( "*" ) ){
                                                                if( channel.equals( "*" ) ){
                                                                                return catObj.get( "count" ).getAsLong() ;                                                                                                                                                                                                           
                                                                                //   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "*", "*", -1, -1 );
                                                                } else{
                                                                                com.google.gson.JsonElement channelEle = catObj.get( channel );
                                                                                if( channelEle == null )
                                                                                                return 0l;

                                                                                return catObj.get( channel ).getAsLong();                                                                                                                                                                                                            
                                                                                //   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "*", "SMS", -1, -1 );
                                                                }
                                                } else{
                                                                com.google.gson.JsonElement offerEle = catObj.get( offer );
                                                                if( offerEle == null )
                                                                                return 0l;

                                                                com.google.gson.JsonObject offerObj = offerEle.getAsJsonObject();
                                                                if( channel.equals( "*" ) ){
                                                                                return offerObj.get( "count" ).getAsLong() ;                                                                                                                                                                                                       
                                                                                //   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "Offer1", "*", -1, -1 );
                                                                }
                                                                else{
                                                                                com.google.gson.JsonElement channelEle = offerObj.get( channel );
                                                                                if( channelEle == null )
                                                                                                return 0l;

                                                                                return offerObj.get( channel ).getAsLong() ;                                                                                                                                                                                                       
                                                                                //   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "Offer1", "SMS", -1, -1 );
                                                                }
                                                }
                                }
                                return 0l;
line 1:0 no viable alternative at input 'long'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params OFFER_CATEGORY -- java.lang.String -- String
Compiling Function : "manageOfferContactCount" -- > "// System.out.println(\"OFFER_CATEGORY:\" + OFFER_CATEGORY);\r\n// System.out.println(\"OFFER_ID:\" + OFFER_ID);\r\n// System.out.println(\"CHANNEL:\" + CHANNEL);\r\n// System.out.println(\"PROGRAM_ID:\" + PROGRAM_ID);\r\n// System.out.println(\"IS_SIMULATED:\" + IS_SIMULATED);\r\n// System.out.println(\"FLOW_ID:\" + FLOW_ID);\r\nif( IS_SIMULATED.equals( \"true\" ) )\r\n\tprocessIndicator( \"OFFER_COUNT_LifeTime_Simulation\" );\r\nelse if( IS_CONTROL.equals(\"true\") )\r\n\tprocessIndicator( \"OFFER_COUNT_LifeTime_Control\" );\r\nelse\r\n\tprocessIndicator( \"OFFER_COUNT_LifeTime\" );\r\n\t\r\nprocessSummaryIndicator( \"TELCO_OFFER_COUNT_LifeTime\" );\r\nprocessIndicator(\"OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime\");\r\nprocessIndicator( \"EVENT_CONTACTS_LifeTime\");\r\nprocessIndicator( \"OPOLO_PAYLOAD_LifeTime\");\r\n// System.out.println(\"Processing offer history lifetime..\");\r\n\r\nif( ! ( RECORD_TYPE.equals(\"REGISTER_ACTION\") && ACTION_TYPE.equals(\"OFFER_SUCCESS\") )  ){\r\n    processIndicator( \"OFFER_HISTORY_LifeTime\" );\r\n   // processIndicator(\"UC1B_NOMINATION_COUNT_LifeTime\");\r\n\r\n    \r\n\r\n    // System.out.println(\"End of Mange offer contact count indicator... \");\r\n}\r\nif( OFFER_TYPE.equals( \"Conditional\" ) )\r\n        processIndicator( \"LATEST_OFFER_FULFILMENT_COUNTS\");\r\nreturn true;"
Preprocessed Expression : // System.out.println("OFFER_CATEGORY:" + OFFER_CATEGORY);
// System.out.println("OFFER_ID:" + OFFER_ID);
// System.out.println("CHANNEL:" + CHANNEL);
// System.out.println("PROGRAM_ID:" + PROGRAM_ID);
// System.out.println("IS_SIMULATED:" + IS_SIMULATED);
// System.out.println("FLOW_ID:" + FLOW_ID);
if( IS_SIMULATED.equals( "true" ) )
	 SIFTMATH.processIndicator( "OFFER_COUNT_LifeTime_Simulation" );
else if( IS_CONTROL.equals("true") )
	 SIFTMATH.processIndicator( "OFFER_COUNT_LifeTime_Control" );
else
	 SIFTMATH.processIndicator( "OFFER_COUNT_LifeTime" );
	
 SIFTMATH.processSummaryIndicator( "TELCO_OFFER_COUNT_LifeTime" );
 SIFTMATH.processIndicator("OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime");
 SIFTMATH.processIndicator( "EVENT_CONTACTS_LifeTime");
 SIFTMATH.processIndicator( "OPOLO_PAYLOAD_LifeTime");
// System.out.println("Processing offer history lifetime..");

if( ! ( RECORD_TYPE.equals("REGISTER_ACTION") && ACTION_TYPE.equals("OFFER_SUCCESS") )  ){
     SIFTMATH.processIndicator( "OFFER_HISTORY_LifeTime" );
   //  SIFTMATH.processIndicator("UC1B_NOMINATION_COUNT_LifeTime");

    

    // System.out.println("End of Mange offer contact count indicator... ");
}
if( OFFER_TYPE.equals( "Conditional" ) )
         SIFTMATH.processIndicator( "LATEST_OFFER_FULFILMENT_COUNTS");
return true;
line 7:0 no viable alternative at input 'if'
------------Infered params IS_SIMULATED -- java.lang.String -- String
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params IS_CONTROL -- java.lang.String -- String
------------Infered params RECORD_TYPE -- java.lang.String -- String
------------Infered params ACTION_TYPE -- java.lang.String -- String
------------Infered params OFFER_TYPE -- java.lang.String -- String
Compiling Function : "getDaysSinceLastEventTrigger" -- > "return (long)getDaysSinceLastTrigger(eventId);"
Preprocessed Expression : return (long) SIFTMATH.getDaysSinceLastTrigger(eventId);
line 1:0 no viable alternative at input 'return'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getValueRemaining" -- > "JsonElement bundleInfoJele = BUNDLE_INFO_LifeTime;\r\n\t\tif( bundleInfoJele != null && !bundleInfoJele.isJsonNull() ) {\r\n\r\n\t\t\tdouble totalActiveBalance = 0;\r\n\t\t\tfor( java.util.Map.Entry< String, JsonElement > entry : bundleInfoJele.getAsJsonObject().entrySet() ) {\r\n\t\t\tcom.google.gson.Gson gson =new com.google.gson.Gson ();\r\n\t\t\t\tJsonElement bundleNameJEle = gson.toJsonTree(entry.getValue());\r\n\t\t\t\tif( bundleNameJEle != null && !bundleNameJEle.isJsonNull() ) {\r\n\t\t\t\t\tJsonElement bundleTypeJele = bundleNameJEle.getAsJsonObject().get( bundleType );\r\n\t\t\t\t\tif( bundleTypeJele != null && !bundleTypeJele.isJsonNull() ) {\r\n\t\t\t\t\t\tif( bundleTypeJele.getAsString().equals( value ) ) {\r\n\r\n\t\t\t\t\t\t\tJsonElement totalActiveBalanceJele = bundleNameJEle.getAsJsonObject().get( \"totalActiveBalance\" );\r\n\t\t\t\t\t\t\tif( totalActiveBalanceJele != null && !totalActiveBalanceJele.isJsonNull() ) {\r\n\r\n\t\t\t\t\t\t\t\ttotalActiveBalance = totalActiveBalance + totalActiveBalanceJele.getAsDouble();\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\treturn totalActiveBalance;\r\n\t\t}\r\n\t\treturn 0.0;"
Preprocessed Expression : JsonElement bundleInfoJele = BUNDLE_INFO_LifeTime;
		if( bundleInfoJele != null && !bundleInfoJele.isJsonNull() ) {

			double totalActiveBalance = 0;
			for( java.util.Map.Entry< String, JsonElement > entry : bundleInfoJele.getAsJsonObject().entrySet() ) {
			com.google.gson.Gson gson =new com.google.gson.Gson ();
				JsonElement bundleNameJEle = gson.toJsonTree(entry.getValue());
				if( bundleNameJEle != null && !bundleNameJEle.isJsonNull() ) {
					JsonElement bundleTypeJele = bundleNameJEle.getAsJsonObject().get( bundleType );
					if( bundleTypeJele != null && !bundleTypeJele.isJsonNull() ) {
						if( bundleTypeJele.getAsString().equals( value ) ) {

							JsonElement totalActiveBalanceJele = bundleNameJEle.getAsJsonObject().get( "totalActiveBalance" );
							if( totalActiveBalanceJele != null && !totalActiveBalanceJele.isJsonNull() ) {

								totalActiveBalance = totalActiveBalance + totalActiveBalanceJele.getAsDouble();
							}

						}
					}

				}

			}
			return totalActiveBalance;
		}
		return 0.0;
line 1:0 no viable alternative at input 'JsonElement'
------------Infered params BUNDLE_INFO_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getPreviousCommercialOffer" -- > "String offer = \"-99\";\r\nif(COMMERCIAL_OFFER_LifeTime!=null && !COMMERCIAL_OFFER_LifeTime.isJsonNull()) \r\n\t\t\tif( COMMERCIAL_OFFER_LifeTime.has(\"previousCommercialOffer\")) {\r\n\t\t    offer = COMMERCIAL_OFFER_LifeTime.get(\"previousCommercialOffer\").getAsString();\r\n\t\t    }\r\nreturn offer;"
Preprocessed Expression : String offer = "-99";
if(COMMERCIAL_OFFER_LifeTime!=null && !COMMERCIAL_OFFER_LifeTime.isJsonNull()) 
			if( COMMERCIAL_OFFER_LifeTime.has("previousCommercialOffer")) {
		    offer = COMMERCIAL_OFFER_LifeTime.get("previousCommercialOffer").getAsString();
		    }
return offer;
line 1:0 no viable alternative at input 'String'
------------Infered params COMMERCIAL_OFFER_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getDateofSuccessfulMigration" -- > "long timeStamp=getMigrationDate();\r\nString date=\"\";\r\nif(timeStamp!=-99l){\r\n\tjava.util.Date dte= new java.util.Date(timeStamp);\r\n\tjava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n\tdate = d.format(dte);\r\n}\t\t\r\nreturn date;"
Preprocessed Expression : long timeStamp= SIFTMATH.execLongFunction("getMigrationDate" );
String date="";
if(timeStamp!=-99l){
	java.util.Date dte= new java.util.Date(timeStamp);
	java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	date = d.format(dte);
}		
return date;
line 1:0 no viable alternative at input 'long'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getFulfillmentCount" -- > "long msecPerDay = 86400000l;\r\n\t\tlong lStart, lEnd;\r\n\t\tint count = 0;\r\n\t\tif( start == - 1 )\r\n\t\t\tlStart = -1;\r\n\t\telse \r\n\t\t\tlStart = getCurrentTime() - start * msecPerDay;\t\t// Until the current time of the day\r\n\r\n\t\tif( duration == -1 )\r\n\t\t\tlEnd = -1;\r\n\t\telse{\r\n\t\t\tlEnd = ( lStart - lStart % msecPerDay ) - ( ( duration - 1 ) * msecPerDay );\r\n\t\t\tlStart += msecPerDay - 1000;\r\n\t\t}\r\n\r\n\t\tif( OFFER_CATEGORY.equals( \"*\" ) ){\r\n\t\t\tif( OFFER_ID.equals( \"*\" ) ){\r\n\t\t\t\tif( CHANNEL.equals( \"*\" ) ){\r\n\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\treturn FULFILLMENT_COUNT_LifeTime.get( \"TotalCount\" ).getAsInt();\t\t\t\t\t\t\t\t\t// getContactCount( \"*\", \"*\", \"*\", -1, -1 );\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\t//TODO: Need CONTACT_SERIES for getContactCount( \"*\", \"*\", \"*\", 0, 30 );\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else{\r\n\t\t\t\t\tif( lStart == -1 ){\r\n\t\t\t\t\t\tcom.google.gson.JsonElement CHANNELEle = FULFILLMENT_COUNT_LifeTime.get( CHANNEL );\r\n\t\t\t\t\t\tif( CHANNELEle == null )\r\n\t\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\treturn CHANNELEle.getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// getContactCount( \"*\", \"*\", \"SMS\", -1, -1 );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// TODO: Need to add for getContactCount( \"*\", \"*\", \"SMS\", 0, 30 );\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else{\r\n\r\n\t\t\t\tString[] OFFER_IDCategories = null;\r\n\t\t\t\tif( OFFER_CATEGORY == null || OFFER_CATEGORY.equals( \"\" ) ) {\r\n\t\t\t\t\tcom.google.gson.JsonElement offerCatEle = getSiftwareAttribute( \"Offer\", offer, \"category\" );\r\n\t\t\t\t\tif( offerCatEle == null || offerCatEle.isJsonNull() ) {\r\n\t\t\t\t\t\tOFFER_IDCategories = new String[ 1 ];\r\n\t\t\t\t\t\tOFFER_IDCategories[ 0 ] = \"GENERIC\";\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\tOFFER_IDCategories = offerCatEle.getAsString().split( \",\" );\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tOFFER_IDCategories = OFFER_CATEGORY.split( \",\" );\r\n\t\t\t\t\r\n\t\t\t\tfor( int i = 0; i < OFFER_IDCategories.length; i ++ ){\r\n\t\t\t\t\tjava.lang.String cat = OFFER_IDCategories[ i ];\r\n\t\t\t\t\tcom.google.gson.JsonElement catele = FULFILLMENT_COUNT_LifeTime.get( cat );\r\n\t\t\t\t\tif( catele == null )\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\tcom.google.gson.JsonObject catObj = catele.getAsJsonObject();\r\n\t\t\t\t\tcom.google.gson.JsonElement catOFFER_IDEle = catObj.get( OFFER_ID );\r\n\t\t\t\t\tif( catOFFER_IDEle == null )\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\tcom.google.gson.JsonObject catOFFER_IDObj = catOFFER_IDEle.getAsJsonObject();\r\n\t\t\t\t\tif( CHANNEL.equals( \"*\" ) ){\r\n\t\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\t\treturn catOFFER_IDObj.get( \"count\" ).getAsInt();\t\t\t\t\t\t\t\t\t\t\t// getContactCount( \"*\", \"OFFER_ID1\", \"*\", -1, -1 );\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tcom.google.gson.JsonElement dateSeriesEle = catOFFER_IDObj.get( \"date_series\" );\r\n\t\t\t\t\t\t\tif( dateSeriesEle == null )\r\n\t\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\t\treturn getRangeCountFromArray( dateSeriesEle.getAsJsonArray(), lStart, lEnd );\t\t\t// getContactCount( \"*\", \"OFFER_ID1\", \"*\", 0, 30 );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else{\r\n\t\t\t\t\t\tif( lStart == -1 ){\r\n\t\t\t\t\t\t\tcom.google.gson.JsonElement CHANNELEle = catOFFER_IDObj.get( CHANNEL );\r\n\t\t\t\t\t\t\tif( CHANNELEle == null )\r\n\t\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\t\treturn CHANNELEle.getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// getContactCount( \"*\", \"OFFER_ID1\", \"SMS\", -1, -1 );\r\n\t\t\t\t\t\t} else{\r\n\t\t\t\t\t\t\tcom.google.gson.JsonElement CHANNELDateSeriesEle = catOFFER_IDObj.get( CHANNEL + \"_date_series\" );\r\n\t\t\t\t\t\t\tif( CHANNELDateSeriesEle == null )\r\n\t\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\t\treturn getRangeCountFromArray( CHANNELDateSeriesEle.getAsJsonArray(), lStart, lEnd );\t//  getContactCount( \"*\", \"OFFER_ID1\", \"SMS\", 0, 30 );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else{\r\n\t\t\tcom.google.gson.JsonElement catEle = FULFILLMENT_COUNT_LifeTime.get( OFFER_CATEGORY );\r\n\t\t\tif( catEle == null )\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\tcom.google.gson.JsonObject catObj = catEle.getAsJsonObject();\r\n\t\t\tif( OFFER_ID.equals( \"*\" ) ){\r\n\t\t\t\tif( CHANNEL.equals( \"*\" ) ){\r\n\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\treturn catObj.get( \"count\" ).getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t//  getContactCount( \"Cat1\", \"*\", \"*\", -1, -1 );\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\t//TODO: Need date_series to add for getContactCount( \"category\", \"*\", \"*\", 0, 30 );\t\t\t\t//  getContactCount( \"Cat1\", \"*\", \"*\", 0, 30 );\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else{\r\n\t\t\t\t\tif( lStart == -1 ){\r\n\t\t\t\t\t\tcom.google.gson.JsonElement CHANNELEle = catObj.get( CHANNEL );\r\n\t\t\t\t\t\tif( CHANNELEle == null )\r\n\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\treturn catObj.get( CHANNEL ).getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t//  getContactCount( \"Cat1\", \"*\", \"SMS\", -1, -1 );\r\n\t\t\t\t\t} else{\r\n\t\t\t\t\t\t//TODO: Need CHANNEL_date_series to add for getContactCount( \"category\", \"*\", \"*\", 0, 30 );\t\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else{\r\n\t\t\t\tcom.google.gson.JsonElement OFFER_IDEle = catObj.get( OFFER_ID );\r\n\t\t\t\tif( OFFER_IDEle == null )\r\n\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\tcom.google.gson.JsonObject OFFER_IDObj = OFFER_IDEle.getAsJsonObject();\r\n\t\t\t\tif( CHANNEL.equals( \"*\" ) ){\r\n\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\treturn OFFER_IDObj.get( \"count\" ).getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t//  getContactCount( \"Cat1\", \"OFFER_ID1\", \"*\", -1, -1 );\r\n\r\n\t\t\t\t\tcom.google.gson.JsonElement dateSeriesEle = OFFER_IDObj.get( \"date_series\" );\r\n\t\t\t\t\tif( dateSeriesEle == null )\r\n\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\treturn getRangeCountFromArray( dateSeriesEle.getAsJsonArray(), lStart, lEnd );\t\t\t\t\t//  getContactCount( \"Cat1\", \"OFFER_ID1\", \"*\", 0, 30 );\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tcom.google.gson.JsonElement CHANNELEle = OFFER_IDObj.get( CHANNEL );\r\n\t\t\t\t\tif( CHANNELEle == null )\r\n\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\treturn OFFER_IDObj.get( CHANNEL ).getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t//  getContactCount( \"Cat1\", \"OFFER_ID1\", \"SMS\", -1, -1 );\r\n\r\n\t\t\t\t\tcom.google.gson.JsonElement CHANNELDateSeriesEle = OFFER_IDObj.get( CHANNEL + \"_date_series\" );\r\n\t\t\t\t\tif( CHANNELDateSeriesEle == null )\r\n\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\treturn getRangeCountFromArray( CHANNELDateSeriesEle.getAsJsonArray(), lStart, lEnd );\t\t\t//  getContactCount( \"Cat1\", \"OFFER_ID1\", \"SMS\", 0, 30 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn count;"
Preprocessed Expression : long msecPerDay = 86400000l;
		long lStart, lEnd;
		int count = 0;
		if( start == - 1 )
			lStart = -1;
		else 
			lStart =  SIFTMATH.getCurrentTime() - start * msecPerDay;		// Until the current time of the day

		if( duration == -1 )
			lEnd = -1;
		else{
			lEnd = ( lStart - lStart % msecPerDay ) - ( ( duration - 1 ) * msecPerDay );
			lStart += msecPerDay - 1000;
		}

		if( OFFER_CATEGORY.equals( "*" ) ){
			if( OFFER_ID.equals( "*" ) ){
				if( CHANNEL.equals( "*" ) ){
					if( lStart == -1 )
						return FULFILLMENT_COUNT_LifeTime.get( "TotalCount" ).getAsInt();									//  SIFTMATH.execIntFunction("getContactCount",  "*", "*", "*", -1, -1 );
					else{
						//TODO: Need CONTACT_SERIES for  SIFTMATH.execIntFunction("getContactCount",  "*", "*", "*", 0, 30 );
						return -1;
					}
				} else{
					if( lStart == -1 ){
						com.google.gson.JsonElement CHANNELEle = FULFILLMENT_COUNT_LifeTime.get( CHANNEL );
						if( CHANNELEle == null )
							return 0;
						return CHANNELEle.getAsInt();																//  SIFTMATH.execIntFunction("getContactCount",  "*", "*", "SMS", -1, -1 );
					} else {
						// TODO: Need to add for  SIFTMATH.execIntFunction("getContactCount",  "*", "*", "SMS", 0, 30 );
						return -1;
					}
				}
			} else{

				String[] OFFER_IDCategories = null;
				if( OFFER_CATEGORY == null || OFFER_CATEGORY.equals( "" ) ) {
					com.google.gson.JsonElement offerCatEle =  SIFTMATH.getSiftwareAttribute( "Offer", offer, "category" );
					if( offerCatEle == null || offerCatEle.isJsonNull() ) {
						OFFER_IDCategories = new String[ 1 ];
						OFFER_IDCategories[ 0 ] = "GENERIC";
					} else
						OFFER_IDCategories = offerCatEle.getAsString().split( "," );
				}
				else
					OFFER_IDCategories = OFFER_CATEGORY.split( "," );
				
				for( int i = 0; i < OFFER_IDCategories.length; i ++ ){
					java.lang.String cat = OFFER_IDCategories[ i ];
					com.google.gson.JsonElement catele = FULFILLMENT_COUNT_LifeTime.get( cat );
					if( catele == null )
						continue;

					com.google.gson.JsonObject catObj = catele.getAsJsonObject();
					com.google.gson.JsonElement catOFFER_IDEle = catObj.get( OFFER_ID );
					if( catOFFER_IDEle == null )
						continue;

					com.google.gson.JsonObject catOFFER_IDObj = catOFFER_IDEle.getAsJsonObject();
					if( CHANNEL.equals( "*" ) ){
						if( lStart == -1 )
							return catOFFER_IDObj.get( "count" ).getAsInt();											//  SIFTMATH.execIntFunction("getContactCount",  "*", "OFFER_ID1", "*", -1, -1 );
						else{
							com.google.gson.JsonElement dateSeriesEle = catOFFER_IDObj.get( "date_series" );
							if( dateSeriesEle == null )
								return 0;

							return  SIFTMATH.execIntFunction("getRangeCountFromArray",  dateSeriesEle.getAsJsonArray(), lStart, lEnd );			//  SIFTMATH.execIntFunction("getContactCount",  "*", "OFFER_ID1", "*", 0, 30 );
						}
					} else{
						if( lStart == -1 ){
							com.google.gson.JsonElement CHANNELEle = catOFFER_IDObj.get( CHANNEL );
							if( CHANNELEle == null )
								return 0;

							return CHANNELEle.getAsInt();															//  SIFTMATH.execIntFunction("getContactCount",  "*", "OFFER_ID1", "SMS", -1, -1 );
						} else{
							com.google.gson.JsonElement CHANNELDateSeriesEle = catOFFER_IDObj.get( CHANNEL + "_date_series" );
							if( CHANNELDateSeriesEle == null )
								return 0;

							return  SIFTMATH.execIntFunction("getRangeCountFromArray",  CHANNELDateSeriesEle.getAsJsonArray(), lStart, lEnd );	//   SIFTMATH.execIntFunction("getContactCount",  "*", "OFFER_ID1", "SMS", 0, 30 );
						}
					}
				}
			}
		} else{
			com.google.gson.JsonElement catEle = FULFILLMENT_COUNT_LifeTime.get( OFFER_CATEGORY );
			if( catEle == null )
				return 0;

			com.google.gson.JsonObject catObj = catEle.getAsJsonObject();
			if( OFFER_ID.equals( "*" ) ){
				if( CHANNEL.equals( "*" ) ){
					if( lStart == -1 )
						return catObj.get( "count" ).getAsInt();													//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "*", "*", -1, -1 );
					else{
						//TODO: Need date_series to add for  SIFTMATH.execIntFunction("getContactCount",  "category", "*", "*", 0, 30 );				//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "*", "*", 0, 30 );
						return -1;
					}
				} else{
					if( lStart == -1 ){
						com.google.gson.JsonElement CHANNELEle = catObj.get( CHANNEL );
						if( CHANNELEle == null )
							return 0;

						return catObj.get( CHANNEL ).getAsInt();													//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "*", "SMS", -1, -1 );
					} else{
						//TODO: Need CHANNEL_date_series to add for  SIFTMATH.execIntFunction("getContactCount",  "category", "*", "*", 0, 30 );	
						return -1;
					}
				}
			} else{
				com.google.gson.JsonElement OFFER_IDEle = catObj.get( OFFER_ID );
				if( OFFER_IDEle == null )
					return 0;

				com.google.gson.JsonObject OFFER_IDObj = OFFER_IDEle.getAsJsonObject();
				if( CHANNEL.equals( "*" ) ){
					if( lStart == -1 )
						return OFFER_IDObj.get( "count" ).getAsInt();													//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "OFFER_ID1", "*", -1, -1 );

					com.google.gson.JsonElement dateSeriesEle = OFFER_IDObj.get( "date_series" );
					if( dateSeriesEle == null )
						return 0;

					return  SIFTMATH.execIntFunction("getRangeCountFromArray",  dateSeriesEle.getAsJsonArray(), lStart, lEnd );					//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "OFFER_ID1", "*", 0, 30 );
				}
				else{
					com.google.gson.JsonElement CHANNELEle = OFFER_IDObj.get( CHANNEL );
					if( CHANNELEle == null )
						return 0;

					if( lStart == -1 )
						return OFFER_IDObj.get( CHANNEL ).getAsInt();													//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "OFFER_ID1", "SMS", -1, -1 );

					com.google.gson.JsonElement CHANNELDateSeriesEle = OFFER_IDObj.get( CHANNEL + "_date_series" );
					if( CHANNELDateSeriesEle == null )
						return 0;

					return  SIFTMATH.execIntFunction("getRangeCountFromArray",  CHANNELDateSeriesEle.getAsJsonArray(), lStart, lEnd );			//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "OFFER_ID1", "SMS", 0, 30 );
				}
			}
		}
		return count;
line 1:0 no viable alternative at input 'long'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params OFFER_CATEGORY -- java.lang.String -- String
------------Infered params OFFER_ID -- java.lang.String -- String
------------Infered params CHANNEL -- java.lang.String -- String
------------Infered params FULFILLMENT_COUNT_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "isEligibleForDiscountFulfilment" -- > "int daysSinceOffer_Fulfil = (int)getDaysSinceOfferTriggered(\"DISCOUNT_PROGRAM\",offerName,\"fulfil\");\r\n\r\nif((daysSinceOffer_Fulfil!=-1 && daysSinceOffer_Fulfil <=mdays ) ){\r\n\tint count =0;\r\n\tString program_offerName =\"DISCOUNT_PROGRAM-\"+offerName;\r\n\tif(LATEST_OFFER_FULFILMENT_COUNTS.has(program_offerName))\r\n\t\tcount= LATEST_OFFER_FULFILMENT_COUNTS.get( program_offerName ).getAsInt();\r\n\r\n\t if (count < 3 && count >=1 ) {\r\n\t     return true;\r\n\t }\r\n}\r\nreturn false;"
Preprocessed Expression : int daysSinceOffer_Fulfil = (int) SIFTMATH.getDaysSinceOfferTriggered("DISCOUNT_PROGRAM",offerName,"fulfil");

if((daysSinceOffer_Fulfil!=-1 && daysSinceOffer_Fulfil <=mdays ) ){
	int count =0;
	String program_offerName ="DISCOUNT_PROGRAM-"+offerName;
	if(LATEST_OFFER_FULFILMENT_COUNTS.has(program_offerName))
		count= LATEST_OFFER_FULFILMENT_COUNTS.get( program_offerName ).getAsInt();

	 if (count < 3 && count >=1 ) {
	     return true;
	 }
}
return false;
line 1:0 no viable alternative at input 'int'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params LATEST_OFFER_FULFILMENT_COUNTS -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getCurrentMonitoringRewards" -- > "JsonArray currentlyMonitored = isCurrentlyMonitored();\r\nif (currentlyMonitored!=null && !currentlyMonitored.isJsonNull() && currentlyMonitored.size() >0){\r\n    return (currentlyMonitored.get(3).getAsString());\r\n}\r\nreturn \"\";"
Preprocessed Expression : JsonArray currentlyMonitored =  SIFTMATH.execJsonArrayFunction("isCurrentlyMonitored" );
if (currentlyMonitored!=null && !currentlyMonitored.isJsonNull() && currentlyMonitored.size() >0){
    return (currentlyMonitored.get(3).getAsString());
}
return "";
line 1:0 no viable alternative at input 'JsonArray'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "manageFulfillmentContactCount" -- > "// System.out.println(\"Processing fulfilment count indicator. for failure.. \" + IS_SIMULATED + \" ------------------\" + IS_CONTROL  + \"=-------------------\" + OFFER_TYPE);\r\nif( IS_SIMULATED.equals( \"true\" ) && OFFER_TYPE.equals(\"UnConditional\") )\r\n\tprocessIndicator(\"OFFER_COUNT_LifeTime_Simulation\");\r\n// System.out.println(\"Processing fulfilment count indicator after simulation...\");\r\nif( IS_CONTROL.equals(\"true\") && OFFER_TYPE.equals(\"UnConditional\") )\r\n\tprocessIndicator(\"OFFER_COUNT_LifeTime_Control\");\r\n// System.out.println(\"Processing fulfilment count indicator after control...\");\r\nif( ! IS_SIMULATED.equals( \"true\" ) && ! IS_CONTROL.equals(\"true\") ) {\r\n// System.out.println(\"Processing fulfilment count indicator inside actual condition.....\");\r\n\tif( OFFER_TYPE.equals(\"UnConditional\") )\r\n\t\tprocessIndicator(\"OFFER_COUNT_LifeTime\");\r\n// System.out.println(\"Processing fulfilment count indicator...\");\r\n\r\n\tif( FULFILLMENT_PRODUCT_PRESENT.equals(\"true\") ){\r\n\t\tprocessIndicator( \"FULFILLMENT_COUNT_LifeTime\" );  \r\n// System.out.println(\"processed fulfil count ind\");\r\n\t\tprocessSummaryCounter( OFFER_ID + \"-\" + CHANNEL + \"-\" + \"COUNT\", 1, \"LifeTime\" );\r\n// System.out.println(\"Processed summary ind\");\r\n\t}\r\n\tprocessIndicator( \"OFFER_HISTORY_LifeTime\" );\r\n// System.out.println(\"processed offer history\");\r\n}\r\n\r\nif( OFFER_TYPE.equals(\"Conditional\") )\r\n\tprocessIndicator( \"LATEST_OFFER_FULFILMENT_COUNTS\");\r\n\r\n//manageLiveChartIndicator( \"FulfillmentCounts\" );\r\nreturn true;"
Preprocessed Expression : // System.out.println("Processing fulfilment count indicator. for failure.. " + IS_SIMULATED + " ------------------" + IS_CONTROL  + "=-------------------" + OFFER_TYPE);
if( IS_SIMULATED.equals( "true" ) && OFFER_TYPE.equals("UnConditional") )
	 SIFTMATH.processIndicator("OFFER_COUNT_LifeTime_Simulation");
// System.out.println("Processing fulfilment count indicator after simulation...");
if( IS_CONTROL.equals("true") && OFFER_TYPE.equals("UnConditional") )
	 SIFTMATH.processIndicator("OFFER_COUNT_LifeTime_Control");
// System.out.println("Processing fulfilment count indicator after control...");
if( ! IS_SIMULATED.equals( "true" ) && ! IS_CONTROL.equals("true") ) {
// System.out.println("Processing fulfilment count indicator inside actual condition.....");
	if( OFFER_TYPE.equals("UnConditional") )
		 SIFTMATH.processIndicator("OFFER_COUNT_LifeTime");
// System.out.println("Processing fulfilment count indicator...");

	if( FULFILLMENT_PRODUCT_PRESENT.equals("true") ){
		 SIFTMATH.processIndicator( "FULFILLMENT_COUNT_LifeTime" );  
// System.out.println("processed fulfil count ind");
		 SIFTMATH.processSummaryCounter( OFFER_ID + "-" + CHANNEL + "-" + "COUNT", 1, "LifeTime" );
// System.out.println("Processed summary ind");
	}
	 SIFTMATH.processIndicator( "OFFER_HISTORY_LifeTime" );
// System.out.println("processed offer history");
}

if( OFFER_TYPE.equals("Conditional") )
	 SIFTMATH.processIndicator( "LATEST_OFFER_FULFILMENT_COUNTS");

// SIFTMATH.execJsonObjectFunction("manageLiveChartIndicator"  "FulfillmentCounts" );
return true;
line 2:0 no viable alternative at input 'if'
------------Infered params IS_SIMULATED -- java.lang.String -- String
------------Infered params OFFER_TYPE -- java.lang.String -- String
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params IS_CONTROL -- java.lang.String -- String
------------Infered params FULFILLMENT_PRODUCT_PRESENT -- java.lang.String -- String
------------Infered params OFFER_ID -- java.lang.String -- String
------------Infered params CHANNEL -- java.lang.String -- String
Compiling Function : "getCurrentFulfilmentCount" -- > "if( LATEST_OFFER_FULFILMENT_COUNTS == null || LATEST_OFFER_FULFILMENT_COUNTS.isJsonNull() || ! LATEST_OFFER_FULFILMENT_COUNTS.has( PROGRAM_ID + \"-\" + OFFER_ID ) )\r\n\t\t\treturn 0;\r\n\t\t\r\nreturn LATEST_OFFER_FULFILMENT_COUNTS.get( PROGRAM_ID + \"-\" + OFFER_ID ).getAsInt();"
Preprocessed Expression : if( LATEST_OFFER_FULFILMENT_COUNTS == null || LATEST_OFFER_FULFILMENT_COUNTS.isJsonNull() || ! LATEST_OFFER_FULFILMENT_COUNTS.has( PROGRAM_ID + "-" + OFFER_ID ) )
			return 0;
		
return LATEST_OFFER_FULFILMENT_COUNTS.get( PROGRAM_ID + "-" + OFFER_ID ).getAsInt();
line 1:0 no viable alternative at input 'if'
------------Infered params LATEST_OFFER_FULFILMENT_COUNTS -- com.google.gson.JsonObject -- JsonObject
------------Infered params PROGRAM_ID -- java.lang.String -- String
------------Infered params OFFER_ID -- java.lang.String -- String
Compiling Function : "getAvgHistoricalScore" -- > "JsonElement bundleThreJele = BUNDLE_THRESHOLD_LifeTime;\r\n\t\tif( bundleThreJele != null && !bundleThreJele.isJsonNull() ) {\r\n\t\t\tif( \"bundleName\".equals( level ) ) {\r\n\t\t\t\tdouble avgHistoricalScore = 0;\r\n\t\t\t\tJsonElement bundleNameJele = bundleThreJele.getAsJsonObject().get( value );\r\n\t\t\t\tif( bundleNameJele != null && !bundleNameJele.isJsonNull() ) {\r\n\t\t\t\t\tJsonElement burnerHistoryJele = bundleNameJele.getAsJsonObject().get( \"burnerHistory\" );\r\n\t\t\t\t\tif( burnerHistoryJele != null && burnerHistoryJele.getAsJsonArray().size() > 0 ) {\r\n\t\t\t\t\t\tJsonArray burnerArray = burnerHistoryJele.getAsJsonArray();\r\n\t\t\t\t\t\tint arraySize = burnerHistoryJele.getAsJsonArray().size();\r\n\t\t\t\t\t\tif( arraySize <= count ) {\r\n\t\t\t\t\t\t\tfor( int i = 0; i <= arraySize - 1; i++ ) {\r\n\t\t\t\t\t\t\t\tavgHistoricalScore = avgHistoricalScore + burnerArray.get( i ).getAsDouble();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tavgHistoricalScore = avgHistoricalScore / arraySize;\r\n\t\t\t\t\t\t\treturn avgHistoricalScore;\r\n\t\t\t\t\t\t}else {\r\n\t\t\t\t\t\t\tfor( int i = arraySize - 1; i >= ( arraySize - count ); i-- ) {\r\n\t\t\t\t\t\t\t\tavgHistoricalScore = avgHistoricalScore + burnerArray.get( i ).getAsDouble();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tavgHistoricalScore = avgHistoricalScore / count;\r\n\t\t\t\t\t\t\tavgHistoricalScore = ( double ) java.lang.Math.round( avgHistoricalScore * 100.0 ) / 100.0;\r\n\t\t\t\t\t\t\treturn avgHistoricalScore;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}else {\r\n\r\n\t\t\t\tif( \"bundleType\".equals( level ) || \"category\".equals( level ) ) {\r\n\t\t\t\t\tdouble numberOfBudle = 0;\r\n\t\t\t\t\tdouble avgHistoricalScore = 0;\r\n\t\t\t\t\tfor( java.util.Map.Entry< String, JsonElement > entry : bundleThreJele.getAsJsonObject().entrySet() ) {\r\n\t\t\t\t\t\tcom.google.gson.Gson gson = new com.google.gson.Gson();\r\n\t\t\t\t\t\tJsonElement bundleNameJEle = gson.toJsonTree(entry.getValue());\r\n\t\t\t\t\t\tif( bundleNameJEle != null && !bundleNameJEle.isJsonNull() ) {\r\n\t\t\t\t\t\t\tJsonElement bundleTypeJele = bundleNameJEle.getAsJsonObject().get( level );\r\n\t\t\t\t\t\t\tif( bundleTypeJele != null && !bundleTypeJele.isJsonNull() ) {\r\n\t\t\t\t\t\t\t\tif( bundleTypeJele.getAsString().equals( value ) ) {\r\n\t\t\t\t\t\t\t\t\tJsonElement burnerHistoryJele = bundleNameJEle.getAsJsonObject().get( \"burnerHistory\" );\r\n\t\t\t\t\t\t\t\t\tif( burnerHistoryJele != null && burnerHistoryJele.getAsJsonArray().size() > 0 ) {\r\n\t\t\t\t\t\t\t\t\t\tJsonArray burnerArray = burnerHistoryJele.getAsJsonArray();\r\n\t\t\t\t\t\t\t\t\t\tint arraySize = burnerHistoryJele.getAsJsonArray().size();\r\n\t\t\t\t\t\t\t\t\t\tif( arraySize <= count ) {\r\n\t\t\t\t\t\t\t\t\t\t\tfor( int i = 0; i <= arraySize - 1; i++ ) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tavgHistoricalScore = avgHistoricalScore + burnerArray.get( i ).getAsDouble();\r\n\t\t\t\t\t\t\t\t\t\t\t\tnumberOfBudle++;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t}else {\r\n\t\t\t\t\t\t\t\t\t\t\tfor( int i = arraySize - 1; i >= ( arraySize - count ); i-- ) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tavgHistoricalScore = avgHistoricalScore + burnerArray.get( i ).getAsDouble();\r\n\t\t\t\t\t\t\t\t\t\t\t\tnumberOfBudle++;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif( avgHistoricalScore > 0 && numberOfBudle > 0 ) {\r\n\t\t\t\t\t\tdouble finalValue = avgHistoricalScore / numberOfBudle;\r\n\t\t\t\t\t\tfinalValue = ( double ) java.lang.Math.round( finalValue * 100.0 ) / 100.0;\r\n\t\t\t\t\t\treturn finalValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -99.0;"
Preprocessed Expression : JsonElement bundleThreJele = BUNDLE_THRESHOLD_LifeTime;
		if( bundleThreJele != null && !bundleThreJele.isJsonNull() ) {
			if( "bundleName".equals( level ) ) {
				double avgHistoricalScore = 0;
				JsonElement bundleNameJele = bundleThreJele.getAsJsonObject().get( value );
				if( bundleNameJele != null && !bundleNameJele.isJsonNull() ) {
					JsonElement burnerHistoryJele = bundleNameJele.getAsJsonObject().get( "burnerHistory" );
					if( burnerHistoryJele != null && burnerHistoryJele.getAsJsonArray().size() > 0 ) {
						JsonArray burnerArray = burnerHistoryJele.getAsJsonArray();
						int arraySize = burnerHistoryJele.getAsJsonArray().size();
						if( arraySize <= count ) {
							for( int i = 0; i <= arraySize - 1; i++ ) {
								avgHistoricalScore = avgHistoricalScore + burnerArray.get( i ).getAsDouble();
							}
							avgHistoricalScore = avgHistoricalScore / arraySize;
							return avgHistoricalScore;
						}else {
							for( int i = arraySize - 1; i >= ( arraySize - count ); i-- ) {
								avgHistoricalScore = avgHistoricalScore + burnerArray.get( i ).getAsDouble();
							}
							avgHistoricalScore = avgHistoricalScore / count;
							avgHistoricalScore = ( double ) java.lang.Math.round( avgHistoricalScore * 100.0 ) / 100.0;
							return avgHistoricalScore;
						}
					}
				}

			}else {

				if( "bundleType".equals( level ) || "category".equals( level ) ) {
					double numberOfBudle = 0;
					double avgHistoricalScore = 0;
					for( java.util.Map.Entry< String, JsonElement > entry : bundleThreJele.getAsJsonObject().entrySet() ) {
						com.google.gson.Gson gson = new com.google.gson.Gson();
						JsonElement bundleNameJEle = gson.toJsonTree(entry.getValue());
						if( bundleNameJEle != null && !bundleNameJEle.isJsonNull() ) {
							JsonElement bundleTypeJele = bundleNameJEle.getAsJsonObject().get( level );
							if( bundleTypeJele != null && !bundleTypeJele.isJsonNull() ) {
								if( bundleTypeJele.getAsString().equals( value ) ) {
									JsonElement burnerHistoryJele = bundleNameJEle.getAsJsonObject().get( "burnerHistory" );
									if( burnerHistoryJele != null && burnerHistoryJele.getAsJsonArray().size() > 0 ) {
										JsonArray burnerArray = burnerHistoryJele.getAsJsonArray();
										int arraySize = burnerHistoryJele.getAsJsonArray().size();
										if( arraySize <= count ) {
											for( int i = 0; i <= arraySize - 1; i++ ) {
												avgHistoricalScore = avgHistoricalScore + burnerArray.get( i ).getAsDouble();
												numberOfBudle++;
											}

										}else {
											for( int i = arraySize - 1; i >= ( arraySize - count ); i-- ) {
												avgHistoricalScore = avgHistoricalScore + burnerArray.get( i ).getAsDouble();
												numberOfBudle++;
											}

										}

									}
								}
							}
						}
					}
					if( avgHistoricalScore > 0 && numberOfBudle > 0 ) {
						double finalValue = avgHistoricalScore / numberOfBudle;
						finalValue = ( double ) java.lang.Math.round( finalValue * 100.0 ) / 100.0;
						return finalValue;
					}
				}
			}
		}
		return -99.0;
line 1:0 no viable alternative at input 'JsonElement'
------------Infered params BUNDLE_THRESHOLD_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getCommercialOffer" -- > "String offer = \"\";\r\nif(COMMERCIAL_OFFER_LifeTime!=null && !COMMERCIAL_OFFER_LifeTime.isJsonNull() && COMMERCIAL_OFFER_LifeTime.entrySet().size()!=0)\r\n    offer = COMMERCIAL_OFFER_LifeTime.get(\"currentCommercialOffer\").getAsString();\r\nreturn offer;"
Preprocessed Expression : String offer = "";
if(COMMERCIAL_OFFER_LifeTime!=null && !COMMERCIAL_OFFER_LifeTime.isJsonNull() && COMMERCIAL_OFFER_LifeTime.entrySet().size()!=0)
    offer = COMMERCIAL_OFFER_LifeTime.get("currentCommercialOffer").getAsString();
return offer;
line 1:0 no viable alternative at input 'String'
------------Infered params COMMERCIAL_OFFER_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getMigrationDate" -- > "long successTimestamp = -99L;\r\n  if(SOURCE_SYSTEM_ID_LifeTime.equals(\"H\")){\r\n\t\tif ( HENDRIX_MIGRATION_LifeTime != null && !HENDRIX_MIGRATION_LifeTime.isJsonNull()){\r\n\t\t    JsonArray migrationarr= HENDRIX_MIGRATION_LifeTime;\r\n\t\t    for (int i = 0; i < migrationarr.size(); i++) {\r\n\t\t\t  if (migrationarr.get(i).getAsString().equals(\"S\"))\r\n\t\t\t\t\tsuccessTimestamp =migrationarr.get(i+1).getAsLong();\r\n\t\t    }\r\n        } \r\n\t}\r\nreturn successTimestamp;"
Preprocessed Expression : long successTimestamp = -99L;
  if(SOURCE_SYSTEM_ID_LifeTime.equals("H")){
		if ( HENDRIX_MIGRATION_LifeTime != null && !HENDRIX_MIGRATION_LifeTime.isJsonNull()){
		    JsonArray migrationarr= HENDRIX_MIGRATION_LifeTime;
		    for (int i = 0; i < migrationarr.size(); i++) {
			  if (migrationarr.get(i).getAsString().equals("S"))
					successTimestamp =migrationarr.get(i+1).getAsLong();
		    }
        } 
	}
return successTimestamp;
line 1:0 no viable alternative at input 'long'
------------Infered params SOURCE_SYSTEM_ID_LifeTime -- java.lang.String -- String
------------Infered params HENDRIX_MIGRATION_LifeTime -- com.google.gson.JsonArray -- JsonArray
Compiling Function : "evaluateStringOperations" -- > "if( operation.equals( \"=\" ) )\r\n\t\t\treturn lhs.equals( rhs );\r\n\t\telse if( operation.equals( \"!=\" ) )\r\n\t\t\treturn !lhs.equals( rhs );\r\n\t\telse if( operation.equals( \"CONTAINS\" ) ) {\r\n\t\t\tString[ ] rhsValues = rhs.split( \"\\\\|\" );\r\n\t\t\tfor( int i = 0; i < rhsValues.length; i++ ) {\r\n\t\t\t\tif( lhs.contains( rhsValues[ i ] ) )\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}else\r\n\t\t\treturn false;"
Preprocessed Expression : if( operation.equals( "=" ) )
			return lhs.equals( rhs );
		else if( operation.equals( "!=" ) )
			return !lhs.equals( rhs );
		else if( operation.equals( "CONTAINS" ) ) {
			String[ ] rhsValues = rhs.split( "\\|" );
			for( int i = 0; i < rhsValues.length; i++ ) {
				if( lhs.contains( rhsValues[ i ] ) )
					return true;
			}
			return false;
		}else
			return false;
line 1:0 no viable alternative at input 'if'
Compiling Function : "getActiveBundleBalance" -- > "Double totalbalance =0.0,bundBalance=0.0;\r\n long expiryDate = 0l;\r\nif( BUNDLE_INFO_LifeTime!=null && !BUNDLE_INFO_LifeTime.isJsonNull() && BUNDLE_INFO_LifeTime.entrySet().size()>0){    \r\n\tjava.util.Iterator< java.util.Map.Entry< String, JsonObject> > iter = BUNDLE_INFO_LifeTime.entrySet().iterator();             \r\n\twhile( iter.hasNext() ){\r\n\t\tjava.util.Map.Entry< String, JsonObject > thisEntry =( java.util.Map.Entry )iter.next();\r\n\t\tJsonObject bundleArr = (JsonObject) thisEntry.getValue();\r\n\t\tString[] name = bundleName.split(\"\\\\,\", -1);\r\n        for (String hendrixBundle : name) {\r\n    \t\tif(bundleArr.has(\"bundleId\") && bundleArr.get(\"bundleId\").getAsString().equals(hendrixBundle)) {\r\n\t\t\t   if(hendrixBundle.equals(\"CFSS_C_MB_PRE_B_MIG_NDBNK\")||hendrixBundle.equals(\"CFSS_C_MB_PRE_B_MIG_TDBNK\")) {\r\n\t\t\t\t\tbundBalance= bundleArr.get(\"totalActiveBalance\").getAsDouble();\r\n\t\t\t\t\ttotalbalance = totalbalance+bundBalance;\r\n\t\t\t   }else{\r\n\t\t\t\t\tJsonArray activeInst=bundleArr.get(\"activeInstances\").getAsJsonArray();\r\n\t\t\t\t   expiryDate = bundleArr.get(\"bundleExpiryDate\").getAsLong();\r\n\t\t\t\t   for (JsonElement instId : activeInst) {\r\n\t\t\t\t\t   if(bundleArr.has(instId.getAsString())) {\r\n\t\t\t\t\t\t\tJsonObject instObj = bundleArr.get(instId.getAsString()).getAsJsonObject();\r\n\t\t\t\t\t\t\tif(instObj.get(\"expiry\").getAsLong() > expiryDate) {\r\n\t\t\t\t\t\t\t\texpiryDate = instObj.get(\"expiry\").getAsLong();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t   }\r\n\t\t\t\t\t}\r\n    \t\t\tif(expiryDate >= getCurrentTime()) {\r\n    \t\t\t    bundBalance= bundleArr.get(\"totalActiveBalance\").getAsDouble();\r\n    \t\t\t\tif (hendrixBundle.equals(\"CFSS_C_MB_PRE_B_TIVZ1\")||hendrixBundle.equals(\"CFSS_C_MB_PRE_B_BIVZ1_UNTL\")||hendrixBundle.equals(\"CFSS_C_MB_PRE_B_TIVZ2\")||hendrixBundle.equals(\"CFSS_C_MB_PRE_B_BIVZ2\"))\r\n\t\t\t\t\t\ttotalbalance = totalbalance+(bundBalance/60);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\ttotalbalance = totalbalance+bundBalance;\r\n    \t\t\t}\r\n            }\r\n\t\t\t}\r\n        }\r\n    }\r\n}  \r\nreturn (totalbalance);"
Preprocessed Expression : Double totalbalance =0.0,bundBalance=0.0;
 long expiryDate = 0l;
if( BUNDLE_INFO_LifeTime!=null && !BUNDLE_INFO_LifeTime.isJsonNull() && BUNDLE_INFO_LifeTime.entrySet().size()>0){    
	java.util.Iterator< java.util.Map.Entry< String, JsonObject> > iter = BUNDLE_INFO_LifeTime.entrySet().iterator();             
	while( iter.hasNext() ){
		java.util.Map.Entry< String, JsonObject > thisEntry =( java.util.Map.Entry )iter.next();
		JsonObject bundleArr = (JsonObject) thisEntry.getValue();
		String[] name = bundleName.split("\\,", -1);
        for (String hendrixBundle : name) {
    		if(bundleArr.has("bundleId") && bundleArr.get("bundleId").getAsString().equals(hendrixBundle)) {
			   if(hendrixBundle.equals("CFSS_C_MB_PRE_B_MIG_NDBNK")||hendrixBundle.equals("CFSS_C_MB_PRE_B_MIG_TDBNK")) {
					bundBalance= bundleArr.get("totalActiveBalance").getAsDouble();
					totalbalance = totalbalance+bundBalance;
			   }else{
					JsonArray activeInst=bundleArr.get("activeInstances").getAsJsonArray();
				   expiryDate = bundleArr.get("bundleExpiryDate").getAsLong();
				   for (JsonElement instId : activeInst) {
					   if(bundleArr.has(instId.getAsString())) {
							JsonObject instObj = bundleArr.get(instId.getAsString()).getAsJsonObject();
							if(instObj.get("expiry").getAsLong() > expiryDate) {
								expiryDate = instObj.get("expiry").getAsLong();
							}
					   }
					}
    			if(expiryDate >=  SIFTMATH.getCurrentTime()) {
    			    bundBalance= bundleArr.get("totalActiveBalance").getAsDouble();
    				if (hendrixBundle.equals("CFSS_C_MB_PRE_B_TIVZ1")||hendrixBundle.equals("CFSS_C_MB_PRE_B_BIVZ1_UNTL")||hendrixBundle.equals("CFSS_C_MB_PRE_B_TIVZ2")||hendrixBundle.equals("CFSS_C_MB_PRE_B_BIVZ2"))
						totalbalance = totalbalance+(bundBalance/60);
					else
						totalbalance = totalbalance+bundBalance;
    			}
            }
			}
        }
    }
}  
return (totalbalance);
line 1:0 no viable alternative at input 'Double'
------------Infered params BUNDLE_INFO_LifeTime -- com.google.gson.JsonObject -- JsonObject
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getLatestNtwConnectDte" -- > "String latestNtwConnectDte = \"\";\r\nif(LAST_NTW_CONN_DATE_LifeTime != 0l && LAST_NTW_CONN_DATE_LifeTime != -99){\r\nlong date = LAST_NTW_CONN_DATE_LifeTime;\r\njava.util.Date dte= new java.util.Date(date);\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\nd.setTimeZone(java.util.TimeZone.getTimeZone(\"GMT\"));\r\nlatestNtwConnectDte = d.format(dte);\r\n}\r\nreturn latestNtwConnectDte;"
Preprocessed Expression : String latestNtwConnectDte = "";
if(LAST_NTW_CONN_DATE_LifeTime != 0l && LAST_NTW_CONN_DATE_LifeTime != -99){
long date = LAST_NTW_CONN_DATE_LifeTime;
java.util.Date dte= new java.util.Date(date);
java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
d.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));
latestNtwConnectDte = d.format(dte);
}
return latestNtwConnectDte;
line 1:0 no viable alternative at input 'String'
------------Infered params LAST_NTW_CONN_DATE_LifeTime -- long -- long
Compiling Function : "getOriginalDefinitionKey" -- > "String originalDefinitionKey =\"\";\r\nif(!JOURNEY_ID.equals(\"\") && !JOURNEY_ID.equals(\"-99\")) {\r\nString eventID = JOURNEY_ID+\"_0_EVENT\";\r\nJsonElement eventDetails = getSiftware(\"Event\", eventID);\r\nif(eventDetails!=null){\r\n\tJsonElement eventIdentificationKeyValue = getSiftwareAttribute(\"Event\",eventID,\"eventIdentificationKey\");\r\n\tif(eventIdentificationKeyValue!=null && !eventIdentificationKeyValue.isJsonNull()){          \r\n\t originalDefinitionKey= eventIdentificationKeyValue.getAsString();\r\n\t }\r\n\t}\r\n}\r\n return originalDefinitionKey;"
Preprocessed Expression : String originalDefinitionKey ="";
if(!JOURNEY_ID.equals("") && !JOURNEY_ID.equals("-99")) {
String eventID = JOURNEY_ID+"_0_EVENT";
JsonElement eventDetails =  SIFTMATH.getSiftware("Event", eventID);
if(eventDetails!=null){
	JsonElement eventIdentificationKeyValue =  SIFTMATH.getSiftwareAttribute("Event",eventID,"eventIdentificationKey");
	if(eventIdentificationKeyValue!=null && !eventIdentificationKeyValue.isJsonNull()){          
	 originalDefinitionKey= eventIdentificationKeyValue.getAsString();
	 }
	}
}
 return originalDefinitionKey;
line 1:0 no viable alternative at input 'String'
------------Infered params JOURNEY_ID -- java.lang.String -- String
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "notReachedMaximumContactPerSubscriber" -- > "(getContactCount( \"*\", OFFER_ID, \"*\", -1, -1 ) +1) <= numberOfContact"
Preprocessed Expression : ( SIFTMATH.execIntFunction("getContactCount",  "*", OFFER_ID, "*", -1, -1 ) +1) <= numberOfContact
line 1:0 no viable alternative at input '('
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params OFFER_ID -- java.lang.String -- String
Compiling Function : "getAutoRecharge" -- > "String sdom = \"\";\r\nString lcpt = \"\";\r\nString state = \"\";\r\nString amount = \"\";\r\nString lastRechargeDaystamp = \"\";\r\nString nextRechargeCycle = \"\";\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\nd.setTimeZone(java.util.TimeZone.getTimeZone(\"GMT\"));\r\nif(AUTO_RECHARGE_LifeTime!=null && !AUTO_RECHARGE_LifeTime.isJsonNull() && AUTO_RECHARGE_LifeTime.entrySet().size()!=0){\r\nif(AUTO_RECHARGE_LifeTime.has(\"ExpiryBased\")){\r\nJsonObject ExpiryBased = AUTO_RECHARGE_LifeTime.get(\"ExpiryBased\").getAsJsonObject();\r\nstate = ExpiryBased.get(\"state\").getAsString();\r\namount = ExpiryBased.get(\"amount\").getAsString();\r\nlong lastRechargeDte = ExpiryBased.get(\"lastRechargeDaystamp\").getAsLong();\r\njava.util.Date dte1= new java.util.Date(lastRechargeDte);\r\nlastRechargeDaystamp = d.format(dte1);\r\nlong nextRechargeDte = ExpiryBased.get(\"nextRechargeCycle\").getAsLong();\r\njava.util.Date dte2= new java.util.Date(nextRechargeDte);\r\nnextRechargeCycle = d.format(dte2);\r\n}\r\nif (AUTO_RECHARGE_LifeTime.has(\"SDOM\")){\r\nlong sdomDate = AUTO_RECHARGE_LifeTime.get(\"SDOM\").getAsLong();\r\njava.util.Date dte3= new java.util.Date(sdomDate);\r\nsdom = d.format(dte3);\r\n}\r\nif (AUTO_RECHARGE_LifeTime.has(\"LCPT\")){\r\nlong lcptDate = AUTO_RECHARGE_LifeTime.get(\"LCPT\").getAsLong();\r\njava.util.Date dte4= new java.util.Date(lcptDate);\r\nlcpt = d.format(dte4);\r\n}\r\n}\r\nreturn sdom + \"|\" + lcpt + \"|\" + state + \"|\" + amount + \"|\" + lastRechargeDaystamp + \"|\" + nextRechargeCycle;"
Preprocessed Expression : String sdom = "";
String lcpt = "";
String state = "";
String amount = "";
String lastRechargeDaystamp = "";
String nextRechargeCycle = "";
java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
d.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));
if(AUTO_RECHARGE_LifeTime!=null && !AUTO_RECHARGE_LifeTime.isJsonNull() && AUTO_RECHARGE_LifeTime.entrySet().size()!=0){
if(AUTO_RECHARGE_LifeTime.has("ExpiryBased")){
JsonObject ExpiryBased = AUTO_RECHARGE_LifeTime.get("ExpiryBased").getAsJsonObject();
state = ExpiryBased.get("state").getAsString();
amount = ExpiryBased.get("amount").getAsString();
long lastRechargeDte = ExpiryBased.get("lastRechargeDaystamp").getAsLong();
java.util.Date dte1= new java.util.Date(lastRechargeDte);
lastRechargeDaystamp = d.format(dte1);
long nextRechargeDte = ExpiryBased.get("nextRechargeCycle").getAsLong();
java.util.Date dte2= new java.util.Date(nextRechargeDte);
nextRechargeCycle = d.format(dte2);
}
if (AUTO_RECHARGE_LifeTime.has("SDOM")){
long sdomDate = AUTO_RECHARGE_LifeTime.get("SDOM").getAsLong();
java.util.Date dte3= new java.util.Date(sdomDate);
sdom = d.format(dte3);
}
if (AUTO_RECHARGE_LifeTime.has("LCPT")){
long lcptDate = AUTO_RECHARGE_LifeTime.get("LCPT").getAsLong();
java.util.Date dte4= new java.util.Date(lcptDate);
lcpt = d.format(dte4);
}
}
return sdom + "|" + lcpt + "|" + state + "|" + amount + "|" + lastRechargeDaystamp + "|" + nextRechargeCycle;
line 1:0 no viable alternative at input 'String'
------------Infered params AUTO_RECHARGE_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getCommercialOfferDetails" -- > "String comOffer=\"\";\r\nString commOfferDate=\"\";\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\nd.setTimeZone(java.util.TimeZone.getTimeZone(\"GMT\"));\r\nif(COMMERCIAL_OFFER_LifeTime!=null && !COMMERCIAL_OFFER_LifeTime.isJsonNull() && COMMERCIAL_OFFER_LifeTime.entrySet().size()!=0){\r\n    comOffer = COMMERCIAL_OFFER_LifeTime.get(\"currentCommercialOffer\").getAsString();\r\n\tlong comUpdateDate = COMMERCIAL_OFFER_LifeTime.get(\"updateDate\").getAsLong();\r\n\tjava.util.Date dte3 = new java.util.Date(comUpdateDate);\r\n\tcommOfferDate = d.format(dte3);\r\n}\r\nreturn comOffer+\"|\"+commOfferDate;"
Preprocessed Expression : String comOffer="";
String commOfferDate="";
java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
d.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));
if(COMMERCIAL_OFFER_LifeTime!=null && !COMMERCIAL_OFFER_LifeTime.isJsonNull() && COMMERCIAL_OFFER_LifeTime.entrySet().size()!=0){
    comOffer = COMMERCIAL_OFFER_LifeTime.get("currentCommercialOffer").getAsString();
	long comUpdateDate = COMMERCIAL_OFFER_LifeTime.get("updateDate").getAsLong();
	java.util.Date dte3 = new java.util.Date(comUpdateDate);
	commOfferDate = d.format(dte3);
}
return comOffer+"|"+commOfferDate;
line 1:0 no viable alternative at input 'String'
------------Infered params COMMERCIAL_OFFER_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getCommercialOfferUpdateDate" -- > "if(COMMERCIAL_OFFER_LifeTime!=null && !COMMERCIAL_OFFER_LifeTime.isJsonNull() && COMMERCIAL_OFFER_LifeTime.entrySet().size()!=0){\r\n\r\n  JsonElement updateDateJele = COMMERCIAL_OFFER_LifeTime.get(\"updateDate\");\r\nif(updateDateJele !=null)\r\n   return updateDateJele.getAsLong();\r\n}\r\nreturn 0L;"
Preprocessed Expression : if(COMMERCIAL_OFFER_LifeTime!=null && !COMMERCIAL_OFFER_LifeTime.isJsonNull() && COMMERCIAL_OFFER_LifeTime.entrySet().size()!=0){

  JsonElement updateDateJele = COMMERCIAL_OFFER_LifeTime.get("updateDate");
if(updateDateJele !=null)
   return updateDateJele.getAsLong();
}
return 0L;
line 1:0 no viable alternative at input 'if'
------------Infered params COMMERCIAL_OFFER_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getDaysSinceLastContact" -- > "long lastTriggerDateTime = 0l;\r\n\r\n\t\tif( category.equals( \"*\" ) ){\r\n\t\t\tif( offer.equals( \"*\" ) ){\r\n\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\tJsonElement contactSeriesEle = OFFER_COUNT_LifeTime.get( \"CONTACT_SERIES\" );\r\n\t\t\t\t\tif( contactSeriesEle != null && ! contactSeriesEle.isJsonNull() ) {\r\n\t\t\t\t\t\tJsonArray contactSeriesArray = contactSeriesEle.getAsJsonArray();\r\n\t\t\t\t\t\tlastTriggerDateTime = contactSeriesArray.get( contactSeriesArray.size() - 1 ).getAsLong();\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//else{\r\n\t\t\t\t\t// TODO: Days since last Channelwise contact\r\n\t\t\t\t\t//return -1;\r\n\t\t\t\t//}\r\n\t\t\t} else{\r\n\t\t\t\tString[] offerCategories = null;\r\n\t\t\t\tif( OFFER_CATEGORY == null || OFFER_CATEGORY.equals( \"\" ) ) {\r\n\t\t\t\t\tcom.google.gson.JsonElement offerCatEle = getSiftwareAttribute( \"Offer\", offer, \"category\" );\r\n\t\t\t\t\tif( offerCatEle == null || offerCatEle.isJsonNull() ) {\r\n\t\t\t\t\t\tofferCategories = new String[ 1 ];\r\n\t\t\t\t\t\tofferCategories[ 0 ] = \"GENERIC\";\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\tofferCategories = offerCatEle.getAsString().split( \",\" );\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tofferCategories = OFFER_CATEGORY.split( \",\" );\r\n\r\n\t\t\t\tboolean found = false;\r\n\t\t\t\tfor( int i = 0; i < offerCategories.length; i ++ ){\r\n\t\t\t\t\tString cat = offerCategories[ i ];\r\n\t\t\t\t\tJsonElement catele = OFFER_COUNT_LifeTime.get( cat );\r\n\t\t\t\t\tif( catele == null )\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\tJsonObject catObj = catele.getAsJsonObject();\r\n\t\t\t\t\tJsonElement catOfferEle = catObj.get( offer );\r\n\t\t\t\t\tif( catOfferEle == null )\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\tfound = true;\r\n\r\n\t\t\t\t\tJsonObject catOfferObj = catOfferEle.getAsJsonObject();\r\n\t\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\t\tJsonElement dateEle = catOfferObj.get( \"date_series\" );\r\n\t\t\t\t\t\tif( dateEle != null ) {\r\n\t\t\t\t\t\t\tJsonArray dateArr = dateEle.getAsJsonArray(); \r\n\t\t\t\t\t\t\tlastTriggerDateTime = dateArr.get( dateArr.size() - 1 ).getAsLong();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else{\r\n\t\t\t\t\t\tJsonElement channelEle = catOfferObj.get( channel + \"_date_series\" );\r\n\t\t\t\t\t\tif( channelEle != null ) {\r\n\t\t\t\t\t\t\tJsonArray dateArr = channelEle.getAsJsonArray(); \r\n\t\t\t\t\t\t\tlastTriggerDateTime = dateArr.get( dateArr.size() - 1 ).getAsLong();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//if( ! found ) return -1;\r\n\t\t\t}\r\n\t\t} else{\r\n\t\t\tJsonElement catEle = OFFER_COUNT_LifeTime.get( category );\r\n\t\t\tif( catEle != null && ! catEle.isJsonNull() ) {\r\n\t\t\t\tJsonObject catObj = catEle.getAsJsonObject();\r\n\t\t\tif( offer.equals( \"*\" ) ){\r\n\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\tJsonElement catDateEle = catObj.get( \"date_series\" );\r\n\t\t\t\t\tif( catDateEle != null && ! catDateEle.isJsonNull() ) {\r\n\t\t\t\t\t\tJsonArray catDateArr = catDateEle.getAsJsonArray();\r\n\t\t\t\t\t\tlastTriggerDateTime = catDateArr.get( catDateArr.size() - 1 ).getAsLong();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else{\r\n\t\t\t\t\tJsonElement catChannelDateEle = catObj.get( channel + \"_date_series\" );\r\n\t\t\t\t\tif( catChannelDateEle != null && ! catChannelDateEle.isJsonNull() ) {\r\n\t\t\t\t\t\tJsonArray catChannelDateArr = catChannelDateEle.getAsJsonArray();\r\n\t\t\t\t\t\tlastTriggerDateTime = catChannelDateArr.get( catChannelDateArr.size() - 1 ).getAsLong();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else{\r\n\t\t\t\tJsonElement catOfferEle = catObj.get( offer );\r\n\t\t\t\tif( catOfferEle != null && ! catOfferEle.isJsonNull() ) {\r\n\t\t\t\t\tJsonObject catOfferObj = catOfferEle.getAsJsonObject();\r\n\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\tJsonElement catOfferChannelEle = catOfferObj.get( \"date_series\" );\r\n\t\t\t\t\tif( catOfferChannelEle != null && ! catOfferChannelEle.isJsonNull() ) {\r\n\t\t\t\t\t\tJsonArray catOfferChannelArr = catOfferChannelEle.getAsJsonArray();\r\n\t\t\t\t\t\tlastTriggerDateTime = catOfferChannelArr.get( catOfferChannelArr.size() - 1 ).getAsLong();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else{\r\n\t\t\t\t\tJsonElement catOfferChannelEle = catOfferObj.get( channel + \"_date_series\" );\r\n\t\t\t\t\tif( catOfferChannelEle != null && ! catOfferChannelEle.isJsonNull() ) {\r\n\t\t\t\t\t\tJsonArray catOfferChannelArr = catOfferChannelEle.getAsJsonArray();\r\n\t\t\t\t\t\tlastTriggerDateTime = catOfferChannelArr.get( catOfferChannelArr.size() - 1 ).getAsLong();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tint daysDiff = -1;\r\n\t\tif( lastTriggerDateTime != 0 ) {\r\n\t\t\tlong ltoday = getCurrentDay() / 86400000;\r\n\t\t\tlastTriggerDateTime = ( lastTriggerDateTime - (lastTriggerDateTime % 86400000) ) / 86400000;\r\n\t\t\tdaysDiff = (int) ( ltoday - lastTriggerDateTime );\r\n\t\t}\r\n\t\t\r\n\t\tlong controlledDaysDiff = getDaysSinceLastControlledContact( category, offer, channel );\r\n\t\t\r\n\t\tif( daysDiff == -1 || ( daysDiff > controlledDaysDiff && controlledDaysDiff != -1 ) )\r\n\t\t\tdaysDiff = (int)controlledDaysDiff;\r\n\t\t\r\n\t\t//if( IS_SIMULATED.equals( \"true\" ) ) {\r\n\t\t\tlong simulatedDaysDiff = getDaysSinceLastSimulatedContact( category, offer, channel );\r\n\t\t\tif( daysDiff == -1 || ( daysDiff > simulatedDaysDiff && simulatedDaysDiff != -1 ) )\r\n\t\t\t\tdaysDiff = (int)simulatedDaysDiff;\r\n\t\t//}\r\n\t\treturn daysDiff;"
Preprocessed Expression : long lastTriggerDateTime = 0l;

		if( category.equals( "*" ) ){
			if( offer.equals( "*" ) ){
				if( channel.equals( "*" ) ){
					JsonElement contactSeriesEle = OFFER_COUNT_LifeTime.get( "CONTACT_SERIES" );
					if( contactSeriesEle != null && ! contactSeriesEle.isJsonNull() ) {
						JsonArray contactSeriesArray = contactSeriesEle.getAsJsonArray();
						lastTriggerDateTime = contactSeriesArray.get( contactSeriesArray.size() - 1 ).getAsLong();	
					}
				}
				//else{
					// TODO: Days since last Channelwise contact
					//return -1;
				//}
			} else{
				String[] offerCategories = null;
				if( OFFER_CATEGORY == null || OFFER_CATEGORY.equals( "" ) ) {
					com.google.gson.JsonElement offerCatEle =  SIFTMATH.getSiftwareAttribute( "Offer", offer, "category" );
					if( offerCatEle == null || offerCatEle.isJsonNull() ) {
						offerCategories = new String[ 1 ];
						offerCategories[ 0 ] = "GENERIC";
					} else
						offerCategories = offerCatEle.getAsString().split( "," );
				}
				else
					offerCategories = OFFER_CATEGORY.split( "," );

				boolean found = false;
				for( int i = 0; i < offerCategories.length; i ++ ){
					String cat = offerCategories[ i ];
					JsonElement catele = OFFER_COUNT_LifeTime.get( cat );
					if( catele == null )
						continue;

					JsonObject catObj = catele.getAsJsonObject();
					JsonElement catOfferEle = catObj.get( offer );
					if( catOfferEle == null )
						continue;

					found = true;

					JsonObject catOfferObj = catOfferEle.getAsJsonObject();
					if( channel.equals( "*" ) ){
						JsonElement dateEle = catOfferObj.get( "date_series" );
						if( dateEle != null ) {
							JsonArray dateArr = dateEle.getAsJsonArray(); 
							lastTriggerDateTime = dateArr.get( dateArr.size() - 1 ).getAsLong();
							break;
						}
					} else{
						JsonElement channelEle = catOfferObj.get( channel + "_date_series" );
						if( channelEle != null ) {
							JsonArray dateArr = channelEle.getAsJsonArray(); 
							lastTriggerDateTime = dateArr.get( dateArr.size() - 1 ).getAsLong();
							break;
						}
					}
				}
				//if( ! found ) return -1;
			}
		} else{
			JsonElement catEle = OFFER_COUNT_LifeTime.get( category );
			if( catEle != null && ! catEle.isJsonNull() ) {
				JsonObject catObj = catEle.getAsJsonObject();
			if( offer.equals( "*" ) ){
				if( channel.equals( "*" ) ){
					JsonElement catDateEle = catObj.get( "date_series" );
					if( catDateEle != null && ! catDateEle.isJsonNull() ) {
						JsonArray catDateArr = catDateEle.getAsJsonArray();
						lastTriggerDateTime = catDateArr.get( catDateArr.size() - 1 ).getAsLong();
					}
				} else{
					JsonElement catChannelDateEle = catObj.get( channel + "_date_series" );
					if( catChannelDateEle != null && ! catChannelDateEle.isJsonNull() ) {
						JsonArray catChannelDateArr = catChannelDateEle.getAsJsonArray();
						lastTriggerDateTime = catChannelDateArr.get( catChannelDateArr.size() - 1 ).getAsLong();
					}
				}
			} else{
				JsonElement catOfferEle = catObj.get( offer );
				if( catOfferEle != null && ! catOfferEle.isJsonNull() ) {
					JsonObject catOfferObj = catOfferEle.getAsJsonObject();
				if( channel.equals( "*" ) ){
					JsonElement catOfferChannelEle = catOfferObj.get( "date_series" );
					if( catOfferChannelEle != null && ! catOfferChannelEle.isJsonNull() ) {
						JsonArray catOfferChannelArr = catOfferChannelEle.getAsJsonArray();
						lastTriggerDateTime = catOfferChannelArr.get( catOfferChannelArr.size() - 1 ).getAsLong();
					}
				} else{
					JsonElement catOfferChannelEle = catOfferObj.get( channel + "_date_series" );
					if( catOfferChannelEle != null && ! catOfferChannelEle.isJsonNull() ) {
						JsonArray catOfferChannelArr = catOfferChannelEle.getAsJsonArray();
						lastTriggerDateTime = catOfferChannelArr.get( catOfferChannelArr.size() - 1 ).getAsLong();
					}
				}
			}
			}
			}
		}

		int daysDiff = -1;
		if( lastTriggerDateTime != 0 ) {
			long ltoday =  SIFTMATH.getCurrentDay() / 86400000;
			lastTriggerDateTime = ( lastTriggerDateTime - (lastTriggerDateTime % 86400000) ) / 86400000;
			daysDiff = (int) ( ltoday - lastTriggerDateTime );
		}
		
		long controlledDaysDiff =  SIFTMATH.execIntFunction("getDaysSinceLastControlledContact",  category, offer, channel );
		
		if( daysDiff == -1 || ( daysDiff > controlledDaysDiff && controlledDaysDiff != -1 ) )
			daysDiff = (int)controlledDaysDiff;
		
		//if( IS_SIMULATED.equals( "true" ) ) {
			long simulatedDaysDiff =  SIFTMATH.execIntFunction("getDaysSinceLastSimulatedContact",  category, offer, channel );
			if( daysDiff == -1 || ( daysDiff > simulatedDaysDiff && simulatedDaysDiff != -1 ) )
				daysDiff = (int)simulatedDaysDiff;
		//}
		return daysDiff;
line 1:0 no viable alternative at input 'long'
------------Infered params OFFER_COUNT_LifeTime -- com.google.gson.JsonObject -- JsonObject
------------Infered params OFFER_CATEGORY -- java.lang.String -- String
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getLatestBalanceUpdateDate" -- > "String lastBalTimestamp = \"NULL\";\r\nif(LATEST_BALANCE_LifeTime!=null && !LATEST_BALANCE_LifeTime.isJsonNull() && LATEST_BALANCE_LifeTime.entrySet().size()!=0){\r\nlong date = LATEST_BALANCE_LifeTime.get( \"timestamp\" ).getAsLong();\t\r\njava.util.Date dte= new java.util.Date(date);\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyyMMddHHmmss\");\r\nlastBalTimestamp = d.format(dte);\r\n}\r\nreturn lastBalTimestamp;"
Preprocessed Expression : String lastBalTimestamp = "NULL";
if(LATEST_BALANCE_LifeTime!=null && !LATEST_BALANCE_LifeTime.isJsonNull() && LATEST_BALANCE_LifeTime.entrySet().size()!=0){
long date = LATEST_BALANCE_LifeTime.get( "timestamp" ).getAsLong();	
java.util.Date dte= new java.util.Date(date);
java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
lastBalTimestamp = d.format(dte);
}
return lastBalTimestamp;
line 1:0 no viable alternative at input 'String'
------------Infered params LATEST_BALANCE_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getRechargeBlock" -- > "String latestRechargeDate = \"NULL\";\r\nString lastUsageDateInThisRecharge = \"\";\r\nString activeDaysInThisRecharge = \"\";\r\nString rechargeAmount = \"\";\r\nString changeInBalance = \"\";\r\nString rechargeMethod = \"\";\r\nlong latestRechrgDte = 0l;\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyyMMddHHmmss\");\r\nif(RECHARGE_BLOCK_SERIES_LifeTime!=null && !RECHARGE_BLOCK_SERIES_LifeTime.isJsonNull() && RECHARGE_BLOCK_SERIES_LifeTime.entrySet().size()!=0){\r\nJsonArray rechargeBlockArr = RECHARGE_BLOCK_SERIES_LifeTime.get(\"keys\").getAsJsonArray();\r\nif(rechargeBlockArr.size()!=0){\r\nlatestRechrgDte = rechargeBlockArr.get(rechargeBlockArr.size()-1).getAsLong();\r\njava.util.Date dte1= new java.util.Date(latestRechrgDte);\r\nlatestRechargeDate = d.format(dte1);\r\n}\r\nJsonObject obj = RECHARGE_BLOCK_SERIES_LifeTime.get(String.valueOf(latestRechrgDte)).getAsJsonObject();\r\nif(obj!=null && !obj.isJsonNull() && obj.entrySet().size()!=0){\r\n    if(obj.has(\"LAST_ACTIVITY_DATE\")){\r\n        long lastActivityDate = obj.get(\"LAST_ACTIVITY_DATE\").getAsLong();\r\n        java.util.Date dte2= new java.util.Date(lastActivityDate);\r\n        lastUsageDateInThisRecharge = d.format(dte2);\r\n}\r\n    if(obj.has(\"ACTIVE_DAYS\"))\r\n        activeDaysInThisRecharge = obj.get(\"ACTIVE_DAYS\").getAsString();\r\n    if(obj.has(\"RECHARGE_DATA\")) {   \r\n        JsonArray rechrgeData = obj.get(\"RECHARGE_DATA\").getAsJsonArray();\r\n        rechargeAmount = rechrgeData.get(0).getAsString();\r\n        changeInBalance = rechrgeData.get(1).getAsString();\r\n        rechargeMethod = rechrgeData.get(2).getAsString();\r\n}\r\n}\r\n}\r\nreturn latestRechargeDate + \"~\" + lastUsageDateInThisRecharge + \"~\" + activeDaysInThisRecharge + \"~\" + rechargeAmount + \"~\" + changeInBalance + \"~\" + rechargeMethod;"
Preprocessed Expression : String latestRechargeDate = "NULL";
String lastUsageDateInThisRecharge = "";
String activeDaysInThisRecharge = "";
String rechargeAmount = "";
String changeInBalance = "";
String rechargeMethod = "";
long latestRechrgDte = 0l;
java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
if(RECHARGE_BLOCK_SERIES_LifeTime!=null && !RECHARGE_BLOCK_SERIES_LifeTime.isJsonNull() && RECHARGE_BLOCK_SERIES_LifeTime.entrySet().size()!=0){
JsonArray rechargeBlockArr = RECHARGE_BLOCK_SERIES_LifeTime.get("keys").getAsJsonArray();
if(rechargeBlockArr.size()!=0){
latestRechrgDte = rechargeBlockArr.get(rechargeBlockArr.size()-1).getAsLong();
java.util.Date dte1= new java.util.Date(latestRechrgDte);
latestRechargeDate = d.format(dte1);
}
JsonObject obj = RECHARGE_BLOCK_SERIES_LifeTime.get(String.valueOf(latestRechrgDte)).getAsJsonObject();
if(obj!=null && !obj.isJsonNull() && obj.entrySet().size()!=0){
    if(obj.has("LAST_ACTIVITY_DATE")){
        long lastActivityDate = obj.get("LAST_ACTIVITY_DATE").getAsLong();
        java.util.Date dte2= new java.util.Date(lastActivityDate);
        lastUsageDateInThisRecharge = d.format(dte2);
}
    if(obj.has("ACTIVE_DAYS"))
        activeDaysInThisRecharge = obj.get("ACTIVE_DAYS").getAsString();
    if(obj.has("RECHARGE_DATA")) {   
        JsonArray rechrgeData = obj.get("RECHARGE_DATA").getAsJsonArray();
        rechargeAmount = rechrgeData.get(0).getAsString();
        changeInBalance = rechrgeData.get(1).getAsString();
        rechargeMethod = rechrgeData.get(2).getAsString();
}
}
}
return latestRechargeDate + "~" + lastUsageDateInThisRecharge + "~" + activeDaysInThisRecharge + "~" + rechargeAmount + "~" + changeInBalance + "~" + rechargeMethod;
line 1:0 no viable alternative at input 'String'
------------Infered params RECHARGE_BLOCK_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "isContactControlled" -- > "//fix this bug\r\nif( value == 0 ||COUNT_AS_CONTACT.equals(\"N\") )\r\n    return false;\r\nlong currentCount = getSummaryContactCount( \"*\", OFFER_ID, \"*\" ) +1 ;\r\n\r\nif ( controlType.equals(  \"modulus\" ) )\r\n        return currentCount % value == 0;\r\nelse if( controlType.equals(  \"percentage\" ) )\r\n    return currentCount % Math.round( ( 100 / value ) ) == 0;\r\n\r\nreturn  currentCount % Math.round( ( 100 / value ) ) == 0;"
Preprocessed Expression : //fix this bug
if( value == 0 ||COUNT_AS_CONTACT.equals("N") )
    return false;
long currentCount =  SIFTMATH.execLongFunction("getSummaryContactCount",  "*", OFFER_ID, "*" ) +1 ;

if ( controlType.equals(  "modulus" ) )
        return currentCount % value == 0;
else if( controlType.equals(  "percentage" ) )
    return currentCount % Math.round( ( 100 / value ) ) == 0;

return  currentCount % Math.round( ( 100 / value ) ) == 0;
line 2:0 no viable alternative at input 'if'
------------Infered params COUNT_AS_CONTACT -- java.lang.String -- String
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params OFFER_ID -- java.lang.String -- String
Compiling Function : "isOfferCooldown" -- > "int daysSinceLastContact = getDaysSinceLastContact( \"*\", OFFER_ID, \"*\" );\r\nif ( daysSinceLastContact != -1 && daysSinceLastContact <= numberOfDays )\r\nreturn true;\r\nelse \r\nreturn false;"
Preprocessed Expression : int daysSinceLastContact =  SIFTMATH.execIntFunction("getDaysSinceLastContact",  "*", OFFER_ID, "*" );
if ( daysSinceLastContact != -1 && daysSinceLastContact <= numberOfDays )
return true;
else 
return false;
line 1:0 no viable alternative at input 'int'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params OFFER_ID -- java.lang.String -- String
Compiling Function : "getActivityDetails" -- > "String lastActivitydate=\"\";\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\nd.setTimeZone(java.util.TimeZone.getTimeZone(\"GMT\"));\r\n//System.out.println(\"activity last date-->\"+ACCOUNT_STARTDATE_LifeTime);\r\nif(ACTIVITY_TIME_SERIES_LifeTime!=null && !ACTIVITY_TIME_SERIES_LifeTime.isJsonNull() && ACTIVITY_TIME_SERIES_LifeTime.size()>0){\r\n    long adate = ACTIVITY_TIME_SERIES_LifeTime.get(ACTIVITY_TIME_SERIES_LifeTime.size()-1).getAsLong();\r\n    java.util.Date dte2= new java.util.Date(adate);\r\n    lastActivitydate = d.format(dte2);\r\n}\r\nreturn lastActivitydate;"
Preprocessed Expression : String lastActivitydate="";
java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
d.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));
//System.out.println("activity last date-->"+ACCOUNT_STARTDATE_LifeTime);
if(ACTIVITY_TIME_SERIES_LifeTime!=null && !ACTIVITY_TIME_SERIES_LifeTime.isJsonNull() && ACTIVITY_TIME_SERIES_LifeTime.size()>0){
    long adate = ACTIVITY_TIME_SERIES_LifeTime.get(ACTIVITY_TIME_SERIES_LifeTime.size()-1).getAsLong();
    java.util.Date dte2= new java.util.Date(adate);
    lastActivitydate = d.format(dte2);
}
return lastActivitydate;
line 1:0 no viable alternative at input 'String'
------------Infered params ACTIVITY_TIME_SERIES_LifeTime -- com.google.gson.JsonArray -- JsonArray
Compiling Function : "getDaysSinceLastControlledContact" -- > "long lastTriggerDateTime = 0l;\r\n\r\n\t\tif( category.equals( \"*\" ) ){\r\n\t\t\tif( offer.equals( \"*\" ) ){\r\n\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\tJsonElement contactSeriesEle = OFFER_COUNT_LifeTime_Control.get( \"CONTACT_SERIES\" );\r\n\t\t\t\t\tif( contactSeriesEle == null || contactSeriesEle.isJsonNull() )\r\n\t\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\t\tJsonArray contactSeriesArray = contactSeriesEle.getAsJsonArray();\r\n\t\t\t\t\tlastTriggerDateTime = contactSeriesArray.get( contactSeriesArray.size() - 1 ).getAsLong();\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// TODO: Days since last Channelwise contact\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t} else{\r\n\t\t\t\tString[] offerCategories = null;\r\n\t\t\t\tif( OFFER_CATEGORY == null || OFFER_CATEGORY.equals( \"\" ) ) {\r\n\t\t\t\t\tcom.google.gson.JsonElement offerCatEle = getSiftwareAttribute( \"Offer\", offer, \"category\" );\r\n\t\t\t\t\tif( offerCatEle == null || offerCatEle.isJsonNull() ) {\r\n\t\t\t\t\t\tofferCategories = new String[ 1 ];\r\n\t\t\t\t\t\tofferCategories[ 0 ] = \"GENERIC\";\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\tofferCategories = offerCatEle.getAsString().split( \",\" );\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tofferCategories = OFFER_CATEGORY.split( \",\" );\r\n\r\n\t\t\t\tboolean found = false;\r\n\t\t\t\tfor( int i = 0; i < offerCategories.length; i ++ ){\r\n\t\t\t\t\tString cat = offerCategories[ i ];\r\n\t\t\t\t\tJsonElement catele = OFFER_COUNT_LifeTime_Control.get( cat );\r\n\t\t\t\t\tif( catele == null )\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\tJsonObject catObj = catele.getAsJsonObject();\r\n\t\t\t\t\tJsonElement catOfferEle = catObj.get( offer );\r\n\t\t\t\t\tif( catOfferEle == null )\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\tfound = true;\r\n\r\n\t\t\t\t\tJsonObject catOfferObj = catOfferEle.getAsJsonObject();\r\n\t\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\t\tJsonElement dateEle = catOfferObj.get( \"date_series\" );\r\n\t\t\t\t\t\tif( dateEle == null )\r\n\t\t\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\t\t\tJsonArray dateArr = dateEle.getAsJsonArray(); \r\n\t\t\t\t\t\tlastTriggerDateTime = dateArr.get( dateArr.size() - 1 ).getAsLong();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else{\r\n\t\t\t\t\t\tJsonElement channelEle = catOfferObj.get( channel + \"_date_series\" );\r\n\t\t\t\t\t\tif( channelEle == null )\r\n\t\t\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\t\t\tJsonArray dateArr = channelEle.getAsJsonArray(); \r\n\t\t\t\t\t\tlastTriggerDateTime = dateArr.get( dateArr.size() - 1 ).getAsLong();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif( ! found ) return -1;\r\n\t\t\t}\r\n\t\t} else{\r\n\t\t\tJsonElement catEle = OFFER_COUNT_LifeTime_Control.get( category );\r\n\t\t\tif( catEle == null || catEle.isJsonNull() )\r\n\t\t\t\treturn -1;\r\n\r\n\t\t\tJsonObject catObj = catEle.getAsJsonObject();\r\n\t\t\tif( offer.equals( \"*\" ) ){\r\n\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\tJsonElement catDateEle = catObj.get( \"date_series\" );\r\n\t\t\t\t\tif( catDateEle == null || catDateEle.isJsonNull() )\r\n\t\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\t\tJsonArray catDateArr = catDateEle.getAsJsonArray();\r\n\t\t\t\t\tlastTriggerDateTime = catDateArr.get( catDateArr.size() - 1 ).getAsLong();\r\n\t\t\t\t} else{\r\n\t\t\t\t\tJsonElement catChannelDateEle = catObj.get( channel + \"_date_series\" );\r\n\t\t\t\t\tif( catChannelDateEle == null || catChannelDateEle.isJsonNull() )\r\n\t\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\t\tJsonArray catChannelDateArr = catChannelDateEle.getAsJsonArray();\r\n\t\t\t\t\tlastTriggerDateTime = catChannelDateArr.get( catChannelDateArr.size() - 1 ).getAsLong();\r\n\t\t\t\t}\r\n\t\t\t} else{\r\n\t\t\t\tJsonElement catOfferEle = catObj.get( offer );\r\n\t\t\t\tif( catOfferEle == null || catOfferEle.isJsonNull() )\r\n\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\tJsonObject catOfferObj = catOfferEle.getAsJsonObject();\r\n\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\tJsonElement catOfferChannelEle = catOfferObj.get( \"date_series\" );\r\n\t\t\t\t\tif( catOfferChannelEle == null || catOfferChannelEle.isJsonNull() )\r\n\t\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\t\tJsonArray catOfferChannelArr = catOfferChannelEle.getAsJsonArray();\r\n\t\t\t\t\tlastTriggerDateTime = catOfferChannelArr.get( catOfferChannelArr.size() - 1 ).getAsLong();\r\n\t\t\t\t} else{\r\n\t\t\t\t\tJsonElement catOfferChannelEle = catOfferObj.get( channel + \"_date_series\" );\r\n\t\t\t\t\tif( catOfferChannelEle == null || catOfferChannelEle.isJsonNull() )\r\n\t\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\t\tJsonArray catOfferChannelArr = catOfferChannelEle.getAsJsonArray();\r\n\t\t\t\t\tlastTriggerDateTime = catOfferChannelArr.get( catOfferChannelArr.size() - 1 ).getAsLong();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif( lastTriggerDateTime == 0l )\r\n\t\t\treturn -1;\r\n\t\t\t\r\n\t\tlong ltoday = getCurrentDay() / 86400000;\r\n\t\tlastTriggerDateTime = ( lastTriggerDateTime - (lastTriggerDateTime % 86400000)) / 86400000;\r\n\t\treturn (int)( ltoday - lastTriggerDateTime);"
Preprocessed Expression : long lastTriggerDateTime = 0l;

		if( category.equals( "*" ) ){
			if( offer.equals( "*" ) ){
				if( channel.equals( "*" ) ){
					JsonElement contactSeriesEle = OFFER_COUNT_LifeTime_Control.get( "CONTACT_SERIES" );
					if( contactSeriesEle == null || contactSeriesEle.isJsonNull() )
						return -1;

					JsonArray contactSeriesArray = contactSeriesEle.getAsJsonArray();
					lastTriggerDateTime = contactSeriesArray.get( contactSeriesArray.size() - 1 ).getAsLong();				
				}
				else{
					// TODO: Days since last Channelwise contact
					return -1;
				}
			} else{
				String[] offerCategories = null;
				if( OFFER_CATEGORY == null || OFFER_CATEGORY.equals( "" ) ) {
					com.google.gson.JsonElement offerCatEle =  SIFTMATH.getSiftwareAttribute( "Offer", offer, "category" );
					if( offerCatEle == null || offerCatEle.isJsonNull() ) {
						offerCategories = new String[ 1 ];
						offerCategories[ 0 ] = "GENERIC";
					} else
						offerCategories = offerCatEle.getAsString().split( "," );
				}
				else
					offerCategories = OFFER_CATEGORY.split( "," );

				boolean found = false;
				for( int i = 0; i < offerCategories.length; i ++ ){
					String cat = offerCategories[ i ];
					JsonElement catele = OFFER_COUNT_LifeTime_Control.get( cat );
					if( catele == null )
						continue;

					JsonObject catObj = catele.getAsJsonObject();
					JsonElement catOfferEle = catObj.get( offer );
					if( catOfferEle == null )
						continue;

					found = true;

					JsonObject catOfferObj = catOfferEle.getAsJsonObject();
					if( channel.equals( "*" ) ){
						JsonElement dateEle = catOfferObj.get( "date_series" );
						if( dateEle == null )
							return -1;

						JsonArray dateArr = dateEle.getAsJsonArray(); 
						lastTriggerDateTime = dateArr.get( dateArr.size() - 1 ).getAsLong();
						break;
					} else{
						JsonElement channelEle = catOfferObj.get( channel + "_date_series" );
						if( channelEle == null )
							return -1;

						JsonArray dateArr = channelEle.getAsJsonArray(); 
						lastTriggerDateTime = dateArr.get( dateArr.size() - 1 ).getAsLong();
						break;
					}
				}
				if( ! found ) return -1;
			}
		} else{
			JsonElement catEle = OFFER_COUNT_LifeTime_Control.get( category );
			if( catEle == null || catEle.isJsonNull() )
				return -1;

			JsonObject catObj = catEle.getAsJsonObject();
			if( offer.equals( "*" ) ){
				if( channel.equals( "*" ) ){
					JsonElement catDateEle = catObj.get( "date_series" );
					if( catDateEle == null || catDateEle.isJsonNull() )
						return -1;

					JsonArray catDateArr = catDateEle.getAsJsonArray();
					lastTriggerDateTime = catDateArr.get( catDateArr.size() - 1 ).getAsLong();
				} else{
					JsonElement catChannelDateEle = catObj.get( channel + "_date_series" );
					if( catChannelDateEle == null || catChannelDateEle.isJsonNull() )
						return -1;

					JsonArray catChannelDateArr = catChannelDateEle.getAsJsonArray();
					lastTriggerDateTime = catChannelDateArr.get( catChannelDateArr.size() - 1 ).getAsLong();
				}
			} else{
				JsonElement catOfferEle = catObj.get( offer );
				if( catOfferEle == null || catOfferEle.isJsonNull() )
					return -1;

				JsonObject catOfferObj = catOfferEle.getAsJsonObject();
				if( channel.equals( "*" ) ){
					JsonElement catOfferChannelEle = catOfferObj.get( "date_series" );
					if( catOfferChannelEle == null || catOfferChannelEle.isJsonNull() )
						return -1;

					JsonArray catOfferChannelArr = catOfferChannelEle.getAsJsonArray();
					lastTriggerDateTime = catOfferChannelArr.get( catOfferChannelArr.size() - 1 ).getAsLong();
				} else{
					JsonElement catOfferChannelEle = catOfferObj.get( channel + "_date_series" );
					if( catOfferChannelEle == null || catOfferChannelEle.isJsonNull() )
						return -1;

					JsonArray catOfferChannelArr = catOfferChannelEle.getAsJsonArray();
					lastTriggerDateTime = catOfferChannelArr.get( catOfferChannelArr.size() - 1 ).getAsLong();
				}
			}
		}
		
		if( lastTriggerDateTime == 0l )
			return -1;
			
		long ltoday =  SIFTMATH.getCurrentDay() / 86400000;
		lastTriggerDateTime = ( lastTriggerDateTime - (lastTriggerDateTime % 86400000)) / 86400000;
		return (int)( ltoday - lastTriggerDateTime);
line 1:0 no viable alternative at input 'long'
------------Infered params OFFER_COUNT_LifeTime_Control -- com.google.gson.JsonObject -- JsonObject
------------Infered params OFFER_CATEGORY -- java.lang.String -- String
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getLoyaltyInfo" -- > "String cacId=\"\";\r\nString loyaltyStatus = \"\";\r\nString loyaltyStatusdate=\"\";\r\nif(!LOYALTY_STATUS_DATE_LifeTime.equals(\"null\") && !LOYALTY_STATUS_DATE_LifeTime.equals(\"-99\") && !LOYALTY_STATUS_DATE_LifeTime.isEmpty())\r\n{\r\n  String[] loyalty=LOYALTY_STATUS_DATE_LifeTime.split(\"\\\\|\",-1);\r\n if (loyalty.length>=2) {\r\n        loyaltyStatus = loyalty[0];\r\n        String loyaltydate = loyalty[1];\r\n        if (loyaltydate.length() >= 19)\r\n            loyaltyStatusdate = loyaltydate.substring(6,10) + \"-\" + loyaltydate.substring(0,2) + \"-\" + loyaltydate.substring(3,5) + \" \" + loyaltydate.substring(11,19);\r\n }\r\n}\r\ncacId = getCurrentCACID();\r\n\r\nreturn cacId +\"|\"+ loyaltyStatus +\"|\"+loyaltyStatusdate;"
Preprocessed Expression : String cacId="";
String loyaltyStatus = "";
String loyaltyStatusdate="";
if(!LOYALTY_STATUS_DATE_LifeTime.equals("null") && !LOYALTY_STATUS_DATE_LifeTime.equals("-99") && !LOYALTY_STATUS_DATE_LifeTime.isEmpty())
{
  String[] loyalty=LOYALTY_STATUS_DATE_LifeTime.split("\\|",-1);
 if (loyalty.length>=2) {
        loyaltyStatus = loyalty[0];
        String loyaltydate = loyalty[1];
        if (loyaltydate.length() >= 19)
            loyaltyStatusdate = loyaltydate.substring(6,10) + "-" + loyaltydate.substring(0,2) + "-" + loyaltydate.substring(3,5) + " " + loyaltydate.substring(11,19);
 }
}
cacId =  SIFTMATH.execStringFunction("getCurrentCACID" );

return cacId +"|"+ loyaltyStatus +"|"+loyaltyStatusdate;
line 1:0 no viable alternative at input 'String'
------------Infered params LOYALTY_STATUS_DATE_LifeTime -- java.lang.String -- String
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getPostalCode" -- > "if(POSTAL_CODE_LifeTime!=null && !POSTAL_CODE_LifeTime.equals(\"-99\"))\r\n{\r\nreturn POSTAL_CODE_LifeTime;\r\n}\r\nreturn \"\";"
Preprocessed Expression : if(POSTAL_CODE_LifeTime!=null && !POSTAL_CODE_LifeTime.equals("-99"))
{
return POSTAL_CODE_LifeTime;
}
return "";
line 1:0 no viable alternative at input 'if'
------------Infered params POSTAL_CODE_LifeTime -- java.lang.String -- String
Compiling Function : "isSubscriberMonitoredByCategory" -- > "if( OFFER_HISTORY_LifeTime != null && !OFFER_HISTORY_LifeTime.isJsonNull() && OFFER_HISTORY_LifeTime.entrySet().size() > 0 ) {\r\n\t\t\tlong currentTime = getCurrentTime();\r\n\t\t\tjava.util.Set< java.util.Map.Entry< String, JsonElement > > entrySet = OFFER_HISTORY_LifeTime.entrySet();\r\n\t\t\tfor( java.util.Map.Entry< String, JsonElement > entry : entrySet ) {\r\n\t\t\t\tString thiskey = entry.getKey().toString();\r\n\t\t\t\t\r\n\t\t\t\tJsonObject thisOffer = OFFER_HISTORY_LifeTime.get( thiskey ).getAsJsonObject();\r\n\t\t\t\t\r\n\t\t\t\t\tif( thisOffer.has(\"SELECTED_OFFER_CATEGORY\"))\r\n\t\t\t\t\t{ \r\n\t\t\t\t\t    String[] categories = (thisOffer.get(\"SELECTED_OFFER_CATEGORY\").getAsString()).split(\"\\\\,\",-1);\r\n                    for (int i=0; i < categories.length; i++)\r\n                    {\r\n\t\t\t\t//if( thisOffer.has(\"SELECTED_OFFER_CATEGORY\") && (thisOffer.get(\"SELECTED_OFFER_CATEGORY\").getAsString()).equals(category)  && thisOffer.has(\"IS_CONTROL\" ) && !thisOffer.get(\"IS_CONTROL\" ).getAsBoolean() && thisOffer.has( \"OFFER_END_DATE\" ) ) {\r\nif( categories.equals(category)  && thisOffer.has(\"IS_CONTROL\" ) && !thisOffer.get(\"IS_CONTROL\" ).getAsBoolean() && thisOffer.has( \"OFFER_END_DATE\" ) ) {\r\n\t\t\t\t\tlong offerEndDate = thisOffer.get( \"OFFER_END_DATE\" ).getAsLong();\r\n\t\t\t\t\tif( offerEndDate > currentTime ) {\r\n\t\t\t\t\t\t// check if the max fulfillment limits reached or not\r\n\t\t\t\t\t\t// check if the max fulfillment limits reached or not\r\n\t\t\t\t\t\t//to uncomment after checking with product team\r\n\t\t\t\t\t//\tString expKey = \"MAX_FULFILLMENTS_\" + thisOffer.get( \"OFFER_ID\" ).getAsString();\r\n\t\t\t\t\t//\tObject fulfilResult = evaluate;\r\n\t\t\t\t\t//\tif( fulfilResult.toString().equals( \"true\" ) ) \r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;"
Preprocessed Expression : if( OFFER_HISTORY_LifeTime != null && !OFFER_HISTORY_LifeTime.isJsonNull() && OFFER_HISTORY_LifeTime.entrySet().size() > 0 ) {
			long currentTime =  SIFTMATH.getCurrentTime();
			java.util.Set< java.util.Map.Entry< String, JsonElement > > entrySet = OFFER_HISTORY_LifeTime.entrySet();
			for( java.util.Map.Entry< String, JsonElement > entry : entrySet ) {
				String thiskey = entry.getKey().toString();
				
				JsonObject thisOffer = OFFER_HISTORY_LifeTime.get( thiskey ).getAsJsonObject();
				
					if( thisOffer.has("SELECTED_OFFER_CATEGORY"))
					{ 
					    String[] categories = (thisOffer.get("SELECTED_OFFER_CATEGORY").getAsString()).split("\\,",-1);
                    for (int i=0; i < categories.length; i++)
                    {
				//if( thisOffer.has("SELECTED_OFFER_CATEGORY") && (thisOffer.get("SELECTED_OFFER_CATEGORY").getAsString()).equals(category)  && thisOffer.has("IS_CONTROL" ) && !thisOffer.get("IS_CONTROL" ).getAsBoolean() && thisOffer.has( "OFFER_END_DATE" ) ) {
if( categories.equals(category)  && thisOffer.has("IS_CONTROL" ) && !thisOffer.get("IS_CONTROL" ).getAsBoolean() && thisOffer.has( "OFFER_END_DATE" ) ) {
					long offerEndDate = thisOffer.get( "OFFER_END_DATE" ).getAsLong();
					if( offerEndDate > currentTime ) {
						// check if the max fulfillment limits reached or not
						// check if the max fulfillment limits reached or not
						//to uncomment after checking with product team
					//	String expKey = "MAX_FULFILLMENTS_" + thisOffer.get( "OFFER_ID" ).getAsString();
					//	Object fulfilResult = evaluate;
					//	if( fulfilResult.toString().equals( "true" ) ) 
							return true;
					}
				}
					}
				}
			}
		}
		return false;
line 1:0 no viable alternative at input 'if'
------------Infered params OFFER_HISTORY_LifeTime -- com.google.gson.JsonObject -- JsonObject
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getPrepaidUserType" -- > "if(PREPAID_USER_TYPE_LifeTime!=null && !PREPAID_USER_TYPE_LifeTime.equals(\"-99\"))\r\n{\r\n    return PREPAID_USER_TYPE_LifeTime;\r\n}\r\nreturn \"\";"
Preprocessed Expression : if(PREPAID_USER_TYPE_LifeTime!=null && !PREPAID_USER_TYPE_LifeTime.equals("-99"))
{
    return PREPAID_USER_TYPE_LifeTime;
}
return "";
line 1:0 no viable alternative at input 'if'
------------Infered params PREPAID_USER_TYPE_LifeTime -- java.lang.String -- String
Compiling Function : "isSubscriberMonitored" -- > "if( OFFER_HISTORY_LifeTime != null && OFFER_HISTORY_LifeTime.entrySet().size() > 0 ) {\r\n\t\t\tlong currentTime = getCurrentTime();\r\n\t\t\tjava.util.Set< java.util.Map.Entry< String, JsonElement > > entrySet = OFFER_HISTORY_LifeTime.entrySet();\r\n\t\t\tfor( java.util.Map.Entry< String, JsonElement > entry : entrySet ) {\r\n\t\t\t\tString thiskey = entry.getKey().toString();\r\n\t\t\t\t\r\n\t\t\t\tJsonObject thisOffer = OFFER_HISTORY_LifeTime.get( thiskey ).getAsJsonObject();\r\n\t\t\t\t\r\n\r\n\t\t\t\tif( thisOffer.has(\"IS_CONTROL\" ) && !thisOffer.get(\"IS_CONTROL\" ).getAsBoolean() && thisOffer.has( \"OFFER_END_DATE\" ) ) {\r\n\t\t\t\t\tlong offerEndDate = thisOffer.get( \"OFFER_END_DATE\" ).getAsLong();\r\n\t\t\t\t\tif( offerEndDate > currentTime ) {\r\n\t\t\t\t\t\t// check if the max fulfillment limits reached or not\r\n\t\t\t\t\t\t// check if the max fulfillment limits reached or not\r\n\t\t\t\t\t\t// To uncomment after checking with product team regarding the validation error\r\n\t\t\t\t\t//\tString expKey = \"MAX_FULFILLMENTS_\" + thisOffer.get( \"OFFER_ID\" ).getAsString();\r\n\t\t\t\t    //\tObject fulfilResult = evaluate;\r\n\t\t\t\t\t//\tif( fulfilResult.toString().equals( \"true\" ) ) \r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;"
Preprocessed Expression : if( OFFER_HISTORY_LifeTime != null && OFFER_HISTORY_LifeTime.entrySet().size() > 0 ) {
			long currentTime =  SIFTMATH.getCurrentTime();
			java.util.Set< java.util.Map.Entry< String, JsonElement > > entrySet = OFFER_HISTORY_LifeTime.entrySet();
			for( java.util.Map.Entry< String, JsonElement > entry : entrySet ) {
				String thiskey = entry.getKey().toString();
				
				JsonObject thisOffer = OFFER_HISTORY_LifeTime.get( thiskey ).getAsJsonObject();
				

				if( thisOffer.has("IS_CONTROL" ) && !thisOffer.get("IS_CONTROL" ).getAsBoolean() && thisOffer.has( "OFFER_END_DATE" ) ) {
					long offerEndDate = thisOffer.get( "OFFER_END_DATE" ).getAsLong();
					if( offerEndDate > currentTime ) {
						// check if the max fulfillment limits reached or not
						// check if the max fulfillment limits reached or not
						// To uncomment after checking with product team regarding the validation error
					//	String expKey = "MAX_FULFILLMENTS_" + thisOffer.get( "OFFER_ID" ).getAsString();
				    //	Object fulfilResult = evaluate;
					//	if( fulfilResult.toString().equals( "true" ) ) 
							return true;
					}
				}
			}
		}
		return false;
line 1:0 no viable alternative at input 'if'
------------Infered params OFFER_HISTORY_LifeTime -- com.google.gson.JsonObject -- JsonObject
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getCurrentMonitoringActions" -- > "JsonArray currentlyMonitored = isCurrentlyMonitored();\r\nif (currentlyMonitored!=null && !currentlyMonitored.isJsonNull() && currentlyMonitored.size() >0){\r\n    return (currentlyMonitored.get(5).getAsString());\r\n}\r\nreturn \"\";"
Preprocessed Expression : JsonArray currentlyMonitored =  SIFTMATH.execJsonArrayFunction("isCurrentlyMonitored" );
if (currentlyMonitored!=null && !currentlyMonitored.isJsonNull() && currentlyMonitored.size() >0){
    return (currentlyMonitored.get(5).getAsString());
}
return "";
line 1:0 no viable alternative at input 'JsonArray'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getOpoloPayloadAttribute" -- > "String value = \"\";\r\nif(RECORD_TYPE.equals(\"REGISTER_ACTION\") && SIFT_INTERNAL_RECORD_TYPE.equals(\"ContactCount\")) {\r\n\tif(payloads.equals(\"PARENT_FLOW_ID\") && !PARENT_FLOWID.equals(\"-99\")) {\r\n\t\tvalue = PARENT_FLOWID;\r\n\t}else if(payloads.equals(\"PARENT_JOURNEY_ID\") && !JOURNEY_ID.equals(\"-99\")){\r\n\t\tvalue = JOURNEY_ID;\r\n\t}else if(payloads.equals(\"ORIGINAL_DEFINITION_KEY\") && !JOURNEY_ID.equals(\"-99\")) {\r\n\t\tvalue= getOriginalDefinitionKey(JOURNEY_ID);\r\n\t}\r\n\telse if(payloads.equals(\"REFERENCE_ID\") && !JOURNEY_ID.equals(\"-99\")) {\r\n\t\tvalue= REFERENCE_ID;\r\n\t}\r\n\telse if(payloads.equals(\"COMMS_ID\") && !JOURNEY_ID.equals(\"-99\")) {\r\n\t\tvalue= COMMS_ID;\r\n\t}\r\n\telse if(payloads.equals(\"ACTIVITY_INSTANCE_ID\") && !JOURNEY_ID.equals(\"-99\")) {\r\n\t\tvalue= ACTIVITY_INSTANCE_ID;\r\n\t}\r\n\t\telse if(payloads.equals(\"COMMS_CHANNEL\") && !JOURNEY_ID.equals(\"-99\")) {\r\n\t\tvalue= COMMS_CHANNEL;\r\n\t}\r\n\t\t\r\n\t\telse if(payloads.equals(\"ACTIVITY_VERSION_ID\") && !JOURNEY_ID.equals(\"-99\")) {\r\n\t\tvalue= ACTIVITY_VERSION_ID;\r\n\t}\r\n\t\telse if(payloads.equals(\"IS_SILENT\") && !JOURNEY_ID.equals(\"-99\")) {\r\n\t\tvalue= String.valueOf(IS_SILENT);\r\n\t}\r\n\t\t\r\n}else if(OPOLO_PAYLOAD_LifeTime !=null && !OPOLO_PAYLOAD_LifeTime.isJsonNull() && OPOLO_PAYLOAD_LifeTime.entrySet().size()!=0) {\r\n\tString key = PROGRAM_ID+\"-\"+ OFFER_ID;\r\n\tif( OPOLO_PAYLOAD_LifeTime.has(key)) {\r\n\t\t\tJsonObject attributes = OPOLO_PAYLOAD_LifeTime.getAsJsonObject(key);\r\n\t\t\tif (attributes !=null && !attributes.isJsonNull() && attributes.entrySet().size()!=0) {\r\njava.util.Iterator< java.util.Map.Entry< String, JsonObject > > iter = attributes.entrySet().iterator();\r\n\t\t\tjava.util.Map.Entry< String, JsonObject >  elemEntry = ( java.util.Map.Entry )iter.next();\r\n\t\t\tString Key_2=(String) elemEntry.getKey();\r\n\t\t\tJsonArray attributes_1= (JsonArray) elemEntry.getValue();\t\r\n\t\t\tif(payloads.equals(\"PARENT_FLOW_ID\")) {\r\n\t\t\t\tvalue = Key_2;\r\n\t\t\t}else if(payloads.equals(\"PARENT_JOURNEY_ID\") && attributes_1.size()>=1){\r\n\t\t\t\tvalue = attributes_1.get(0).getAsString();\r\n\t\t\t}else if(payloads.equals(\"ORIGINAL_DEFINITION_KEY\") && attributes_1.size()>=2) {\r\n\t\t\t\tvalue = attributes_1.get(1).getAsString();\r\n\t\t\t}else if(payloads.equals(\"REFERENCE_ID\") && attributes_1.size()>=4) {\r\n\t\t\t\tvalue = attributes_1.get(3).getAsString();\r\n\t\t\t}else if(payloads.equals(\"COMMS_ID\") && attributes_1.size()>=5) {\r\n\t\t\t\tvalue = attributes_1.get(4).getAsString();\r\n\t\t\t}else if(payloads.equals(\"ACTIVITY_INSTANCE_ID\") && attributes_1.size()>=6) {\r\n\t\t\t\tvalue = attributes_1.get(5).getAsString();\r\n\t\t\t}else if(payloads.equals(\"COMMS_CHANNEL\") && attributes_1.size()>=7 ) {\r\n\t\t\t\tvalue = attributes_1.get(6).getAsString();\r\n\t\t\t}else if(payloads.equals(\"ACTIVITY_VERSION_ID\") && attributes_1.size()>=8) {\r\n\t\t\t\tvalue = attributes_1.get(7).getAsString();\r\n\t\t\t}else if(payloads.equals(\"IS_SILENT\") && attributes_1.size()>=9) {\r\n\t\t\t\tvalue = attributes_1.get(8).getAsString();\t\r\n\t\t\t}\t\t\r\n\t}\r\n\t}\r\n}\r\n return value;"
Preprocessed Expression : String value = "";
if(RECORD_TYPE.equals("REGISTER_ACTION") && SIFT_INTERNAL_RECORD_TYPE.equals("ContactCount")) {
	if(payloads.equals("PARENT_FLOW_ID") && !PARENT_FLOWID.equals("-99")) {
		value = PARENT_FLOWID;
	}else if(payloads.equals("PARENT_JOURNEY_ID") && !JOURNEY_ID.equals("-99")){
		value = JOURNEY_ID;
	}else if(payloads.equals("ORIGINAL_DEFINITION_KEY") && !JOURNEY_ID.equals("-99")) {
		value=  SIFTMATH.execStringFunction("getOriginalDefinitionKey", JOURNEY_ID);
	}
	else if(payloads.equals("REFERENCE_ID") && !JOURNEY_ID.equals("-99")) {
		value= REFERENCE_ID;
	}
	else if(payloads.equals("COMMS_ID") && !JOURNEY_ID.equals("-99")) {
		value= COMMS_ID;
	}
	else if(payloads.equals("ACTIVITY_INSTANCE_ID") && !JOURNEY_ID.equals("-99")) {
		value= ACTIVITY_INSTANCE_ID;
	}
		else if(payloads.equals("COMMS_CHANNEL") && !JOURNEY_ID.equals("-99")) {
		value= COMMS_CHANNEL;
	}
		
		else if(payloads.equals("ACTIVITY_VERSION_ID") && !JOURNEY_ID.equals("-99")) {
		value= ACTIVITY_VERSION_ID;
	}
		else if(payloads.equals("IS_SILENT") && !JOURNEY_ID.equals("-99")) {
		value= String.valueOf(IS_SILENT);
	}
		
}else if(OPOLO_PAYLOAD_LifeTime !=null && !OPOLO_PAYLOAD_LifeTime.isJsonNull() && OPOLO_PAYLOAD_LifeTime.entrySet().size()!=0) {
	String key = PROGRAM_ID+"-"+ OFFER_ID;
	if( OPOLO_PAYLOAD_LifeTime.has(key)) {
			JsonObject attributes = OPOLO_PAYLOAD_LifeTime.getAsJsonObject(key);
			if (attributes !=null && !attributes.isJsonNull() && attributes.entrySet().size()!=0) {
java.util.Iterator< java.util.Map.Entry< String, JsonObject > > iter = attributes.entrySet().iterator();
			java.util.Map.Entry< String, JsonObject >  elemEntry = ( java.util.Map.Entry )iter.next();
			String Key_2=(String) elemEntry.getKey();
			JsonArray attributes_1= (JsonArray) elemEntry.getValue();	
			if(payloads.equals("PARENT_FLOW_ID")) {
				value = Key_2;
			}else if(payloads.equals("PARENT_JOURNEY_ID") && attributes_1.size()>=1){
				value = attributes_1.get(0).getAsString();
			}else if(payloads.equals("ORIGINAL_DEFINITION_KEY") && attributes_1.size()>=2) {
				value = attributes_1.get(1).getAsString();
			}else if(payloads.equals("REFERENCE_ID") && attributes_1.size()>=4) {
				value = attributes_1.get(3).getAsString();
			}else if(payloads.equals("COMMS_ID") && attributes_1.size()>=5) {
				value = attributes_1.get(4).getAsString();
			}else if(payloads.equals("ACTIVITY_INSTANCE_ID") && attributes_1.size()>=6) {
				value = attributes_1.get(5).getAsString();
			}else if(payloads.equals("COMMS_CHANNEL") && attributes_1.size()>=7 ) {
				value = attributes_1.get(6).getAsString();
			}else if(payloads.equals("ACTIVITY_VERSION_ID") && attributes_1.size()>=8) {
				value = attributes_1.get(7).getAsString();
			}else if(payloads.equals("IS_SILENT") && attributes_1.size()>=9) {
				value = attributes_1.get(8).getAsString();	
			}		
	}
	}
}
 return value;
line 1:0 no viable alternative at input 'String'
------------Infered params RECORD_TYPE -- java.lang.String -- String
------------Infered params SIFT_INTERNAL_RECORD_TYPE -- java.lang.String -- String
------------Infered params PARENT_FLOWID -- java.lang.String -- String
------------Infered params JOURNEY_ID -- java.lang.String -- String
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params REFERENCE_ID -- java.lang.String -- String
------------Infered params COMMS_ID -- java.lang.String -- String
------------Infered params ACTIVITY_INSTANCE_ID -- java.lang.String -- String
------------Infered params COMMS_CHANNEL -- java.lang.String -- String
------------Infered params ACTIVITY_VERSION_ID -- java.lang.String -- String
------------Infered params IS_SILENT -- java.lang.Boolean -- Boolean
------------Infered params OPOLO_PAYLOAD_LifeTime -- com.google.gson.JsonObject -- JsonObject
------------Infered params PROGRAM_ID -- java.lang.String -- String
------------Infered params OFFER_ID -- java.lang.String -- String
Compiling Function : "isAutoRechargeEnable" -- > "boolean result=false;\r\nJsonObject ExpiryBased = null;\r\nif(AUTO_RECHARGE_LifeTime!=null && !AUTO_RECHARGE_LifeTime.isJsonNull()){\r\nif (Type.equalsIgnoreCase(\"ExpiryBased\")||Type.equalsIgnoreCase(\"ANY\")) {\r\nif(AUTO_RECHARGE_LifeTime.has(\"ExpiryBased\")) {\r\nExpiryBased = AUTO_RECHARGE_LifeTime.get(\"ExpiryBased\").getAsJsonObject();\r\nif(ExpiryBased.has(\"state\")) {\r\nif(ExpiryBased.get(\"state\").getAsString().equals(\"enable\"))\r\nresult=true;\t} \r\n}}\r\nif (Type.equalsIgnoreCase(\"SDOM\")|| Type.equalsIgnoreCase(\"ANY\")){ \r\nif(AUTO_RECHARGE_LifeTime.has(\"SDOM\")){ \r\nif(AUTO_RECHARGE_LifeTime.get(\"SDOM\").getAsLong()>=(getCurrentTime()-(31 * 86400000L)))\r\nresult=true;}}\r\nif (Type.equalsIgnoreCase(\"LCPT\")||Type.equalsIgnoreCase(\"ANY\")){\r\nif(AUTO_RECHARGE_LifeTime.has(\"LCPT\")){ \r\nif(AUTO_RECHARGE_LifeTime.get(\"LCPT\").getAsLong()>=(getCurrentTime()-(365 * 86400000L)))\r\nresult=true;}}\r\n}return result;"
Preprocessed Expression : boolean result=false;
JsonObject ExpiryBased = null;
if(AUTO_RECHARGE_LifeTime!=null && !AUTO_RECHARGE_LifeTime.isJsonNull()){
if (Type.equalsIgnoreCase("ExpiryBased")||Type.equalsIgnoreCase("ANY")) {
if(AUTO_RECHARGE_LifeTime.has("ExpiryBased")) {
ExpiryBased = AUTO_RECHARGE_LifeTime.get("ExpiryBased").getAsJsonObject();
if(ExpiryBased.has("state")) {
if(ExpiryBased.get("state").getAsString().equals("enable"))
result=true;	} 
}}
if (Type.equalsIgnoreCase("SDOM")|| Type.equalsIgnoreCase("ANY")){ 
if(AUTO_RECHARGE_LifeTime.has("SDOM")){ 
if(AUTO_RECHARGE_LifeTime.get("SDOM").getAsLong()>=( SIFTMATH.getCurrentTime()-(31 * 86400000L)))
result=true;}}
if (Type.equalsIgnoreCase("LCPT")||Type.equalsIgnoreCase("ANY")){
if(AUTO_RECHARGE_LifeTime.has("LCPT")){ 
if(AUTO_RECHARGE_LifeTime.get("LCPT").getAsLong()>=( SIFTMATH.getCurrentTime()-(365 * 86400000L)))
result=true;}}
}return result;
line 1:0 no viable alternative at input 'boolean'
------------Infered params AUTO_RECHARGE_LifeTime -- com.google.gson.JsonObject -- JsonObject
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getCurrentMonitoringOptinKeywords" -- > "JsonArray currentlyMonitored = isCurrentlyMonitored();\r\nif (currentlyMonitored!=null && !currentlyMonitored.isJsonNull() && currentlyMonitored.size() >0){\r\n    return (currentlyMonitored.get(6).getAsString());\r\n}\r\nreturn \"\";"
Preprocessed Expression : JsonArray currentlyMonitored =  SIFTMATH.execJsonArrayFunction("isCurrentlyMonitored" );
if (currentlyMonitored!=null && !currentlyMonitored.isJsonNull() && currentlyMonitored.size() >0){
    return (currentlyMonitored.get(6).getAsString());
}
return "";
line 1:0 no viable alternative at input 'JsonArray'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "transformTtypeDateTimeToLong" -- > "long finalDateTime = -1;\r\n\t\ttry {\r\n\t\t\tif( !dateTime.isEmpty() && dateTime.length() == 20 ) {\r\n\t\t\t    if(\"-99\".equals(dateTime)){\r\n\t\t\t        return 0L;\r\n\t\t\t    }\r\n\t\t\t\tlong offset = new java.util.Date().getTime();\r\n\t\t\t\toffset = java.util.TimeZone.getDefault().getOffset( offset );\r\n\t\t\t\tString dateTimePart = dateTime.substring( 0, 15 );\r\n\t\t\t\tdateTimePart = dateTimePart.replace( \"T\", \"\" );\r\n\t\t\t\tchar operator = dateTime.charAt( 15 );\r\n\t\t\t\tint hours = Integer.parseInt( dateTime.substring( 16, 18 ) );\r\n\t\t\t\tint mins = Integer.parseInt( dateTime.substring( 18, 20 ) );\r\n\t\t\t\tString format = \"yyyyMMddHHmmss\";\r\n\t\t\t\tjava.text.SimpleDateFormat SDF = new java.text.SimpleDateFormat( format );\r\n\t\t\t\tSDF.setTimeZone( java.util.TimeZone.getTimeZone( \"GMT\" ) );\r\n\t\t\t\tjava.util.Date date;\r\n\t\t\t\tif( dateTimePart.length() != format.length() )\r\n\t\t\t\t\tthrow new Exception();\r\n\t\t\t\tdate = SDF.parse( dateTimePart );\r\n\t\t\t\tif( operator == '+' ) {\r\n\t\t\t\t\tfinalDateTime = date.getTime() + offset - ( hours * 3600 * 1000 ) - ( mins * 60 * 1000 );\r\n\t\t\t\t}else {\r\n\t\t\t\t\tfinalDateTime = date.getTime() + offset + ( hours * 3600 * 1000 ) + ( mins * 60 * 1000 ) ;\r\n\t\t\t\t}\r\n\t\t\t\tif( finalDateTime < 0 )\r\n\t\t\t\t\tthrow new Exception();\r\n\t\t\t\treturn finalDateTime;\r\n\t\t\t}else {\r\n\t\t\t\tthrow new SiftFeedRejectException( \"DateTime length should be greater than or equal to 20\" );\r\n\t\t\t}\r\n\t\t}catch( Exception e ) {\r\n\t\t\tthrow new Exception();\r\n\t\t}"
Preprocessed Expression : long finalDateTime = -1;
		try {
			if( !dateTime.isEmpty() && dateTime.length() == 20 ) {
			    if("-99".equals(dateTime)){
			        return 0L;
			    }
				long offset = new java.util.Date().getTime();
				offset = java.util.TimeZone.getDefault().getOffset( offset );
				String dateTimePart = dateTime.substring( 0, 15 );
				dateTimePart = dateTimePart.replace( "T", "" );
				char operator = dateTime.charAt( 15 );
				int hours = Integer.parseInt( dateTime.substring( 16, 18 ) );
				int mins = Integer.parseInt( dateTime.substring( 18, 20 ) );
				String format = "yyyyMMddHHmmss";
				java.text.SimpleDateFormat SDF = new java.text.SimpleDateFormat( format );
				SDF.setTimeZone( java.util.TimeZone.getTimeZone( "GMT" ) );
				java.util.Date date;
				if( dateTimePart.length() != format.length() )
					throw new Exception();
				date = SDF.parse( dateTimePart );
				if( operator == '+' ) {
					finalDateTime = date.getTime() + offset - ( hours * 3600 * 1000 ) - ( mins * 60 * 1000 );
				}else {
					finalDateTime = date.getTime() + offset + ( hours * 3600 * 1000 ) + ( mins * 60 * 1000 ) ;
				}
				if( finalDateTime < 0 )
					throw new Exception();
				return finalDateTime;
			}else {
				throw new SiftFeedRejectException( "DateTime length should be greater than or equal to 20" );
			}
		}catch( Exception e ) {
			throw new Exception();
		}
line 1:0 no viable alternative at input 'long'
Compiling Function : "getBoostEventDefinitionKey" -- > "if(SIFT_INTERNAL_RECORD_TYPE.equals(\"ContactCount\") && RECORD_TYPE.equals(\"REGISTER_ACTION\"))\r\nreturn \"\";\r\nreturn \"\";"
Preprocessed Expression : if(SIFT_INTERNAL_RECORD_TYPE.equals("ContactCount") && RECORD_TYPE.equals("REGISTER_ACTION"))
return "";
return "";
line 1:0 no viable alternative at input 'if'
------------Infered params SIFT_INTERNAL_RECORD_TYPE -- java.lang.String -- String
------------Infered params RECORD_TYPE -- java.lang.String -- String
Compiling Function : "isEligibleForPreDormancyFulfilment" -- > "int daysSinceOfferHH_IM_PD_LR_3A_OfferFulfil = (int)getDaysSinceOfferTriggered(\"BESTOWAL_NOTIFICATION_PROGRAM\",\"HH_IM_PD_LR_3A_OFFER\",\"fulfil\");\r\nint daysSinceOfferHH_IM_PD_LR_3B_OfferFulfil = (int)getDaysSinceOfferTriggered(\"BESTOWAL_NOTIFICATION_PROGRAM\",\"HH_IM_PD_LR_3B_OFFER\",\"fulfil\");\r\nint daysSinceOfferHH_IM_PD_LR_3C_OfferFulfil = (int)getDaysSinceOfferTriggered(\"BESTOWAL_NOTIFICATION_PROGRAM\",\"HH_IM_PD_LR_3C_OFFER\",\"fulfil\");\r\n\r\nif((daysSinceOfferHH_IM_PD_LR_3A_OfferFulfil!=-1 && daysSinceOfferHH_IM_PD_LR_3A_OfferFulfil <=85 )|| (daysSinceOfferHH_IM_PD_LR_3B_OfferFulfil!=-1 && daysSinceOfferHH_IM_PD_LR_3B_OfferFulfil<=85) ||  (daysSinceOfferHH_IM_PD_LR_3C_OfferFulfil!=-1 && daysSinceOfferHH_IM_PD_LR_3C_OfferFulfil<=85) ){\r\n\tint HH_IM_PD_LR_3A_Offer_count =0;\r\n\tint HH_IM_PD_LR_3B_Offer_count = 0;\r\n\tint HH_IM_PD_LR_3C_Offer_count = 0;\r\n\tif(LATEST_OFFER_FULFILMENT_COUNTS.has( \"BESTOWAL_NOTIFICATION_PROGRAM-HH_IM_PD_LR_3A_OFFER\"))\r\n\t\tHH_IM_PD_LR_3A_Offer_count= LATEST_OFFER_FULFILMENT_COUNTS.get( \"BESTOWAL_NOTIFICATION_PROGRAM-HH_IM_PD_LR_3A_OFFER\" ).getAsInt();\r\n\tif(LATEST_OFFER_FULFILMENT_COUNTS.has( \"BESTOWAL_NOTIFICATION_PROGRAM-HH_IM_PD_LR_3B_OFFER\"))\r\n\t\tHH_IM_PD_LR_3B_Offer_count = LATEST_OFFER_FULFILMENT_COUNTS.get( \"BESTOWAL_NOTIFICATION_PROGRAM-HH_IM_PD_LR_3B_OFFER\" ).getAsInt();\r\n\tif(LATEST_OFFER_FULFILMENT_COUNTS.has( \"BESTOWAL_NOTIFICATION_PROGRAM-HH_IM_PD_LR_3C_OFFER\"))\r\n\t\tHH_IM_PD_LR_3B_Offer_count = LATEST_OFFER_FULFILMENT_COUNTS.get( \"BESTOWAL_NOTIFICATION_PROGRAM-HH_IM_PD_LR_3C_OFFER\" ).getAsInt();\r\n\t\t\r\n\t if ((HH_IM_PD_LR_3A_Offer_count < 3 && HH_IM_PD_LR_3A_Offer_count >=1) || (HH_IM_PD_LR_3B_Offer_count < 3 && HH_IM_PD_LR_3B_Offer_count >=1) || (HH_IM_PD_LR_3C_Offer_count < 3 && HH_IM_PD_LR_3C_Offer_count >=1)) {\r\n\t     return true;\r\n\t }\r\n}\r\nreturn false;"
Preprocessed Expression : int daysSinceOfferHH_IM_PD_LR_3A_OfferFulfil = (int) SIFTMATH.getDaysSinceOfferTriggered("BESTOWAL_NOTIFICATION_PROGRAM","HH_IM_PD_LR_3A_OFFER","fulfil");
int daysSinceOfferHH_IM_PD_LR_3B_OfferFulfil = (int) SIFTMATH.getDaysSinceOfferTriggered("BESTOWAL_NOTIFICATION_PROGRAM","HH_IM_PD_LR_3B_OFFER","fulfil");
int daysSinceOfferHH_IM_PD_LR_3C_OfferFulfil = (int) SIFTMATH.getDaysSinceOfferTriggered("BESTOWAL_NOTIFICATION_PROGRAM","HH_IM_PD_LR_3C_OFFER","fulfil");

if((daysSinceOfferHH_IM_PD_LR_3A_OfferFulfil!=-1 && daysSinceOfferHH_IM_PD_LR_3A_OfferFulfil <=85 )|| (daysSinceOfferHH_IM_PD_LR_3B_OfferFulfil!=-1 && daysSinceOfferHH_IM_PD_LR_3B_OfferFulfil<=85) ||  (daysSinceOfferHH_IM_PD_LR_3C_OfferFulfil!=-1 && daysSinceOfferHH_IM_PD_LR_3C_OfferFulfil<=85) ){
	int HH_IM_PD_LR_3A_Offer_count =0;
	int HH_IM_PD_LR_3B_Offer_count = 0;
	int HH_IM_PD_LR_3C_Offer_count = 0;
	if(LATEST_OFFER_FULFILMENT_COUNTS.has( "BESTOWAL_NOTIFICATION_PROGRAM-HH_IM_PD_LR_3A_OFFER"))
		HH_IM_PD_LR_3A_Offer_count= LATEST_OFFER_FULFILMENT_COUNTS.get( "BESTOWAL_NOTIFICATION_PROGRAM-HH_IM_PD_LR_3A_OFFER" ).getAsInt();
	if(LATEST_OFFER_FULFILMENT_COUNTS.has( "BESTOWAL_NOTIFICATION_PROGRAM-HH_IM_PD_LR_3B_OFFER"))
		HH_IM_PD_LR_3B_Offer_count = LATEST_OFFER_FULFILMENT_COUNTS.get( "BESTOWAL_NOTIFICATION_PROGRAM-HH_IM_PD_LR_3B_OFFER" ).getAsInt();
	if(LATEST_OFFER_FULFILMENT_COUNTS.has( "BESTOWAL_NOTIFICATION_PROGRAM-HH_IM_PD_LR_3C_OFFER"))
		HH_IM_PD_LR_3B_Offer_count = LATEST_OFFER_FULFILMENT_COUNTS.get( "BESTOWAL_NOTIFICATION_PROGRAM-HH_IM_PD_LR_3C_OFFER" ).getAsInt();
		
	 if ((HH_IM_PD_LR_3A_Offer_count < 3 && HH_IM_PD_LR_3A_Offer_count >=1) || (HH_IM_PD_LR_3B_Offer_count < 3 && HH_IM_PD_LR_3B_Offer_count >=1) || (HH_IM_PD_LR_3C_Offer_count < 3 && HH_IM_PD_LR_3C_Offer_count >=1)) {
	     return true;
	 }
}
return false;
line 1:0 no viable alternative at input 'int'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params LATEST_OFFER_FULFILMENT_COUNTS -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getInactivityEndDate" -- > "String inactivityEndDate = \"\";\r\nif( CREDIT_SERIES_LifeTime.has(\"latestCreditExpiryDate\") && (CREDIT_SERIES_LifeTime.get(\"latestCreditExpiryDate\").getAsString() != null || CREDIT_SERIES_LifeTime.get(\"latestCreditExpiryDate\").getAsString() != \"\" ) && CREDIT_SERIES_LifeTime.get(\"latestCreditExpiryDate\").getAsLong() != 0)\r\n{\r\nlong elatestCreditExpiryDate = CREDIT_SERIES_LifeTime.get(\"latestCreditExpiryDate\").getAsLong();\r\nlong newCreditExpiryDate = ( elatestCreditExpiryDate + ( 185 * 86400000l ) );\r\njava.util.Date dte= new java.util.Date(newCreditExpiryDate);\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\nd.setTimeZone(java.util.TimeZone.getTimeZone(\"GMT\"));\r\ninactivityEndDate = d.format(dte);\r\n}\r\nreturn inactivityEndDate;"
Preprocessed Expression : String inactivityEndDate = "";
if( CREDIT_SERIES_LifeTime.has("latestCreditExpiryDate") && (CREDIT_SERIES_LifeTime.get("latestCreditExpiryDate").getAsString() != null || CREDIT_SERIES_LifeTime.get("latestCreditExpiryDate").getAsString() != "" ) && CREDIT_SERIES_LifeTime.get("latestCreditExpiryDate").getAsLong() != 0)
{
long elatestCreditExpiryDate = CREDIT_SERIES_LifeTime.get("latestCreditExpiryDate").getAsLong();
long newCreditExpiryDate = ( elatestCreditExpiryDate + ( 185 * 86400000l ) );
java.util.Date dte= new java.util.Date(newCreditExpiryDate);
java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
d.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));
inactivityEndDate = d.format(dte);
}
return inactivityEndDate;
line 1:0 no viable alternative at input 'String'
------------Infered params CREDIT_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getCurrentMonitoringOfferDetails" -- > "String offer1 = \"\";\r\nString offer2 = \"\";\r\nString offerStartDate1 = \"\";\r\nString offerEndDate1 = \"\";\r\nString offerStartDate2 = \"\";\r\nString offerEndDate2 = \"\";\r\nString monitoredAction1 = \"\";\r\nString monitoredAction2 = \"\";\r\nString optinKeyword1 = \"\";\r\nString optinKeyword2 = \"\";\r\nString reward1 = \"\";\r\nString reward2 = \"\";\r\nString rewardValidity1 = \"\";\r\nString rewardValidity2 = \"\";\r\nString channel1=\"\";\r\nString channel2=\"\";\r\nJsonArray currentlyMonitored  = isCurrentlyMonitored();\r\nif (currentlyMonitored!=null && !currentlyMonitored.isJsonNull() && currentlyMonitored.size()>0){\r\n\tString[] offers = currentlyMonitored.get(0).getAsString().split(\"\\\\~\",-1);\r\n\tString[] endDates = currentlyMonitored.get(1).getAsString().split(\"\\\\~\",-1);\r\n\tString[] startDates = currentlyMonitored.get(2).getAsString().split(\"\\\\~\",-1);\r\n\tString[] rewards = currentlyMonitored.get(3).getAsString().split(\"\\\\~\",-1);\r\n\tString[] rewardValidities = currentlyMonitored.get(4).getAsString().split(\"\\\\~\",-1);\r\n\tString[] monitoredActions = currentlyMonitored.get(5).getAsString().split(\"\\\\~\",-1);\r\n\tString[] optinList = currentlyMonitored.get(6).getAsString().split(\"\\\\~\",-1);\r\n\tString[] channelList = currentlyMonitored.get(7).getAsString().split(\"\\\\~\",-1);\r\n\tjava.text.SimpleDateFormat date = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n\tdate.setTimeZone(java.util.TimeZone.getTimeZone(\"GMT\"));\r\n\tif(!startDates[0].equals(\"\")) {\r\n\t\tjava.util.Date startdte1 = new java.util.Date(Long.valueOf(startDates[0]));\r\n\t\tofferStartDate1 = date.format(startdte1);\r\n\t}\r\n\tif(startDates.length>=2 && !startDates[1].equals(\"\") ) {\r\n\t\tjava.util.Date startdte2 = new java.util.Date(Long.valueOf(startDates[1]));\r\n\t\tofferStartDate2 = date.format(startdte2);\r\n\t}\r\n\tif(!endDates[0].equals(\"\")) {\r\n\t\tjava.util.Date enddte1 = new java.util.Date(Long.valueOf(endDates[0]));\r\n\t\tofferEndDate1 = date.format(enddte1);\r\n\t}\r\n\tif(endDates.length >=2 && !endDates[1].equals(\"\")) {\r\n\t\tjava.util.Date enddte2 = new java.util.Date(Long.valueOf(endDates[1]));\r\n\t\tofferEndDate2 = date.format(enddte2);\r\n\t}\r\n\t\r\n\toffer1 = offers[0];\r\n\tif(offers.length>=2)\r\n\t\toffer2 = offers[1];\r\n\t\r\n\tmonitoredAction1 = monitoredActions[0];\r\n\tif(monitoredActions.length>=2)\r\n\t\tmonitoredAction2 = monitoredActions[1];\r\n\t\t\r\n\toptinKeyword1 = optinList[0];\r\n\tif(optinList.length>=2)\r\n\t\toptinKeyword2 = optinList[1];\r\n\r\n\treward1 = rewards[0];\r\n\tif(rewards.length>=2)\r\n\t\treward2 = rewards[1];\r\n\t\t\r\n\trewardValidity1 = rewardValidities[0];\r\n\tif(rewardValidities.length>=2)\r\n\trewardValidity2 = rewardValidities[1];\r\n\r\n\tchannel1=channelList[0];\r\n\tif(channelList.length>=2)\r\n\t\tchannel2=channelList[1];\r\n}\r\n\treturn(offer1 + \"|\" + offerStartDate1 + \"|\" + offerEndDate1 + \"|\" + monitoredAction1 + \"|\" + optinKeyword1 + \"|\" + reward1 + \"|\" + rewardValidity1 + \"|\"+channel1+\"|\"+ offer2 + \"|\" + offerStartDate2 + \"|\" + offerEndDate2 + \"|\" + monitoredAction2 + \"|\" + optinKeyword2 + \"|\" + reward2 + \"|\" + rewardValidity2 +\"|\"+channel2);"
Preprocessed Expression : String offer1 = "";
String offer2 = "";
String offerStartDate1 = "";
String offerEndDate1 = "";
String offerStartDate2 = "";
String offerEndDate2 = "";
String monitoredAction1 = "";
String monitoredAction2 = "";
String optinKeyword1 = "";
String optinKeyword2 = "";
String reward1 = "";
String reward2 = "";
String rewardValidity1 = "";
String rewardValidity2 = "";
String channel1="";
String channel2="";
JsonArray currentlyMonitored  =  SIFTMATH.execJsonArrayFunction("isCurrentlyMonitored" );
if (currentlyMonitored!=null && !currentlyMonitored.isJsonNull() && currentlyMonitored.size()>0){
	String[] offers = currentlyMonitored.get(0).getAsString().split("\\~",-1);
	String[] endDates = currentlyMonitored.get(1).getAsString().split("\\~",-1);
	String[] startDates = currentlyMonitored.get(2).getAsString().split("\\~",-1);
	String[] rewards = currentlyMonitored.get(3).getAsString().split("\\~",-1);
	String[] rewardValidities = currentlyMonitored.get(4).getAsString().split("\\~",-1);
	String[] monitoredActions = currentlyMonitored.get(5).getAsString().split("\\~",-1);
	String[] optinList = currentlyMonitored.get(6).getAsString().split("\\~",-1);
	String[] channelList = currentlyMonitored.get(7).getAsString().split("\\~",-1);
	java.text.SimpleDateFormat date = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	date.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));
	if(!startDates[0].equals("")) {
		java.util.Date startdte1 = new java.util.Date(Long.valueOf(startDates[0]));
		offerStartDate1 = date.format(startdte1);
	}
	if(startDates.length>=2 && !startDates[1].equals("") ) {
		java.util.Date startdte2 = new java.util.Date(Long.valueOf(startDates[1]));
		offerStartDate2 = date.format(startdte2);
	}
	if(!endDates[0].equals("")) {
		java.util.Date enddte1 = new java.util.Date(Long.valueOf(endDates[0]));
		offerEndDate1 = date.format(enddte1);
	}
	if(endDates.length >=2 && !endDates[1].equals("")) {
		java.util.Date enddte2 = new java.util.Date(Long.valueOf(endDates[1]));
		offerEndDate2 = date.format(enddte2);
	}
	
	offer1 = offers[0];
	if(offers.length>=2)
		offer2 = offers[1];
	
	monitoredAction1 = monitoredActions[0];
	if(monitoredActions.length>=2)
		monitoredAction2 = monitoredActions[1];
		
	optinKeyword1 = optinList[0];
	if(optinList.length>=2)
		optinKeyword2 = optinList[1];

	reward1 = rewards[0];
	if(rewards.length>=2)
		reward2 = rewards[1];
		
	rewardValidity1 = rewardValidities[0];
	if(rewardValidities.length>=2)
	rewardValidity2 = rewardValidities[1];

	channel1=channelList[0];
	if(channelList.length>=2)
		channel2=channelList[1];
}
	return(offer1 + "|" + offerStartDate1 + "|" + offerEndDate1 + "|" + monitoredAction1 + "|" + optinKeyword1 + "|" + reward1 + "|" + rewardValidity1 + "|"+channel1+"|"+ offer2 + "|" + offerStartDate2 + "|" + offerEndDate2 + "|" + monitoredAction2 + "|" + optinKeyword2 + "|" + reward2 + "|" + rewardValidity2 +"|"+channel2);
line 1:0 no viable alternative at input 'String'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getLatestCreditExpiryDateForExport" -- > "String latestCreditExpDte =\"\"; if(CREDIT_SERIES_LifeTime!=null && !CREDIT_SERIES_LifeTime.isJsonNull() && CREDIT_SERIES_LifeTime.entrySet().size()!=0){ long date = CREDIT_SERIES_LifeTime.get(\"latestCreditExpiryDate\").getAsLong(); java.util.Date dte= new java.util.Date(date); java.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"); d.setTimeZone(java.util.TimeZone.getTimeZone(\"GMT\")); latestCreditExpDte = d.format(dte); } return latestCreditExpDte;"
Preprocessed Expression : String latestCreditExpDte =""; if(CREDIT_SERIES_LifeTime!=null && !CREDIT_SERIES_LifeTime.isJsonNull() && CREDIT_SERIES_LifeTime.entrySet().size()!=0){ long date = CREDIT_SERIES_LifeTime.get("latestCreditExpiryDate").getAsLong(); java.util.Date dte= new java.util.Date(date); java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); d.setTimeZone(java.util.TimeZone.getTimeZone("GMT")); latestCreditExpDte = d.format(dte); } return latestCreditExpDte;
line 1:0 no viable alternative at input 'String'
------------Infered params CREDIT_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "hasSummaryContactExceeded" -- > "long thisOfferCount = 0 ;\r\n if( OFFER_TYPE.equals(\"UnConditional\") ){\r\n\tJsonElement jEle = getSiftwareAttribute(\"Offer\", OFFER_ID, \"fulfillmentList\");\r\n \tif( jEle != null && jEle.getAsJsonArray().size() > 0 ){\r\n \t\tJsonElement channleEle = jEle.getAsJsonArray().get(0).getAsJsonObject().get(\"fulfillmentMessageChannels\");\r\n \t\tif( channleEle != null && ! channleEle.isJsonNull() && channleEle.getAsJsonArray().size() > 0 ){\r\n \t\t\tJsonArray channelArray = channleEle.getAsJsonArray();\r\n \t\t\tfor( int i = 0; i < channelArray.size() ;i++ ){\r\n \t\t\t\tString channelName = channelArray.get(i).getAsJsonObject().get(\"channelName\").getAsString();\r\n \t\t\t\tthisOfferCount += getSummaryCounter( OFFER_ID + \"-\" + channelName + \"-COUNT\" ,  \"LifeTime\" );\r\n \t\t\t}\r\n \t\t\treturn thisOfferCount < maxCount ;\r\n \t\t}\r\n \t} \r\n \treturn true;\t\r\n }\r\nint instanceCount = getNumberOfSiftInstances();\r\nlong allowedCount = maxCount / instanceCount ;\r\n\r\nlong extraCount = maxCount % instanceCount;\r\nif( extraCount >= getSiftInstance() )\r\n\tallowedCount += 1;\r\n\t\r\nJsonObject jInd = getSummaryIndicator( \"TELCO_OFFER_COUNT_LifeTime\" );\r\n\r\n//System.out.println(\"hasSummaryContactExceeded\" + jInd + \"-\" + instanceCount + \"-\" + allowedCount + \"-\" + getSiftInstance()  );\r\n\r\nJsonElement catele = jInd.get( OFFER_CATEGORY );\r\nif( catele != null ){\r\n\tJsonObject catObj = catele.getAsJsonObject();\r\n\tJsonElement catOfferEle = catObj.get( OFFER_ID );\r\n\tif( catOfferEle != null )\r\n\t\tthisOfferCount = catOfferEle.getAsJsonObject().get( \"count\" ).getAsLong() ;                                                                                                                                                                \r\n}\r\n\r\nif( thisOfferCount + 1 > allowedCount )\r\n\treturn false;\r\n\t\r\nreturn true;"
Preprocessed Expression : long thisOfferCount = 0 ;
 if( OFFER_TYPE.equals("UnConditional") ){
	JsonElement jEle =  SIFTMATH.getSiftwareAttribute("Offer", OFFER_ID, "fulfillmentList");
 	if( jEle != null && jEle.getAsJsonArray().size() > 0 ){
 		JsonElement channleEle = jEle.getAsJsonArray().get(0).getAsJsonObject().get("fulfillmentMessageChannels");
 		if( channleEle != null && ! channleEle.isJsonNull() && channleEle.getAsJsonArray().size() > 0 ){
 			JsonArray channelArray = channleEle.getAsJsonArray();
 			for( int i = 0; i < channelArray.size() ;i++ ){
 				String channelName = channelArray.get(i).getAsJsonObject().get("channelName").getAsString();
 				thisOfferCount +=  SIFTMATH.getSummaryCounter( OFFER_ID + "-" + channelName + "-COUNT" ,  "LifeTime" );
 			}
 			return thisOfferCount < maxCount ;
 		}
 	} 
 	return true;	
 }
int instanceCount =  SIFTMATH.getNumberOfSiftInstances();
long allowedCount = maxCount / instanceCount ;

long extraCount = maxCount % instanceCount;
if( extraCount >=  SIFTMATH.getSiftInstance() )
	allowedCount += 1;
	
JsonObject jInd =  SIFTMATH.getSummaryIndicator( "TELCO_OFFER_COUNT_LifeTime" );

//System.out.println("hasSummaryContactExceeded" + jInd + "-" + instanceCount + "-" + allowedCount + "-" +  SIFTMATH.getSiftInstance()  );

JsonElement catele = jInd.get( OFFER_CATEGORY );
if( catele != null ){
	JsonObject catObj = catele.getAsJsonObject();
	JsonElement catOfferEle = catObj.get( OFFER_ID );
	if( catOfferEle != null )
		thisOfferCount = catOfferEle.getAsJsonObject().get( "count" ).getAsLong() ;                                                                                                                                                                
}

if( thisOfferCount + 1 > allowedCount )
	return false;
	
return true;
line 1:0 no viable alternative at input 'long'
------------Infered params OFFER_TYPE -- java.lang.String -- String
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params OFFER_ID -- java.lang.String -- String
------------Infered params OFFER_CATEGORY -- java.lang.String -- String
Compiling Function : "getSimulatedContactCount" -- > "long lStart, lEnd;\r\n\t\tint count = 0;\r\n\t\tlong msecPerDay = 86400000l;\r\n\t\tif( start == - 1 )\r\n\t\t\tlStart = -1;\r\n\t\telse \r\n\t\t\tlStart = getCurrentTime() - start * msecPerDay;\t\t// Until the current time of the day\r\n\r\n\t\tif( duration == -1 )\r\n\t\t\tlEnd = -1;\r\n\t\telse{\r\n\t\t\tlEnd = ( lStart - lStart % msecPerDay ) - ( ( duration - 1 ) * msecPerDay );\r\n\t\t\tlStart += msecPerDay - 1000;\r\n\t\t}\r\n\r\n\t\tif( category.equals( \"*\" ) ){\r\n\t\t\tif( offer.equals( \"*\" ) ){\r\n\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\treturn OFFER_COUNT_LifeTime_Simulation.get( \"TotalCount\" ).getAsInt();\t\t\t\t\t\t\t\t\t// getContactCount( \"*\", \"*\", \"*\", -1, -1 );\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tcom.google.gson.JsonElement contactSeriesEle = OFFER_COUNT_LifeTime_Simulation.get( \"CONTACT_SERIES\" );\r\n\t\t\t\t\t\tif( contactSeriesEle == null || contactSeriesEle.isJsonNull() )\r\n\t\t\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\t\t\treturn getRangeCountFromArray( contactSeriesEle.getAsJsonArray(), lStart, lEnd );\r\n\t\t\t\t\t}\r\n\t\t\t\t} else{\r\n\t\t\t\t\tif( lStart == -1 ){\r\n\t\t\t\t\t\tcom.google.gson.JsonElement channelEle = OFFER_COUNT_LifeTime_Simulation.get( channel);\r\n\t\t\t\t\t\tif( channelEle == null )\r\n\t\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\treturn channelEle.getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// getContactCount( \"*\", \"*\", \"SMS\", -1, -1 );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// TODO: Need to add for getContactCount( \"*\", \"*\", \"SMS\", 0, 30 );\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else{\r\n\r\n\t\t\t\tString[] offerCategories = null;\r\n\t\t\t\tif( OFFER_CATEGORY == null || OFFER_CATEGORY.equals( \"\" ) ) {\r\n\t\t\t\t\tcom.google.gson.JsonElement offerCatEle = getSiftwareAttribute( \"Offer\", offer, \"category\" );\r\n\t\t\t\t\tif( offerCatEle == null || offerCatEle.isJsonNull() ) {\r\n\t\t\t\t\t\tofferCategories = new String[ 1 ];\r\n\t\t\t\t\t\tofferCategories[ 0 ] = \"GENERIC\";\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\tofferCategories = offerCatEle.getAsString().split( \",\" );\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tofferCategories = OFFER_CATEGORY.split( \",\" );\r\n\r\n\r\n\t\t\t\tfor( int i = 0; i < offerCategories.length; i ++ ){\r\n\t\t\t\t\tjava.lang.String cat = offerCategories[ i ];\r\n\t\t\t\t\tcom.google.gson.JsonElement catele = OFFER_COUNT_LifeTime_Simulation.get( cat );\r\n\t\t\t\t\tif( catele == null )\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\tcom.google.gson.JsonObject catObj = catele.getAsJsonObject();\r\n\t\t\t\t\tcom.google.gson.JsonElement catOfferEle = catObj.get( offer);\r\n\t\t\t\t\tif( catOfferEle == null )\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\tcom.google.gson.JsonObject catOfferObj = catOfferEle.getAsJsonObject();\r\n\t\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\t\treturn catOfferObj.get( \"count\" ).getAsInt();\t\t\t\t\t\t\t\t\t\t\t// getContactCount( \"*\", \"Offer1\", \"*\", -1, -1 );\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tcom.google.gson.JsonElement dateSeriesEle = catOfferObj.get( \"date_series\" );\r\n\t\t\t\t\t\t\tif( dateSeriesEle == null )\r\n\t\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\t\treturn getRangeCountFromArray( dateSeriesEle.getAsJsonArray(), lStart, lEnd );\t\t\t// getContactCount( \"*\", \"Offer1\", \"*\", 0, 30 );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else{\r\n\t\t\t\t\t\tif( lStart == -1 ){\r\n\t\t\t\t\t\t\tcom.google.gson.JsonElement channelEle = catOfferObj.get( channel);\r\n\t\t\t\t\t\t\tif( channelEle == null )\r\n\t\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\t\treturn channelEle.getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// getContactCount( \"*\", \"Offer1\", \"SMS\", -1, -1 );\r\n\t\t\t\t\t\t} else{\r\n\t\t\t\t\t\t\tcom.google.gson.JsonElement channelDateSeriesEle = catOfferObj.get( channel+ \"_date_series\" );\r\n\t\t\t\t\t\t\tif( channelDateSeriesEle == null )\r\n\t\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\t\treturn getRangeCountFromArray( channelDateSeriesEle.getAsJsonArray(), lStart, lEnd );\t//  getContactCount( \"*\", \"Offer1\", \"SMS\", 0, 30 );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else{\r\n\t\t\tcom.google.gson.JsonElement catEle = OFFER_COUNT_LifeTime_Simulation.get( category );\r\n\t\t\tif( catEle == null )\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\tcom.google.gson.JsonObject catObj = catEle.getAsJsonObject();\r\n\t\t\tif( offer.equals( \"*\" ) ){\r\n\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\treturn catObj.get( \"count\" ).getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t//  getContactCount( \"Cat1\", \"*\", \"*\", -1, -1 );\r\n\r\n\t\t\t\t\tcom.google.gson.JsonElement dateSeriesEle = catObj.get( \"date_series\" );\r\n\t\t\t\t\tif( dateSeriesEle == null )\r\n\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\treturn getRangeCountFromArray( dateSeriesEle.getAsJsonArray(), lStart, lEnd );\t\t\t\t\t//  getContactCount( \"Cat1\", \"*\", \"*\", 0, 30 );\r\n\t\t\t\t} else{\r\n\t\t\t\t\tif( lStart == -1 ){\r\n\t\t\t\t\t\tcom.google.gson.JsonElement channelEle = catObj.get( channel);\r\n\t\t\t\t\t\tif( channelEle == null )\r\n\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\treturn catObj.get( channel).getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t//  getContactCount( \"Cat1\", \"*\", \"SMS\", -1, -1 );\r\n\t\t\t\t\t} else{\r\n\t\t\t\t\t\tcom.google.gson.JsonElement catchannelEle = catObj.get( channel+ \"_date_series\" );\r\n\t\t\t\t\t\tif( catchannelEle == null ) \r\n\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\treturn getRangeCountFromArray( catchannelEle.getAsJsonArray(), lStart, lEnd );\t\t\t\t//  getContactCount( \"Cat1\", \"*\", \"SMS\", 0, 30 );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else{\r\n\t\t\t\tcom.google.gson.JsonElement offerEle = catObj.get( offer);\r\n\t\t\t\tif( offerEle == null )\r\n\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\tcom.google.gson.JsonObject offerObj = offerEle.getAsJsonObject();\r\n\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\treturn offerObj.get( \"count\" ).getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t//  getContactCount( \"Cat1\", \"Offer1\", \"*\", -1, -1 );\r\n\r\n\t\t\t\t\tcom.google.gson.JsonElement dateSeriesEle = offerObj.get( \"date_series\" );\r\n\t\t\t\t\tif( dateSeriesEle == null )\r\n\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\treturn getRangeCountFromArray( dateSeriesEle.getAsJsonArray(), lStart, lEnd );\t\t\t\t\t//  getContactCount( \"Cat1\", \"Offer1\", \"*\", 0, 30 );\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tcom.google.gson.JsonElement channelEle = offerObj.get( channel);\r\n\t\t\t\t\tif( channelEle == null )\r\n\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\treturn offerObj.get( channel).getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t//  getContactCount( \"Cat1\", \"Offer1\", \"SMS\", -1, -1 );\r\n\r\n\t\t\t\t\tcom.google.gson.JsonElement channelDateSeriesEle = offerObj.get( channel+ \"_date_series\" );\r\n\t\t\t\t\tif( channelDateSeriesEle == null )\r\n\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\treturn getRangeCountFromArray( channelDateSeriesEle.getAsJsonArray(), lStart, lEnd );\t\t\t//  getContactCount( \"Cat1\", \"Offer1\", \"SMS\", 0, 30 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn count;"
Preprocessed Expression : long lStart, lEnd;
		int count = 0;
		long msecPerDay = 86400000l;
		if( start == - 1 )
			lStart = -1;
		else 
			lStart =  SIFTMATH.getCurrentTime() - start * msecPerDay;		// Until the current time of the day

		if( duration == -1 )
			lEnd = -1;
		else{
			lEnd = ( lStart - lStart % msecPerDay ) - ( ( duration - 1 ) * msecPerDay );
			lStart += msecPerDay - 1000;
		}

		if( category.equals( "*" ) ){
			if( offer.equals( "*" ) ){
				if( channel.equals( "*" ) ){
					if( lStart == -1 )
						return OFFER_COUNT_LifeTime_Simulation.get( "TotalCount" ).getAsInt();									//  SIFTMATH.execIntFunction("getContactCount",  "*", "*", "*", -1, -1 );
					else{
						com.google.gson.JsonElement contactSeriesEle = OFFER_COUNT_LifeTime_Simulation.get( "CONTACT_SERIES" );
						if( contactSeriesEle == null || contactSeriesEle.isJsonNull() )
							return -1;

						return  SIFTMATH.execIntFunction("getRangeCountFromArray",  contactSeriesEle.getAsJsonArray(), lStart, lEnd );
					}
				} else{
					if( lStart == -1 ){
						com.google.gson.JsonElement channelEle = OFFER_COUNT_LifeTime_Simulation.get( channel);
						if( channelEle == null )
							return 0;
						return channelEle.getAsInt();																//  SIFTMATH.execIntFunction("getContactCount",  "*", "*", "SMS", -1, -1 );
					} else {
						// TODO: Need to add for  SIFTMATH.execIntFunction("getContactCount",  "*", "*", "SMS", 0, 30 );
						return -1;
					}
				}
			} else{

				String[] offerCategories = null;
				if( OFFER_CATEGORY == null || OFFER_CATEGORY.equals( "" ) ) {
					com.google.gson.JsonElement offerCatEle =  SIFTMATH.getSiftwareAttribute( "Offer", offer, "category" );
					if( offerCatEle == null || offerCatEle.isJsonNull() ) {
						offerCategories = new String[ 1 ];
						offerCategories[ 0 ] = "GENERIC";
					} else
						offerCategories = offerCatEle.getAsString().split( "," );
				}
				else
					offerCategories = OFFER_CATEGORY.split( "," );


				for( int i = 0; i < offerCategories.length; i ++ ){
					java.lang.String cat = offerCategories[ i ];
					com.google.gson.JsonElement catele = OFFER_COUNT_LifeTime_Simulation.get( cat );
					if( catele == null )
						continue;

					com.google.gson.JsonObject catObj = catele.getAsJsonObject();
					com.google.gson.JsonElement catOfferEle = catObj.get( offer);
					if( catOfferEle == null )
						continue;

					com.google.gson.JsonObject catOfferObj = catOfferEle.getAsJsonObject();
					if( channel.equals( "*" ) ){
						if( lStart == -1 )
							return catOfferObj.get( "count" ).getAsInt();											//  SIFTMATH.execIntFunction("getContactCount",  "*", "Offer1", "*", -1, -1 );
						else{
							com.google.gson.JsonElement dateSeriesEle = catOfferObj.get( "date_series" );
							if( dateSeriesEle == null )
								return 0;

							return  SIFTMATH.execIntFunction("getRangeCountFromArray",  dateSeriesEle.getAsJsonArray(), lStart, lEnd );			//  SIFTMATH.execIntFunction("getContactCount",  "*", "Offer1", "*", 0, 30 );
						}
					} else{
						if( lStart == -1 ){
							com.google.gson.JsonElement channelEle = catOfferObj.get( channel);
							if( channelEle == null )
								return 0;

							return channelEle.getAsInt();															//  SIFTMATH.execIntFunction("getContactCount",  "*", "Offer1", "SMS", -1, -1 );
						} else{
							com.google.gson.JsonElement channelDateSeriesEle = catOfferObj.get( channel+ "_date_series" );
							if( channelDateSeriesEle == null )
								return 0;

							return  SIFTMATH.execIntFunction("getRangeCountFromArray",  channelDateSeriesEle.getAsJsonArray(), lStart, lEnd );	//   SIFTMATH.execIntFunction("getContactCount",  "*", "Offer1", "SMS", 0, 30 );
						}
					}
				}
			}
		} else{
			com.google.gson.JsonElement catEle = OFFER_COUNT_LifeTime_Simulation.get( category );
			if( catEle == null )
				return 0;

			com.google.gson.JsonObject catObj = catEle.getAsJsonObject();
			if( offer.equals( "*" ) ){
				if( channel.equals( "*" ) ){
					if( lStart == -1 )
						return catObj.get( "count" ).getAsInt();													//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "*", "*", -1, -1 );

					com.google.gson.JsonElement dateSeriesEle = catObj.get( "date_series" );
					if( dateSeriesEle == null )
						return 0;

					return  SIFTMATH.execIntFunction("getRangeCountFromArray",  dateSeriesEle.getAsJsonArray(), lStart, lEnd );					//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "*", "*", 0, 30 );
				} else{
					if( lStart == -1 ){
						com.google.gson.JsonElement channelEle = catObj.get( channel);
						if( channelEle == null )
							return 0;

						return catObj.get( channel).getAsInt();													//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "*", "SMS", -1, -1 );
					} else{
						com.google.gson.JsonElement catchannelEle = catObj.get( channel+ "_date_series" );
						if( catchannelEle == null ) 
							return 0;

						return  SIFTMATH.execIntFunction("getRangeCountFromArray",  catchannelEle.getAsJsonArray(), lStart, lEnd );				//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "*", "SMS", 0, 30 );
					}
				}
			} else{
				com.google.gson.JsonElement offerEle = catObj.get( offer);
				if( offerEle == null )
					return 0;

				com.google.gson.JsonObject offerObj = offerEle.getAsJsonObject();
				if( channel.equals( "*" ) ){
					if( lStart == -1 )
						return offerObj.get( "count" ).getAsInt();													//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "Offer1", "*", -1, -1 );

					com.google.gson.JsonElement dateSeriesEle = offerObj.get( "date_series" );
					if( dateSeriesEle == null )
						return 0;

					return  SIFTMATH.execIntFunction("getRangeCountFromArray",  dateSeriesEle.getAsJsonArray(), lStart, lEnd );					//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "Offer1", "*", 0, 30 );
				}
				else{
					com.google.gson.JsonElement channelEle = offerObj.get( channel);
					if( channelEle == null )
						return 0;

					if( lStart == -1 )
						return offerObj.get( channel).getAsInt();													//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "Offer1", "SMS", -1, -1 );

					com.google.gson.JsonElement channelDateSeriesEle = offerObj.get( channel+ "_date_series" );
					if( channelDateSeriesEle == null )
						return 0;

					return  SIFTMATH.execIntFunction("getRangeCountFromArray",  channelDateSeriesEle.getAsJsonArray(), lStart, lEnd );			//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "Offer1", "SMS", 0, 30 );
				}
			}
		}
		return count;
line 1:0 no viable alternative at input 'long'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params OFFER_COUNT_LifeTime_Simulation -- com.google.gson.JsonObject -- JsonObject
------------Infered params OFFER_CATEGORY -- java.lang.String -- String
Compiling Function : "getLoyaltyStatusupdateDate" -- > "String EnrolmentDateTime=\"\";\r\nif (LOYALTY_ENROLMENT_SERIES_LifeTime != null && !LOYALTY_ENROLMENT_SERIES_LifeTime.isJsonNull()\r\n\t\t\t\t&& LOYALTY_ENROLMENT_SERIES_LifeTime.entrySet().size() != 0) {\r\n\t\t\tJsonArray loyaltyArr = LOYALTY_ENROLMENT_SERIES_LifeTime.get(\"keys\").getAsJsonArray();\r\n\t\t\tif (loyaltyArr.size() != 0){\r\n\t\t\t\tString lkey = loyaltyArr.get(loyaltyArr.size() - 1).getAsString();\r\n\t\t\t\tJsonObject lvalues=LOYALTY_ENROLMENT_SERIES_LifeTime.get(lkey).getAsJsonObject();\r\n\t\t\t\tif (lvalues != null && !lvalues.isJsonNull()\r\n\t\t\t\t\t&& lvalues.entrySet().size() != 0) {\r\n\t\t\t\tif(lvalues.has(\"EnrolmentDateTime\")) {\r\n\t\t\t\tEnrolmentDateTime=lvalues.get(\"EnrolmentDateTime\").getAsString();\r\n\t\t\t    if(EnrolmentDateTime!=null && EnrolmentDateTime.length()!=0)\r\n                return convertDateTimeToLong(EnrolmentDateTime,\"MM/dd/yyyy HH:mm:ss\", 0,0); \r\n\t\t\t\t}\r\n}}} return 0l;"
Preprocessed Expression : String EnrolmentDateTime="";
if (LOYALTY_ENROLMENT_SERIES_LifeTime != null && !LOYALTY_ENROLMENT_SERIES_LifeTime.isJsonNull()
				&& LOYALTY_ENROLMENT_SERIES_LifeTime.entrySet().size() != 0) {
			JsonArray loyaltyArr = LOYALTY_ENROLMENT_SERIES_LifeTime.get("keys").getAsJsonArray();
			if (loyaltyArr.size() != 0){
				String lkey = loyaltyArr.get(loyaltyArr.size() - 1).getAsString();
				JsonObject lvalues=LOYALTY_ENROLMENT_SERIES_LifeTime.get(lkey).getAsJsonObject();
				if (lvalues != null && !lvalues.isJsonNull()
					&& lvalues.entrySet().size() != 0) {
				if(lvalues.has("EnrolmentDateTime")) {
				EnrolmentDateTime=lvalues.get("EnrolmentDateTime").getAsString();
			    if(EnrolmentDateTime!=null && EnrolmentDateTime.length()!=0)
                return  SIFTMATH.convertDateTimeToLong(EnrolmentDateTime,"MM/dd/yyyy HH:mm:ss", 0,0); 
				}
}}} return 0l;
line 1:0 no viable alternative at input 'String'
------------Infered params LOYALTY_ENROLMENT_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "manageLiveChartIndicator" -- > "String key = \"TELCO_\" + PROGRAM_ID + \"--\" + OFFER_ID;\r\n         if( IS_SIMULATED.equals( \"true\" ) )\r\n               LIVECHART_TYPE += \"_Simulation\";\r\n\tJsonObject jOfferCount = getLiveChartIndicator( key, LIVECHART_TYPE );\r\n\r\n\tLong lCount = jOfferCount.get( \"count\" ).getAsLong() + COUNT_FACTOR;\r\n\tjOfferCount.addProperty( \"count\", lCount );\r\n\tif( IS_CONTROL.equals( \"true\" ) ) {\r\n\t\tLong lControlCount = jOfferCount.get( \"count_control\" ).getAsLong() + COUNT_FACTOR;\r\n\t\tjOfferCount.addProperty( \"count_control\", lControlCount );\r\n\t}\r\n\r\n\t/* Daily count for Event Live Chart */\r\n\tString dailyCountKey = \"DailyCount-target\";\r\n\tif( IS_CONTROL.equals( \"true\" ) )\r\n\t\tdailyCountKey = \"DailyCount-control\";\r\n\tJsonObject jDailyCount = null;\r\n\tJsonElement eDailyCount = jOfferCount.get( dailyCountKey );\r\n\tif( eDailyCount == null ) {\r\n\t\tjDailyCount = new JsonObject();\r\n\t\tjOfferCount.add( dailyCountKey, jDailyCount );\r\n\t}else\r\n\t\tjDailyCount = eDailyCount.getAsJsonObject();\r\n\tlong today = CONTACT_TIME;\r\n\ttoday = today - today %86400000L;\r\n\tString dayKey = new Long( today ).toString();\r\n\tJsonElement eCount = jDailyCount.get( dayKey );\r\n\tlong nCount = 1;\r\n\tif( eCount != null )\r\n\t\tnCount = eCount.getAsLong() + COUNT_FACTOR;\r\n\tjDailyCount.addProperty( dayKey, nCount );\r\n\r\n\t/* Hourly count for Event Live Chart ******/\r\n\tString hourlyCountKey = dailyCountKey.replace( \"Daily\", \"Hourly\" ) + \"-\" + dayKey;\r\n\tJsonObject jHourlyCount = null;\r\n\tJsonElement eHourlyCount = jOfferCount.get( hourlyCountKey );\r\n\tif( eHourlyCount == null ) {\r\n\t\tjHourlyCount = new JsonObject();\r\n\t\tjOfferCount.add( hourlyCountKey, jHourlyCount );\r\n\t}else\r\n\t\tjHourlyCount = eHourlyCount.getAsJsonObject();\r\n\tjava.util.Calendar calendar = java.util.Calendar.getInstance( java.util.TimeZone.getDefault() );\r\n\t\r\n\tjava.util.Calendar cal = java.util.Calendar.getInstance();\r\n\t\r\n\tjava.util.TimeZone tz = java.util.TimeZone.getTimeZone(\"GMT\");\r\n\r\n\tcal.setTimeZone(tz);\r\n\tcal.setTimeInMillis(CONTACT_TIME);\r\n\t\r\n\tString hourKey = new Integer( cal.get( java.util.Calendar.HOUR_OF_DAY ) ).toString();\r\n\t\r\n\teCount = jHourlyCount.get( hourKey );\r\n\tnCount = COUNT_FACTOR;\r\n\tif( eCount != null )\r\n\t\tnCount = eCount.getAsLong() + COUNT_FACTOR;\r\n\tjHourlyCount.addProperty( hourKey, nCount );\r\n\tsetLiveChartIndicator( key,  LIVECHART_TYPE, jOfferCount );\r\n           return jOfferCount;"
Preprocessed Expression : String key = "TELCO_" + PROGRAM_ID + "--" + OFFER_ID;
         if( IS_SIMULATED.equals( "true" ) )
               LIVECHART_TYPE += "_Simulation";
	JsonObject jOfferCount =  SIFTMATH.getLiveChartIndicator( key, LIVECHART_TYPE );

	Long lCount = jOfferCount.get( "count" ).getAsLong() + COUNT_FACTOR;
	jOfferCount.addProperty( "count", lCount );
	if( IS_CONTROL.equals( "true" ) ) {
		Long lControlCount = jOfferCount.get( "count_control" ).getAsLong() + COUNT_FACTOR;
		jOfferCount.addProperty( "count_control", lControlCount );
	}

	/* Daily count for Event Live Chart */
	String dailyCountKey = "DailyCount-target";
	if( IS_CONTROL.equals( "true" ) )
		dailyCountKey = "DailyCount-control";
	JsonObject jDailyCount = null;
	JsonElement eDailyCount = jOfferCount.get( dailyCountKey );
	if( eDailyCount == null ) {
		jDailyCount = new JsonObject();
		jOfferCount.add( dailyCountKey, jDailyCount );
	}else
		jDailyCount = eDailyCount.getAsJsonObject();
	long today = CONTACT_TIME;
	today = today - today %86400000L;
	String dayKey = new Long( today ).toString();
	JsonElement eCount = jDailyCount.get( dayKey );
	long nCount = 1;
	if( eCount != null )
		nCount = eCount.getAsLong() + COUNT_FACTOR;
	jDailyCount.addProperty( dayKey, nCount );

	/* Hourly count for Event Live Chart ******/
	String hourlyCountKey = dailyCountKey.replace( "Daily", "Hourly" ) + "-" + dayKey;
	JsonObject jHourlyCount = null;
	JsonElement eHourlyCount = jOfferCount.get( hourlyCountKey );
	if( eHourlyCount == null ) {
		jHourlyCount = new JsonObject();
		jOfferCount.add( hourlyCountKey, jHourlyCount );
	}else
		jHourlyCount = eHourlyCount.getAsJsonObject();
	java.util.Calendar calendar = java.util.Calendar.getInstance( java.util.TimeZone.getDefault() );
	
	java.util.Calendar cal = java.util.Calendar.getInstance();
	
	java.util.TimeZone tz = java.util.TimeZone.getTimeZone("GMT");

	cal.setTimeZone(tz);
	cal.setTimeInMillis(CONTACT_TIME);
	
	String hourKey = new Integer( cal.get( java.util.Calendar.HOUR_OF_DAY ) ).toString();
	
	eCount = jHourlyCount.get( hourKey );
	nCount = COUNT_FACTOR;
	if( eCount != null )
		nCount = eCount.getAsLong() + COUNT_FACTOR;
	jHourlyCount.addProperty( hourKey, nCount );
	 SIFTMATH.setLiveChartIndicator( key,  LIVECHART_TYPE, jOfferCount );
           return jOfferCount;
line 1:0 no viable alternative at input 'String'
------------Infered params PROGRAM_ID -- java.lang.String -- String
------------Infered params OFFER_ID -- java.lang.String -- String
------------Infered params IS_SIMULATED -- java.lang.String -- String
------------Infered params LIVECHART_TYPE -- java.lang.String -- String
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params COUNT_FACTOR -- int -- int
------------Infered params IS_CONTROL -- java.lang.String -- String
------------Infered params CONTACT_TIME -- long -- long
------------Infered params HOUR_OF_DAY -- int -- int
Compiling Function : "getLatestCreditExpiryDate" -- > "String latestCreditExpDte =\"NULL\";\r\nif(CREDIT_SERIES_LifeTime!=null && !CREDIT_SERIES_LifeTime.isJsonNull() && CREDIT_SERIES_LifeTime.entrySet().size()!=0){\r\nlong date = CREDIT_SERIES_LifeTime.get(\"latestCreditExpiryDate\").getAsLong();\r\njava.util.Date dte= new java.util.Date(date);\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyyMMddHHmmss\");\r\nlatestCreditExpDte = d.format(dte);\r\n}\r\nreturn latestCreditExpDte;"
Preprocessed Expression : String latestCreditExpDte ="NULL";
if(CREDIT_SERIES_LifeTime!=null && !CREDIT_SERIES_LifeTime.isJsonNull() && CREDIT_SERIES_LifeTime.entrySet().size()!=0){
long date = CREDIT_SERIES_LifeTime.get("latestCreditExpiryDate").getAsLong();
java.util.Date dte= new java.util.Date(date);
java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
latestCreditExpDte = d.format(dte);
}
return latestCreditExpDte;
line 1:0 no viable alternative at input 'String'
------------Infered params CREDIT_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getPercentBalLeft" -- > "JsonElement bundleInfoJele = BUNDLE_INFO_LifeTime;\r\n\t\tdouble percentBalLeft = -99;\r\n\t\tif( bundleInfoJele != null && !bundleInfoJele.isJsonNull() ) {\r\n\t\t\tboolean flag = false;\r\n\t\t\tdouble sumOfbundleQuantity = 0;\r\n\t\t\tdouble sumOftotalActiveBalance = 0;\r\n\t\t\tif( \"bundleName\".equals( level ) ) {\r\n\t\t\t\tJsonElement bundleNameJele = bundleInfoJele.getAsJsonObject().get( value );\r\n\t\t\t\tif( bundleNameJele != null && !bundleNameJele.isJsonNull() ) {\r\n\t\t\t\t\tJsonElement bundleQuantityJele = bundleNameJele.getAsJsonObject().get( \"bundleQuantity\" );\r\n\t\t\t\t\tJsonElement totalActiveBalanceJele = bundleNameJele.getAsJsonObject().get( \"totalActiveBalance\" );\r\n\t\t\t\t\tif( totalActiveBalanceJele != null && !totalActiveBalanceJele.isJsonNull() && bundleQuantityJele != null\r\n\t\t\t\t\t\t\t&& !bundleQuantityJele.isJsonNull() ) {\r\n\t\t\t\t\t\tsumOftotalActiveBalance = sumOftotalActiveBalance + totalActiveBalanceJele.getAsDouble();\r\n\t\t\t\t\t\tsumOfbundleQuantity = sumOfbundleQuantity + bundleQuantityJele.getAsDouble();\r\n\t\t\t\t\t\tflag = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else {\r\n\t\t\t\tfor( java.util.Map.Entry< String, JsonElement > entry : bundleInfoJele.getAsJsonObject().entrySet() ) {\r\n\t\t\t\tcom.google.gson.Gson gson = new com.google.gson.Gson();\r\n\t\t\t\t\tJsonElement bundleNameJEle = gson.toJsonTree(entry.getValue());\r\n\t\t\t\t\tif( bundleNameJEle != null && !bundleNameJEle.isJsonNull() ) {\r\n\t\t\t\t\t\tJsonElement bundleTypeJele = bundleNameJEle.getAsJsonObject().get( level );\r\n\t\t\t\t\t\tif( bundleTypeJele != null && !bundleTypeJele.isJsonNull() ) {\r\n\t\t\t\t\t\t\tif( bundleTypeJele.getAsString().equals( value ) ) {\r\n\t\t\t\t\t\t\t\tJsonElement bundleQuantityJele = bundleNameJEle.getAsJsonObject().get( \"bundleQuantity\" );\r\n\t\t\t\t\t\t\t\tJsonElement totalActiveBalanceJele = bundleNameJEle.getAsJsonObject().get( \"totalActiveBalance\" );\r\n\t\t\t\t\t\t\t\tif( totalActiveBalanceJele != null && !totalActiveBalanceJele.isJsonNull() && bundleQuantityJele != null\r\n\t\t\t\t\t\t\t\t\t\t&& !bundleQuantityJele.isJsonNull() ) {\r\n\t\t\t\t\t\t\t\t\tsumOftotalActiveBalance = sumOftotalActiveBalance + totalActiveBalanceJele.getAsDouble();\r\n\t\t\t\t\t\t\t\t\tsumOfbundleQuantity = sumOfbundleQuantity + bundleQuantityJele.getAsDouble();\r\n\t\t\t\t\t\t\t\t\tflag = true;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif( flag ) {\r\n\t\t\t\tpercentBalLeft = ( sumOftotalActiveBalance * 100 ) / sumOfbundleQuantity;\r\n\t\t\t\tpercentBalLeft = ( double ) java.lang.Math.round( percentBalLeft * 100.0 ) / 100.0;\r\n\t\t\t\treturn percentBalLeft;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn percentBalLeft;"
Preprocessed Expression : JsonElement bundleInfoJele = BUNDLE_INFO_LifeTime;
		double percentBalLeft = -99;
		if( bundleInfoJele != null && !bundleInfoJele.isJsonNull() ) {
			boolean flag = false;
			double sumOfbundleQuantity = 0;
			double sumOftotalActiveBalance = 0;
			if( "bundleName".equals( level ) ) {
				JsonElement bundleNameJele = bundleInfoJele.getAsJsonObject().get( value );
				if( bundleNameJele != null && !bundleNameJele.isJsonNull() ) {
					JsonElement bundleQuantityJele = bundleNameJele.getAsJsonObject().get( "bundleQuantity" );
					JsonElement totalActiveBalanceJele = bundleNameJele.getAsJsonObject().get( "totalActiveBalance" );
					if( totalActiveBalanceJele != null && !totalActiveBalanceJele.isJsonNull() && bundleQuantityJele != null
							&& !bundleQuantityJele.isJsonNull() ) {
						sumOftotalActiveBalance = sumOftotalActiveBalance + totalActiveBalanceJele.getAsDouble();
						sumOfbundleQuantity = sumOfbundleQuantity + bundleQuantityJele.getAsDouble();
						flag = true;
					}
				}
			}else {
				for( java.util.Map.Entry< String, JsonElement > entry : bundleInfoJele.getAsJsonObject().entrySet() ) {
				com.google.gson.Gson gson = new com.google.gson.Gson();
					JsonElement bundleNameJEle = gson.toJsonTree(entry.getValue());
					if( bundleNameJEle != null && !bundleNameJEle.isJsonNull() ) {
						JsonElement bundleTypeJele = bundleNameJEle.getAsJsonObject().get( level );
						if( bundleTypeJele != null && !bundleTypeJele.isJsonNull() ) {
							if( bundleTypeJele.getAsString().equals( value ) ) {
								JsonElement bundleQuantityJele = bundleNameJEle.getAsJsonObject().get( "bundleQuantity" );
								JsonElement totalActiveBalanceJele = bundleNameJEle.getAsJsonObject().get( "totalActiveBalance" );
								if( totalActiveBalanceJele != null && !totalActiveBalanceJele.isJsonNull() && bundleQuantityJele != null
										&& !bundleQuantityJele.isJsonNull() ) {
									sumOftotalActiveBalance = sumOftotalActiveBalance + totalActiveBalanceJele.getAsDouble();
									sumOfbundleQuantity = sumOfbundleQuantity + bundleQuantityJele.getAsDouble();
									flag = true;
								}

							}
						}

					}
				}
			}
			if( flag ) {
				percentBalLeft = ( sumOftotalActiveBalance * 100 ) / sumOfbundleQuantity;
				percentBalLeft = ( double ) java.lang.Math.round( percentBalLeft * 100.0 ) / 100.0;
				return percentBalLeft;
			}
		}
		return percentBalLeft;
line 1:0 no viable alternative at input 'JsonElement'
------------Infered params BUNDLE_INFO_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getThresholdBurnerRate" -- > "JsonElement bundleThreJele = BUNDLE_THRESHOLD_LifeTime;\r\n\t\tStringBuilder burnerString = new StringBuilder();\r\n\t\tif( bundleThreJele == null || bundleThreJele.isJsonNull() ) {\r\n\t\t\tfor( int i = 0; i < range; i++ ) {\r\n\t\t\t\tburnerString.append( -99 ).append( \",\" );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\tJsonElement bundleNameJele = bundleThreJele.getAsJsonObject().get( bundleName );\r\n\r\n\t\tif( bundleNameJele != null && !bundleNameJele.isJsonNull() ) {\r\n\t\t\tJsonElement burnerHistoryJele = bundleNameJele.getAsJsonObject().get( \"burnerHistory\" );\r\n\t\t\tif( burnerHistoryJele != null && burnerHistoryJele.getAsJsonArray().size() > 0 ) {\r\n\t\t\t\tJsonArray burnerArray = burnerHistoryJele.getAsJsonArray();\r\n\t\t\t\tint arraySize = burnerHistoryJele.getAsJsonArray().size();\r\n\t\t\t\tif( arraySize < range ) {\r\n\t\t\t\t\tfor( int i = ( arraySize - 1 ); i >= 0; i-- ) {\r\n\t\t\t\t\t\tburnerString.append( burnerArray.get( i ).getAsDouble() ).append( \",\" );\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor( int j = 0; j < ( range - arraySize ); j++ ) {\r\n\t\t\t\t\t\tburnerString.append( -99 ).append( \",\" );\r\n\t\t\t\t\t}\r\n\t\t\t\t}else {\r\n\t\t\t\t\tfor( int i = ( arraySize - 1 ); i >= ( arraySize - range ); i-- ) {\r\n\t\t\t\t\t\tburnerString.append( burnerArray.get( i ).getAsDouble() ).append( \",\" );\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}else {\r\n\t\t\t\tfor( int i = 0; i < range; i++ ) {\r\n\t\t\t\t\tburnerString.append( -99 ).append( \",\" );\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}else {\r\n\t\t\tfor( int i = 0; i < range; i++ ) {\r\n\t\t\t\tburnerString.append( -99 ).append( \",\" );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\tString burString = burnerString.toString();\r\n\t\tburString = burString.substring( 0, burString.length() - 1 );\r\n\t\treturn burString;"
Preprocessed Expression : JsonElement bundleThreJele = BUNDLE_THRESHOLD_LifeTime;
		StringBuilder burnerString = new StringBuilder();
		if( bundleThreJele == null || bundleThreJele.isJsonNull() ) {
			for( int i = 0; i < range; i++ ) {
				burnerString.append( -99 ).append( "," );

			}
		}
		JsonElement bundleNameJele = bundleThreJele.getAsJsonObject().get( bundleName );

		if( bundleNameJele != null && !bundleNameJele.isJsonNull() ) {
			JsonElement burnerHistoryJele = bundleNameJele.getAsJsonObject().get( "burnerHistory" );
			if( burnerHistoryJele != null && burnerHistoryJele.getAsJsonArray().size() > 0 ) {
				JsonArray burnerArray = burnerHistoryJele.getAsJsonArray();
				int arraySize = burnerHistoryJele.getAsJsonArray().size();
				if( arraySize < range ) {
					for( int i = ( arraySize - 1 ); i >= 0; i-- ) {
						burnerString.append( burnerArray.get( i ).getAsDouble() ).append( "," );

					}
					for( int j = 0; j < ( range - arraySize ); j++ ) {
						burnerString.append( -99 ).append( "," );
					}
				}else {
					for( int i = ( arraySize - 1 ); i >= ( arraySize - range ); i-- ) {
						burnerString.append( burnerArray.get( i ).getAsDouble() ).append( "," );

					}
				}

			}else {
				for( int i = 0; i < range; i++ ) {
					burnerString.append( -99 ).append( "," );

				}
			}

		}else {
			for( int i = 0; i < range; i++ ) {
				burnerString.append( -99 ).append( "," );

			}
		}
		String burString = burnerString.toString();
		burString = burString.substring( 0, burString.length() - 1 );
		return burString;
line 1:0 no viable alternative at input 'JsonElement'
------------Infered params BUNDLE_THRESHOLD_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "evaluateNumericOperation" -- > "// =, >, >=, <, <=, !=\r\n\t\tif( operation.equals( \"=\" ) )\r\n\t\t\treturn lhs == rhs;\r\n\t\telse if( operation.equals( \">\" ) )\r\n\t\t\treturn lhs > rhs;\r\n\t\telse if( operation.equals( \">=\" ) )\r\n\t\t\treturn lhs >= rhs;\r\n\t\telse if( operation.equals( \"<\" ) )\r\n\t\t\treturn lhs < rhs;\r\n\t\telse if( operation.equals( \"<=\" ) )\r\n\t\t\treturn lhs <= rhs;\r\n\t\telse if( operation.equals( \"!=\" ) )\r\n\t\t\treturn lhs != rhs;\r\n\t\treturn false;"
Preprocessed Expression : // =, >, >=, <, <=, !=
		if( operation.equals( "=" ) )
			return lhs == rhs;
		else if( operation.equals( ">" ) )
			return lhs > rhs;
		else if( operation.equals( ">=" ) )
			return lhs >= rhs;
		else if( operation.equals( "<" ) )
			return lhs < rhs;
		else if( operation.equals( "<=" ) )
			return lhs <= rhs;
		else if( operation.equals( "!=" ) )
			return lhs != rhs;
		return false;
line 2:2 no viable alternative at input 'if'
Compiling Function : "getLatestCommercialOfferDate" -- > "long date = getCommercialOfferUpdateDate();\r\nif(date!=0l){\r\njava.util.Date dte = new java.util.Date(date);\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyyMMddHHmmss\");\r\nString commOfferDate = d.format(dte);\r\nreturn commOfferDate;\r\n}\r\nreturn \"NULL\";"
Preprocessed Expression : long date =  SIFTMATH.execLongFunction("getCommercialOfferUpdateDate" );
if(date!=0l){
java.util.Date dte = new java.util.Date(date);
java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
String commOfferDate = d.format(dte);
return commOfferDate;
}
return "NULL";
line 1:0 no viable alternative at input 'long'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getLatestRechargeDate" -- > "String date = \"NULL\";\r\nif(LAST_RECHARGE_DATE_LifeTime != 0 ){\r\nlong rechargeDate = LAST_RECHARGE_DATE_LifeTime;\r\njava.util.Date dte= new java.util.Date(rechargeDate);\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyyMMddHHmmss\");\r\ndate = d.format(dte);\r\n}\r\nreturn date;"
Preprocessed Expression : String date = "NULL";
if(LAST_RECHARGE_DATE_LifeTime != 0 ){
long rechargeDate = LAST_RECHARGE_DATE_LifeTime;
java.util.Date dte= new java.util.Date(rechargeDate);
java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
date = d.format(dte);
}
return date;
line 1:0 no viable alternative at input 'String'
------------Infered params LAST_RECHARGE_DATE_LifeTime -- long -- long
Compiling Function : "getCreditInfo" -- > "String creidtAllCount=\"\";\r\nString latestCreditExpiryDate =\"\";\r\nString latestCreditActivityDate=\"\";\r\nString creditAllCountValue=\"\";\r\nString latestRechargeDate = \"\";\r\nString lastUsageDateInThisRecharge = \"\";\r\nString activeDaysInThisRecharge = \"\";\r\nString rechargeAmount = \"\";\r\nString changeInBalance = \"\";\r\nString rechargeMethod = \"\";\r\nlong latestRechrgDte = 0l;\r\nString latestCreditMethod = \"\";\r\nString latestCreditValue = \"\";\r\nString previousCreditValue = \"\";\r\nString lastBalTimestamp = \"\";\r\nString balance = \"\";\r\n\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\nd.setTimeZone(java.util.TimeZone.getTimeZone(\"GMT\"));\r\n\r\nif (CREDIT_ALL_Count_LifeTime!= -1.0) {\r\ncreidtAllCount=String.valueOf((int)CREDIT_ALL_Count_LifeTime);\r\n}\r\n\r\nif (CREDIT_SERIES_LifeTime != null && !CREDIT_SERIES_LifeTime.isJsonNull() && CREDIT_SERIES_LifeTime.entrySet().size()!=0) {\r\nif(CREDIT_SERIES_LifeTime.has(\"latestCreditExpiryDate\")){\r\nlong lCreditExDate = CREDIT_SERIES_LifeTime.get(\"latestCreditExpiryDate\").getAsLong();\r\njava.util.Date cdte= new java.util.Date(lCreditExDate);\r\nlatestCreditExpiryDate =d.format(cdte);\r\n}\r\nif(CREDIT_SERIES_LifeTime.has(\"latestCreditActivityDate\")){\r\nlong lCreditActivityDate = CREDIT_SERIES_LifeTime.get(\"latestCreditActivityDate\").getAsLong();\r\njava.util.Date cdate= new java.util.Date(lCreditActivityDate);\r\nlatestCreditActivityDate = d.format(cdate);\r\n}\r\nif(CREDIT_SERIES_LifeTime.has(\"latestCreditMethod\")){\r\nlatestCreditMethod = CREDIT_SERIES_LifeTime.get(\"latestCreditMethod\").getAsString();\r\nDouble lCreditValue = CREDIT_SERIES_LifeTime.get(\"latestCreditValue\").getAsDouble();\r\nlCreditValue=Math.round(lCreditValue* 100.0) / 100.0;\r\nlatestCreditValue=String.valueOf(lCreditValue);\r\n}\r\nif(CREDIT_SERIES_LifeTime.has(\"previousCreditValue\")){\r\nDouble pCreditValue=CREDIT_SERIES_LifeTime.get(\"previousCreditValue\").getAsDouble();\r\npCreditValue=Math.round(pCreditValue* 100.0) / 100.0;\r\npreviousCreditValue =String.valueOf(pCreditValue);\r\n}\r\n}\r\n\r\nif(RECHARGE_BLOCK_SERIES_LifeTime!=null && !RECHARGE_BLOCK_SERIES_LifeTime.isJsonNull() && RECHARGE_BLOCK_SERIES_LifeTime.entrySet().size()!=0){\r\nJsonArray rechargeBlockArr = RECHARGE_BLOCK_SERIES_LifeTime.get(\"keys\").getAsJsonArray();\r\nif(rechargeBlockArr.size()!=0){\r\nlatestRechrgDte = rechargeBlockArr.get(rechargeBlockArr.size()-1).getAsLong();\r\n}\r\nJsonObject obj = RECHARGE_BLOCK_SERIES_LifeTime.get(String.valueOf(latestRechrgDte)).getAsJsonObject();\r\nif(obj!=null && !obj.isJsonNull() && obj.entrySet().size()!=0){\r\nif(obj.has(\"LAST_ACTIVITY_DATE\")){\r\nlong lastActivityDate = obj.get(\"LAST_ACTIVITY_DATE\").getAsLong();\r\njava.util.Date dte2= new java.util.Date(lastActivityDate);\r\nlastUsageDateInThisRecharge = d.format(dte2);\r\n}\r\nif(obj.has(\"ACTIVE_DAYS\"))\r\nactiveDaysInThisRecharge = String.valueOf(obj.get(\"ACTIVE_DAYS\").getAsInt());\r\nif(obj.has(\"RECHARGE_DATA\")) {\r\nJsonArray rechrgeData = obj.get(\"RECHARGE_DATA\").getAsJsonArray();\r\ndouble rAmount = rechrgeData.get(0).getAsDouble();\r\nrAmount=Math.round(rAmount* 100.0) / 100.0;\r\nrechargeAmount=String.valueOf(rAmount);\r\ndouble cInBalance = rechrgeData.get(1).getAsDouble();\r\ncInBalance=Math.round(cInBalance* 100.0) / 100.0;\r\nchangeInBalance=String.valueOf(cInBalance);\r\n}\r\n}\r\n}\r\n\r\nif(LATEST_BALANCE_LifeTime!=null && !LATEST_BALANCE_LifeTime.isJsonNull() && LATEST_BALANCE_LifeTime.entrySet().size()!=0){\r\nif(LATEST_BALANCE_LifeTime.has(\"timestamp\")){\r\nlong ldate = LATEST_BALANCE_LifeTime.get( \"timestamp\" ).getAsLong();\r\njava.util.Date ldte= new java.util.Date(ldate);\r\nlastBalTimestamp = d.format(ldte);\r\n}\r\nif(LATEST_BALANCE_LifeTime.has(\"balance\")){\r\ndouble lbalance = LATEST_BALANCE_LifeTime.get( \"balance\" ).getAsDouble();\r\nlbalance=Math.round(lbalance* 100.0) / 100.0;\r\nbalance=String.valueOf(lbalance);\r\n}\r\n}\r\n\r\nreturn creidtAllCount + \"|\" + latestCreditExpiryDate + \"|\" + latestCreditActivityDate + \"|\" +latestCreditMethod + \"|\" + latestCreditValue + \"|\"+ previousCreditValue + \"|\" + lastUsageDateInThisRecharge + \"|\" + activeDaysInThisRecharge + \"|\" + rechargeAmount + \"|\" + changeInBalance + \"|\" + balance+ \"|\"+lastBalTimestamp;"
Preprocessed Expression : String creidtAllCount="";
String latestCreditExpiryDate ="";
String latestCreditActivityDate="";
String creditAllCountValue="";
String latestRechargeDate = "";
String lastUsageDateInThisRecharge = "";
String activeDaysInThisRecharge = "";
String rechargeAmount = "";
String changeInBalance = "";
String rechargeMethod = "";
long latestRechrgDte = 0l;
String latestCreditMethod = "";
String latestCreditValue = "";
String previousCreditValue = "";
String lastBalTimestamp = "";
String balance = "";

java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
d.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));

if (CREDIT_ALL_Count_LifeTime!= -1.0) {
creidtAllCount=String.valueOf((int)CREDIT_ALL_Count_LifeTime);
}

if (CREDIT_SERIES_LifeTime != null && !CREDIT_SERIES_LifeTime.isJsonNull() && CREDIT_SERIES_LifeTime.entrySet().size()!=0) {
if(CREDIT_SERIES_LifeTime.has("latestCreditExpiryDate")){
long lCreditExDate = CREDIT_SERIES_LifeTime.get("latestCreditExpiryDate").getAsLong();
java.util.Date cdte= new java.util.Date(lCreditExDate);
latestCreditExpiryDate =d.format(cdte);
}
if(CREDIT_SERIES_LifeTime.has("latestCreditActivityDate")){
long lCreditActivityDate = CREDIT_SERIES_LifeTime.get("latestCreditActivityDate").getAsLong();
java.util.Date cdate= new java.util.Date(lCreditActivityDate);
latestCreditActivityDate = d.format(cdate);
}
if(CREDIT_SERIES_LifeTime.has("latestCreditMethod")){
latestCreditMethod = CREDIT_SERIES_LifeTime.get("latestCreditMethod").getAsString();
Double lCreditValue = CREDIT_SERIES_LifeTime.get("latestCreditValue").getAsDouble();
lCreditValue=Math.round(lCreditValue* 100.0) / 100.0;
latestCreditValue=String.valueOf(lCreditValue);
}
if(CREDIT_SERIES_LifeTime.has("previousCreditValue")){
Double pCreditValue=CREDIT_SERIES_LifeTime.get("previousCreditValue").getAsDouble();
pCreditValue=Math.round(pCreditValue* 100.0) / 100.0;
previousCreditValue =String.valueOf(pCreditValue);
}
}

if(RECHARGE_BLOCK_SERIES_LifeTime!=null && !RECHARGE_BLOCK_SERIES_LifeTime.isJsonNull() && RECHARGE_BLOCK_SERIES_LifeTime.entrySet().size()!=0){
JsonArray rechargeBlockArr = RECHARGE_BLOCK_SERIES_LifeTime.get("keys").getAsJsonArray();
if(rechargeBlockArr.size()!=0){
latestRechrgDte = rechargeBlockArr.get(rechargeBlockArr.size()-1).getAsLong();
}
JsonObject obj = RECHARGE_BLOCK_SERIES_LifeTime.get(String.valueOf(latestRechrgDte)).getAsJsonObject();
if(obj!=null && !obj.isJsonNull() && obj.entrySet().size()!=0){
if(obj.has("LAST_ACTIVITY_DATE")){
long lastActivityDate = obj.get("LAST_ACTIVITY_DATE").getAsLong();
java.util.Date dte2= new java.util.Date(lastActivityDate);
lastUsageDateInThisRecharge = d.format(dte2);
}
if(obj.has("ACTIVE_DAYS"))
activeDaysInThisRecharge = String.valueOf(obj.get("ACTIVE_DAYS").getAsInt());
if(obj.has("RECHARGE_DATA")) {
JsonArray rechrgeData = obj.get("RECHARGE_DATA").getAsJsonArray();
double rAmount = rechrgeData.get(0).getAsDouble();
rAmount=Math.round(rAmount* 100.0) / 100.0;
rechargeAmount=String.valueOf(rAmount);
double cInBalance = rechrgeData.get(1).getAsDouble();
cInBalance=Math.round(cInBalance* 100.0) / 100.0;
changeInBalance=String.valueOf(cInBalance);
}
}
}

if(LATEST_BALANCE_LifeTime!=null && !LATEST_BALANCE_LifeTime.isJsonNull() && LATEST_BALANCE_LifeTime.entrySet().size()!=0){
if(LATEST_BALANCE_LifeTime.has("timestamp")){
long ldate = LATEST_BALANCE_LifeTime.get( "timestamp" ).getAsLong();
java.util.Date ldte= new java.util.Date(ldate);
lastBalTimestamp = d.format(ldte);
}
if(LATEST_BALANCE_LifeTime.has("balance")){
double lbalance = LATEST_BALANCE_LifeTime.get( "balance" ).getAsDouble();
lbalance=Math.round(lbalance* 100.0) / 100.0;
balance=String.valueOf(lbalance);
}
}

return creidtAllCount + "|" + latestCreditExpiryDate + "|" + latestCreditActivityDate + "|" +latestCreditMethod + "|" + latestCreditValue + "|"+ previousCreditValue + "|" + lastUsageDateInThisRecharge + "|" + activeDaysInThisRecharge + "|" + rechargeAmount + "|" + changeInBalance + "|" + balance+ "|"+lastBalTimestamp;
line 1:0 no viable alternative at input 'String'
------------Infered params CREDIT_ALL_Count_LifeTime -- double -- double
------------Infered params CREDIT_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
------------Infered params RECHARGE_BLOCK_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
------------Infered params LATEST_BALANCE_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getLatestCreditMethodForExport" -- > "JsonElement eCreditSeries = CREDIT_SERIES_LifeTime;\r\nif(eCreditSeries != null  ){\r\nString creditMethod = getLatestCreditMethod() ;\r\n\r\nif( creditMethod  != null  ){ \r\nreturn creditMethod;\r\n}\r\n}\r\nreturn \"\";"
Preprocessed Expression : JsonElement eCreditSeries = CREDIT_SERIES_LifeTime;
if(eCreditSeries != null  ){
String creditMethod =  SIFTMATH.getLatestCreditMethod() ;

if( creditMethod  != null  ){ 
return creditMethod;
}
}
return "";
line 1:0 no viable alternative at input 'JsonElement'
------------Infered params CREDIT_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getVoiceUsageInfo" -- > "String totalVoiceCount = \"\";\r\nString totalVoiceMinutes = \"\";\r\nString totalVoiceSpend = \"\";\r\nString localVoiceCount = \"\";\r\nString localVoiceMinutes = \"\";\r\nString localVoiceSpend = \"\";\r\nString iddCount = \"\";\r\nString iddMinutes = \"\";\r\nString iddSpend = \"\";\r\nString latestVoiceUsageDate = \"NULL\";\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyyMMddHHmmss\");\r\nif(VOICE_USAGE_SERIES_LifeTime!=null && !VOICE_USAGE_SERIES_LifeTime.isJsonNull() && VOICE_USAGE_SERIES_LifeTime.entrySet().size()!=0) {\r\nJsonArray ekeys = VOICE_USAGE_SERIES_LifeTime.get(\"keys\").getAsJsonArray();\r\nif(ekeys.size()!=0){\r\nlong latestDate = ekeys.get(ekeys.size()-1).getAsLong();\r\njava.util.Date dte= new java.util.Date(latestDate);\r\nlatestVoiceUsageDate = d.format(dte);\r\nif(VOICE_USAGE_SERIES_LifeTime.has(String.valueOf(latestDate))){\r\nJsonArray voiceUsageInfo = VOICE_USAGE_SERIES_LifeTime.get(String.valueOf(latestDate)).getAsJsonArray();\r\ntotalVoiceCount = voiceUsageInfo.get(0).getAsString();\r\ntotalVoiceMinutes = voiceUsageInfo.get(1).getAsString();\r\ntotalVoiceSpend = voiceUsageInfo.get(2).getAsString();\r\nlocalVoiceCount = voiceUsageInfo.get(3).getAsString();\r\nlocalVoiceMinutes = voiceUsageInfo.get(4).getAsString();\r\nlocalVoiceSpend = voiceUsageInfo.get(5).getAsString();\r\niddCount = voiceUsageInfo.get(6).getAsString();\r\niddMinutes = voiceUsageInfo.get(7).getAsString();\r\niddSpend = voiceUsageInfo.get(8).getAsString();\r\n}\r\n}\r\n}\r\nreturn totalVoiceCount + \"~\" + totalVoiceMinutes + \"~\" + totalVoiceSpend + \"~\" + localVoiceCount + \"~\" + localVoiceMinutes + \"~\" + localVoiceSpend + \"~\" + iddCount + \"~\" + iddMinutes + \"~\" + iddSpend + \"~\" + latestVoiceUsageDate;"
Preprocessed Expression : String totalVoiceCount = "";
String totalVoiceMinutes = "";
String totalVoiceSpend = "";
String localVoiceCount = "";
String localVoiceMinutes = "";
String localVoiceSpend = "";
String iddCount = "";
String iddMinutes = "";
String iddSpend = "";
String latestVoiceUsageDate = "NULL";
java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
if(VOICE_USAGE_SERIES_LifeTime!=null && !VOICE_USAGE_SERIES_LifeTime.isJsonNull() && VOICE_USAGE_SERIES_LifeTime.entrySet().size()!=0) {
JsonArray ekeys = VOICE_USAGE_SERIES_LifeTime.get("keys").getAsJsonArray();
if(ekeys.size()!=0){
long latestDate = ekeys.get(ekeys.size()-1).getAsLong();
java.util.Date dte= new java.util.Date(latestDate);
latestVoiceUsageDate = d.format(dte);
if(VOICE_USAGE_SERIES_LifeTime.has(String.valueOf(latestDate))){
JsonArray voiceUsageInfo = VOICE_USAGE_SERIES_LifeTime.get(String.valueOf(latestDate)).getAsJsonArray();
totalVoiceCount = voiceUsageInfo.get(0).getAsString();
totalVoiceMinutes = voiceUsageInfo.get(1).getAsString();
totalVoiceSpend = voiceUsageInfo.get(2).getAsString();
localVoiceCount = voiceUsageInfo.get(3).getAsString();
localVoiceMinutes = voiceUsageInfo.get(4).getAsString();
localVoiceSpend = voiceUsageInfo.get(5).getAsString();
iddCount = voiceUsageInfo.get(6).getAsString();
iddMinutes = voiceUsageInfo.get(7).getAsString();
iddSpend = voiceUsageInfo.get(8).getAsString();
}
}
}
return totalVoiceCount + "~" + totalVoiceMinutes + "~" + totalVoiceSpend + "~" + localVoiceCount + "~" + localVoiceMinutes + "~" + localVoiceSpend + "~" + iddCount + "~" + iddMinutes + "~" + iddSpend + "~" + latestVoiceUsageDate;
line 1:0 no viable alternative at input 'String'
------------Infered params VOICE_USAGE_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getStatusOfLoyaltyEnrollement" -- > "String LoyaltyEnrolmentStatus=\"\";\r\nif (LOYALTY_ENROLMENT_SERIES_LifeTime != null && !LOYALTY_ENROLMENT_SERIES_LifeTime.isJsonNull()\r\n\t\t\t\t&& LOYALTY_ENROLMENT_SERIES_LifeTime.entrySet().size() != 0) {\r\n\t\t\tJsonArray loyaltyArr = LOYALTY_ENROLMENT_SERIES_LifeTime.get(\"keys\").getAsJsonArray();\r\n\t\t\tif (loyaltyArr.size() != 0) {\r\n\t\t\t\tString lkey = loyaltyArr.get(loyaltyArr.size() - 1).getAsString();\r\n\t\t\t\tJsonObject lvalues=LOYALTY_ENROLMENT_SERIES_LifeTime.get(lkey).getAsJsonObject();\r\n\t\t\t\tif (lvalues != null && !lvalues.isJsonNull()\r\n\t\t\t\t\t&& lvalues.entrySet().size() != 0) {\r\n\t\t\t\tif(lvalues.has(\"LoyaltyEnrolmentStatus\")) {\r\n\t\t\t\tLoyaltyEnrolmentStatus=lvalues.get(\"LoyaltyEnrolmentStatus\").getAsString();\r\n\t\t\t\treturn LoyaltyEnrolmentStatus;\r\n}}}}return LoyaltyEnrolmentStatus;"
Preprocessed Expression : String LoyaltyEnrolmentStatus="";
if (LOYALTY_ENROLMENT_SERIES_LifeTime != null && !LOYALTY_ENROLMENT_SERIES_LifeTime.isJsonNull()
				&& LOYALTY_ENROLMENT_SERIES_LifeTime.entrySet().size() != 0) {
			JsonArray loyaltyArr = LOYALTY_ENROLMENT_SERIES_LifeTime.get("keys").getAsJsonArray();
			if (loyaltyArr.size() != 0) {
				String lkey = loyaltyArr.get(loyaltyArr.size() - 1).getAsString();
				JsonObject lvalues=LOYALTY_ENROLMENT_SERIES_LifeTime.get(lkey).getAsJsonObject();
				if (lvalues != null && !lvalues.isJsonNull()
					&& lvalues.entrySet().size() != 0) {
				if(lvalues.has("LoyaltyEnrolmentStatus")) {
				LoyaltyEnrolmentStatus=lvalues.get("LoyaltyEnrolmentStatus").getAsString();
				return LoyaltyEnrolmentStatus;
}}}}return LoyaltyEnrolmentStatus;
line 1:0 no viable alternative at input 'String'
------------Infered params LOYALTY_ENROLMENT_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getCurrentMonitoringOffersEndTime" -- > "JsonArray currentlyMonitored = isCurrentlyMonitored();\r\nif (currentlyMonitored!=null && !currentlyMonitored.isJsonNull() && currentlyMonitored.size() >0){\r\n    return (currentlyMonitored.get(1).getAsString());\r\n}\r\nreturn \"NULL\";"
Preprocessed Expression : JsonArray currentlyMonitored =  SIFTMATH.execJsonArrayFunction("isCurrentlyMonitored" );
if (currentlyMonitored!=null && !currentlyMonitored.isJsonNull() && currentlyMonitored.size() >0){
    return (currentlyMonitored.get(1).getAsString());
}
return "NULL";
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
line 1:0 no viable alternative at input 'JsonArray'
Compiling Function : "getBonusDetails" -- > "String result=\"\";\r\nif (BONUS_PO_ID_LifeTime!= null && !BONUS_PO_ID_LifeTime.isJsonNull() && BONUS_PO_ID_LifeTime.entrySet().size()>0){\r\n    String BONUS_POID = \"\";\r\n    String PRICE_BEFDISCOUNT = \"\";\r\n    String DISCOUNTAMOUNT = \"\";\r\n    String DISCOUNTPERCENT = \"\";\r\n    if(BONUS_PO_ID_LifeTime.has(\"keys\")){\r\n        JsonArray keys = BONUS_PO_ID_LifeTime.get(\"keys\").getAsJsonArray();\r\n        for (int i = 0; i < keys.size(); i++) {\r\n\t\t\tJsonObject keyObj = BONUS_PO_ID_LifeTime.get(String.valueOf(keys.get(i))).getAsJsonObject();\r\n            java.util.Set<Entry<String, JsonElement>> entrySet = keyObj.entrySet();\r\n\t\t\tfor (java.util.Map.Entry<String, JsonElement> entry : entrySet) {\r\n\t\t        JsonArray innerArr = (JsonArray)entry.getValue();\r\n    \t\t\tif (BONUS_POID.equals(\"\")) \r\n\t\t\t\t\tBONUS_POID = entry.getKey().toString();\r\n\t\t\t\telse \r\n\t\t\t\t\tBONUS_POID = BONUS_POID + \"~\" + entry.getKey().toString();\r\n\t\t\t\r\n\t\t\t\tif (PRICE_BEFDISCOUNT.equals(\"\")) \r\n\t\t\t\t\tPRICE_BEFDISCOUNT = innerArr.get(0).getAsString();\r\n\t\t\t\telse \r\n\t\t\t\t\tPRICE_BEFDISCOUNT = PRICE_BEFDISCOUNT + \"~\" + innerArr.get(0).getAsString();\r\n\t\t\t\r\n\t\t\t\tif (DISCOUNTAMOUNT.equals(\"\"))\r\n\t\t\t\t\tDISCOUNTAMOUNT = innerArr.get(1).getAsString();\r\n\t\t\t\telse\r\n\t\t\t\t\tDISCOUNTAMOUNT = DISCOUNTAMOUNT + \"~\" + innerArr.get(1);\r\n\t\r\n\t\t\t\tif (DISCOUNTPERCENT.equals(\"\"))\r\n\t\t\t\t\tDISCOUNTPERCENT = innerArr.get(2).getAsString();\r\n\t\t\t\telse\r\n\t\t\t\t\tDISCOUNTPERCENT = DISCOUNTPERCENT + \"~\" + innerArr.get(2);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\tresult = BONUS_POID + \"|\" + PRICE_BEFDISCOUNT + \"|\" + DISCOUNTAMOUNT + \"|\" + DISCOUNTPERCENT;\r\n\tresult=result.replace(\"-99\",\"\");\r\n\treturn result;\r\n}return result;"
Preprocessed Expression : String result="";
if (BONUS_PO_ID_LifeTime!= null && !BONUS_PO_ID_LifeTime.isJsonNull() && BONUS_PO_ID_LifeTime.entrySet().size()>0){
    String BONUS_POID = "";
    String PRICE_BEFDISCOUNT = "";
    String DISCOUNTAMOUNT = "";
    String DISCOUNTPERCENT = "";
    if(BONUS_PO_ID_LifeTime.has("keys")){
        JsonArray keys = BONUS_PO_ID_LifeTime.get("keys").getAsJsonArray();
        for (int i = 0; i < keys.size(); i++) {
			JsonObject keyObj = BONUS_PO_ID_LifeTime.get(String.valueOf(keys.get(i))).getAsJsonObject();
            java.util.Set<Entry<String, JsonElement>> entrySet = keyObj.entrySet();
			for (java.util.Map.Entry<String, JsonElement> entry : entrySet) {
		        JsonArray innerArr = (JsonArray)entry.getValue();
    			if (BONUS_POID.equals("")) 
					BONUS_POID = entry.getKey().toString();
				else 
					BONUS_POID = BONUS_POID + "~" + entry.getKey().toString();
			
				if (PRICE_BEFDISCOUNT.equals("")) 
					PRICE_BEFDISCOUNT = innerArr.get(0).getAsString();
				else 
					PRICE_BEFDISCOUNT = PRICE_BEFDISCOUNT + "~" + innerArr.get(0).getAsString();
			
				if (DISCOUNTAMOUNT.equals(""))
					DISCOUNTAMOUNT = innerArr.get(1).getAsString();
				else
					DISCOUNTAMOUNT = DISCOUNTAMOUNT + "~" + innerArr.get(1);
	
				if (DISCOUNTPERCENT.equals(""))
					DISCOUNTPERCENT = innerArr.get(2).getAsString();
				else
					DISCOUNTPERCENT = DISCOUNTPERCENT + "~" + innerArr.get(2);
			}

		}
	}
	result = BONUS_POID + "|" + PRICE_BEFDISCOUNT + "|" + DISCOUNTAMOUNT + "|" + DISCOUNTPERCENT;
	result=result.replace("-99","");
	return result;
}return result;
line 1:0 no viable alternative at input 'String'
------------Infered params BONUS_PO_ID_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getLatestActivityDate" -- > "if(ACTIVITY_TIME_SERIES_LifeTime!=null && !ACTIVITY_TIME_SERIES_LifeTime.isJsonNull() && ACTIVITY_TIME_SERIES_LifeTime.size()>0){\r\n    long date = ACTIVITY_TIME_SERIES_LifeTime.get(0).getAsLong();\r\n    java.util.Date dte= new java.util.Date(date);\r\n    java.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyyMMddHHmmss\");\r\n    String lastActivitydate = d.format(dte);\r\n    return lastActivitydate;\r\n}\r\nreturn \"NULL\";"
Preprocessed Expression : if(ACTIVITY_TIME_SERIES_LifeTime!=null && !ACTIVITY_TIME_SERIES_LifeTime.isJsonNull() && ACTIVITY_TIME_SERIES_LifeTime.size()>0){
    long date = ACTIVITY_TIME_SERIES_LifeTime.get(0).getAsLong();
    java.util.Date dte= new java.util.Date(date);
    java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
    String lastActivitydate = d.format(dte);
    return lastActivitydate;
}
return "NULL";
line 1:0 no viable alternative at input 'if'
------------Infered params ACTIVITY_TIME_SERIES_LifeTime -- com.google.gson.JsonArray -- JsonArray
Compiling Function : "hasLocationContactExceeded" -- > "int inputValuesSize = inputValues.size();\r\n\t\tif( inputValuesSize == 0 )\r\n\t\t\treturn false;\r\n\t\tJsonArray channelArray ;\r\n\t\tif( OFFER_COUNT_LifeTime.has( locationID + \"_dateSeries\" ) && OFFER_COUNT_LifeTime.get( locationID + \"_dateSeries\" ).isJsonArray() && \r\n\t\t\t\tOFFER_COUNT_LifeTime.get( locationID + \"_dateSeries\" ).getAsJsonArray().size() > 0 )\r\n\t\t\tchannelArray = OFFER_COUNT_LifeTime.get( locationID + \"_dateSeries\" ).getAsJsonArray();\r\n\t\telse//return false if no key array\r\n\t\t\treturn false;\r\n\r\n\r\n\r\n\t\tlong currentDay = getCurrentDay();\r\n\t\tint maxDepth = 0;\r\n\t\tfor( int i = inputValuesSize - 1; i >= 0; i -- ) {\r\n\t\t\tJsonObject thisObj = inputValues.get( i ).getAsJsonObject();\r\n\t\t\tif( thisObj.get(\"numberOfDays\") != null && ! thisObj.get(\"numberOfDays\").isJsonNull() && thisObj.get(\"numberOfDays\").getAsString().trim().length() != 0 ) {\r\n\t\t\t\tmaxDepth = thisObj.get(\"numberOfDays\").getAsInt();\r\n\t\t\t\tbreak;\r\n\t\t\t}\t\r\n\t\t}\r\n\t\tif( maxDepth == 0 )\r\n\t\t\treturn false;\r\n\r\n\t\tlong endDay =  currentDay - (( maxDepth - 1) * 86400000l) ;\r\n\r\n\t\tdouble countSoFor = 0.0;\r\n\t\tint channelArrayIndex = channelArray.size()-1;\r\n\t\tboolean breaknow = false;\r\n\r\n\t\tfor( int thisDayCount = 0;  thisDayCount < inputValuesSize   ;thisDayCount++ ) {\r\n\r\n\t\t\tJsonObject thisDayObject = inputValues.get(thisDayCount).getAsJsonObject(); \r\n\t\t\tJsonElement eleKey = thisDayObject.get(\"numberOfDays\");\r\n\t\t\tJsonElement eleValue = thisDayObject.get(\"contactCount\");\r\n\t\t\tif( eleKey == null || eleKey.isJsonNull() || eleKey.getAsString().trim().length() == 0 || eleValue == null || eleValue.isJsonNull() || eleValue.getAsString().trim().length() == 0 )\r\n\t\t\t\tcontinue;\r\n\t\t\tlong key = eleKey.getAsLong();\r\n\t\t\tlong currentThreshold = eleValue.getAsLong();\r\n\r\n\t\t\tlong currentDayEntry = currentDay - ((key -1) * 86400000);\r\n\r\n\t\t\tif( breaknow ) {\r\n\t\t\t\t//System.out.println(\"count so far: \" + countSoFor );\r\n\t\t\t\t//System.out.println(\"curr threshold: \" + currentThreshold );\r\n\t\t\t\tif( countSoFor >= currentThreshold )\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tfor( int j = channelArrayIndex ; j >= 0;j--  ){\r\n\r\n\t\t\t\tlong thisChannelVal = channelArray.get(j).getAsLong();\r\n\t\t\t\tthisChannelVal = thisChannelVal - ( thisChannelVal % 86400000 );\r\n\t\t\t\t//System.out.println(\"Checking for day: \" + thisChannelVal );\r\n\t\t\t\tif( endDay > thisChannelVal )\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\tif( thisChannelVal < currentDayEntry ){\r\n\t\t\t\t\tchannelArrayIndex = j;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcountSoFor ++;\r\n\t\t\t\tif( countSoFor >= currentThreshold )\r\n\t\t\t\t\treturn true;\r\n\t\t\t\tif( j == 0 )\r\n\t\t\t\t\tbreaknow = true;\r\n\t\t\t\t//System.out.println( key + \"----------\" + currentThreshold + \"count so far\" + countSoFor); \r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;"
Preprocessed Expression : int inputValuesSize = inputValues.size();
		if( inputValuesSize == 0 )
			return false;
		JsonArray channelArray ;
		if( OFFER_COUNT_LifeTime.has( locationID + "_dateSeries" ) && OFFER_COUNT_LifeTime.get( locationID + "_dateSeries" ).isJsonArray() && 
				OFFER_COUNT_LifeTime.get( locationID + "_dateSeries" ).getAsJsonArray().size() > 0 )
			channelArray = OFFER_COUNT_LifeTime.get( locationID + "_dateSeries" ).getAsJsonArray();
		else//return false if no key array
			return false;



		long currentDay =  SIFTMATH.getCurrentDay();
		int maxDepth = 0;
		for( int i = inputValuesSize - 1; i >= 0; i -- ) {
			JsonObject thisObj = inputValues.get( i ).getAsJsonObject();
			if( thisObj.get("numberOfDays") != null && ! thisObj.get("numberOfDays").isJsonNull() && thisObj.get("numberOfDays").getAsString().trim().length() != 0 ) {
				maxDepth = thisObj.get("numberOfDays").getAsInt();
				break;
			}	
		}
		if( maxDepth == 0 )
			return false;

		long endDay =  currentDay - (( maxDepth - 1) * 86400000l) ;

		double countSoFor = 0.0;
		int channelArrayIndex = channelArray.size()-1;
		boolean breaknow = false;

		for( int thisDayCount = 0;  thisDayCount < inputValuesSize   ;thisDayCount++ ) {

			JsonObject thisDayObject = inputValues.get(thisDayCount).getAsJsonObject(); 
			JsonElement eleKey = thisDayObject.get("numberOfDays");
			JsonElement eleValue = thisDayObject.get("contactCount");
			if( eleKey == null || eleKey.isJsonNull() || eleKey.getAsString().trim().length() == 0 || eleValue == null || eleValue.isJsonNull() || eleValue.getAsString().trim().length() == 0 )
				continue;
			long key = eleKey.getAsLong();
			long currentThreshold = eleValue.getAsLong();

			long currentDayEntry = currentDay - ((key -1) * 86400000);

			if( breaknow ) {
				//System.out.println("count so far: " + countSoFor );
				//System.out.println("curr threshold: " + currentThreshold );
				if( countSoFor >= currentThreshold )
					return true;

				continue;
			}

			for( int j = channelArrayIndex ; j >= 0;j--  ){

				long thisChannelVal = channelArray.get(j).getAsLong();
				thisChannelVal = thisChannelVal - ( thisChannelVal % 86400000 );
				//System.out.println("Checking for day: " + thisChannelVal );
				if( endDay > thisChannelVal )
					return false;

				if( thisChannelVal < currentDayEntry ){
					channelArrayIndex = j;
					break;
				}

				countSoFor ++;
				if( countSoFor >= currentThreshold )
					return true;
				if( j == 0 )
					breaknow = true;
				//System.out.println( key + "----------" + currentThreshold + "count so far" + countSoFor); 
			}
		}

		return false;
line 1:0 no viable alternative at input 'int'
------------Infered params OFFER_COUNT_LifeTime -- com.google.gson.JsonObject -- JsonObject
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getCurrentMonitoringOffers" -- > "JsonArray currentlyMonitored = isCurrentlyMonitored();\r\nif (currentlyMonitored!=null && !currentlyMonitored.isJsonNull() && currentlyMonitored.size() >0){\r\n    return (currentlyMonitored.get(0).getAsString());\r\n}\r\nreturn \"\";"
Preprocessed Expression : JsonArray currentlyMonitored =  SIFTMATH.execJsonArrayFunction("isCurrentlyMonitored" );
if (currentlyMonitored!=null && !currentlyMonitored.isJsonNull() && currentlyMonitored.size() >0){
    return (currentlyMonitored.get(0).getAsString());
}
return "";
line 1:0 no viable alternative at input 'JsonArray'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getCurrentMonitoringOffersStartTime" -- > "JsonArray currentlyMonitored = isCurrentlyMonitored();\r\nif (currentlyMonitored!=null && !currentlyMonitored.isJsonNull() && currentlyMonitored.size() >0){\r\n    return (currentlyMonitored.get(2).getAsString());\r\n}\r\nreturn \"NULL\";"
Preprocessed Expression : JsonArray currentlyMonitored =  SIFTMATH.execJsonArrayFunction("isCurrentlyMonitored" );
if (currentlyMonitored!=null && !currentlyMonitored.isJsonNull() && currentlyMonitored.size() >0){
    return (currentlyMonitored.get(2).getAsString());
}
return "NULL";
line 1:0 no viable alternative at input 'JsonArray'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getUsageInfo" -- > "String lifetimeDataConsumed = \"\";\r\n/*String dataVolumeConsumed = \"\";\r\nString latestDataUsageDate = \"\";\r\nString dataUsage = \"\";\r\nString totalSMSCount = \"\";\r\nString totalSMSSpend = \"\";\r\nString localSMSCount = \"\";\r\nString localSMSSpend = \"\";\r\nString iddSMSCount = \"\";\r\nString iddSMSSpend = \"\";\r\nString latestSMSUsageDate = \"\";\r\nString smsUsage = \"\";\r\nString totalVoiceCount = \"\";\r\nString totalVoiceMinutes = \"\";\r\nString totalVoiceSpend = \"\";\r\nString localVoiceCount = \"\";\r\nString localVoiceMinutes = \"\";\r\nString localVoiceSpend = \"\";\r\nString iddCount = \"\";\r\nString iddMinutes = \"\";\r\nString iddSpend = \"\";\r\nString latestVoiceUsageDate = \"\";\r\nString voiceUsage = \"\";*/\r\n\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\nd.setTimeZone(java.util.TimeZone.getTimeZone(\"GMT\"));\r\nif(DATA_ALL_Volume_LifeTime!=-99 && DATA_ALL_Volume_LifeTime>=0.0) {\r\nlifetimeDataConsumed = String.valueOf((int)DATA_ALL_Volume_LifeTime);\r\n}\r\n\r\n/* if(DATA_USAGE_SERIES_LifeTime!=null && !DATA_USAGE_SERIES_LifeTime.isJsonNull() && DATA_USAGE_SERIES_LifeTime.entrySet().size()!=0) {\r\nJsonArray dataEkeys = new JsonArray();\r\nif(DATA_USAGE_SERIES_LifeTime.has(\"keys\"))\r\ndataEkeys = DATA_USAGE_SERIES_LifeTime.get(\"keys\").getAsJsonArray();\r\nif(dataEkeys.size()!=0){\r\nlong dataLatestDate = dataEkeys.get(dataEkeys.size()-1).getAsLong();\r\nString latestDataString = String.valueOf(dataLatestDate);\r\njava.util.Date dataDte= new java.util.Date(dataLatestDate);\r\nlatestDataUsageDate = d.format(dataDte);\r\nif(DATA_USAGE_SERIES_LifeTime.has(latestDataString)){\r\nif(!DATA_USAGE_SERIES_LifeTime.get(latestDataString).getAsString().equals(\"-99\"))\r\ndataVolumeConsumed = DATA_USAGE_SERIES_LifeTime.get(latestDataString).getAsString();\r\ndataUsage = dataVolumeConsumed + \"~\" + latestDataUsageDate;\r\n}\r\n}\r\n} */\r\n\r\n/*if(SMS_USAGE_SERIES_LifeTime!=null && !SMS_USAGE_SERIES_LifeTime.isJsonNull() && SMS_USAGE_SERIES_LifeTime.entrySet().size()!=0) {\r\nJsonArray SMSEkeys = new JsonArray();\r\nif(SMS_USAGE_SERIES_LifeTime.has(\"keys\"))\r\nSMSEkeys = SMS_USAGE_SERIES_LifeTime.get(\"keys\").getAsJsonArray();\r\nif(SMSEkeys.size()!=0){\r\nlong smsLatestDate = SMSEkeys.get(SMSEkeys.size()-1).getAsLong();\r\nString latestSMSString = String.valueOf(smsLatestDate);\r\njava.util.Date smsDte= new java.util.Date(smsLatestDate);\r\nlatestSMSUsageDate = d.format(smsDte);\r\nif(SMS_USAGE_SERIES_LifeTime.has(latestSMSString)){\r\nJsonArray smsUsageInfo = SMS_USAGE_SERIES_LifeTime.get(latestSMSString).getAsJsonArray();\r\nif(smsUsageInfo.size()>=2){\r\nif(!smsUsageInfo.get(0).getAsString().equals(\"-99\"))\r\ntotalSMSCount = smsUsageInfo.get(0).getAsString();\r\nif(!smsUsageInfo.get(1).getAsString().equals(\"-99\"))\r\ntotalSMSSpend = smsUsageInfo.get(1).getAsString();\r\n}\r\nif(smsUsageInfo.size()>=4){\r\nif(!smsUsageInfo.get(2).getAsString().equals(\"-99\"))\r\nlocalSMSCount = smsUsageInfo.get(2).getAsString();\r\nif(!smsUsageInfo.get(3).getAsString().equals(\"-99\"))\r\nlocalSMSSpend = smsUsageInfo.get(3).getAsString();\r\n}\r\nif(smsUsageInfo.size()>=6){\r\nif(!smsUsageInfo.get(4).getAsString().equals(\"-99\"))\r\niddSMSCount = smsUsageInfo.get(4).getAsString();\r\nif(!smsUsageInfo.get(5).getAsString().equals(\"-99\"))\r\niddSMSSpend = smsUsageInfo.get(5).getAsString();\r\n}\r\nsmsUsage = totalSMSCount + \"~\" + totalSMSSpend + \"~\" + localSMSCount + \"~\" + localSMSSpend + \"~\" + iddSMSCount + \"~\" + iddSMSSpend + \"~\" + latestSMSUsageDate;\r\n}\r\n}\r\n}*/\r\n/*\r\nif(VOICE_USAGE_SERIES_LifeTime!=null && !VOICE_USAGE_SERIES_LifeTime.isJsonNull() && VOICE_USAGE_SERIES_LifeTime.entrySet().size()!=0) {\r\nJsonArray voiceEkeys= new JsonArray();\r\nif(VOICE_USAGE_SERIES_LifeTime.has(\"keys\"))\r\nvoiceEkeys = VOICE_USAGE_SERIES_LifeTime.get(\"keys\").getAsJsonArray();\r\nif(voiceEkeys.size()!=0){\r\nlong voiceLatestDate = voiceEkeys.get(voiceEkeys.size()-1).getAsLong();\r\nString latestVoiceString = String.valueOf(voiceLatestDate);\r\njava.util.Date voiceDte= new java.util.Date(voiceLatestDate);\r\nlatestVoiceUsageDate = d.format(voiceDte);\r\nif(VOICE_USAGE_SERIES_LifeTime.has(latestVoiceString)){\r\nJsonArray voiceUsageInfo = VOICE_USAGE_SERIES_LifeTime.get(latestVoiceString).getAsJsonArray();\r\nif(voiceUsageInfo.size()>=3){\r\nif(!voiceUsageInfo.get(0).getAsString().equals(\"-99\"))\r\ntotalVoiceCount = voiceUsageInfo.get(0).getAsString();\r\nif(!voiceUsageInfo.get(1).getAsString().equals(\"-99\"))\r\ntotalVoiceMinutes = voiceUsageInfo.get(1).getAsString();\r\nif(!voiceUsageInfo.get(2).getAsString().equals(\"-99\"))\r\ntotalVoiceSpend = voiceUsageInfo.get(2).getAsString();\r\n}\r\nif(voiceUsageInfo.size()>=6){\r\nif(!voiceUsageInfo.get(3).getAsString().equals(\"-99\"))\r\nlocalVoiceCount = voiceUsageInfo.get(3).getAsString();\r\nif(!voiceUsageInfo.get(4).getAsString().equals(\"-99\"))\r\nlocalVoiceMinutes = voiceUsageInfo.get(4).getAsString();\r\nif(!voiceUsageInfo.get(5).getAsString().equals(\"-99\"))\r\nlocalVoiceSpend = voiceUsageInfo.get(5).getAsString();\r\n}\r\nif(voiceUsageInfo.size()>=9){\r\nif(!voiceUsageInfo.get(6).getAsString().equals(\"-99\"))\r\niddCount = voiceUsageInfo.get(6).getAsString();\r\nif(!voiceUsageInfo.get(7).getAsString().equals(\"-99\"))\r\niddMinutes = voiceUsageInfo.get(7).getAsString();\r\nif(!voiceUsageInfo.get(8).getAsString().equals(\"-99\"))\r\niddSpend = voiceUsageInfo.get(8).getAsString();\r\n}\r\nvoiceUsage = totalVoiceCount + \"~\" + totalVoiceMinutes + \"~\" + totalVoiceSpend + \"~\" + localVoiceCount + \"~\" + localVoiceMinutes + \"~\" + localVoiceSpend + \"~\" + iddCount + \"~\" + iddMinutes + \"~\" + iddSpend + \"~\" + latestVoiceUsageDate;\r\n}\r\n}\r\n}\r\nreturn lifetimeDataConsumed + \"|\" + dataUsage + \"|\" + smsUsage + \"|\" + voiceUsage;*/\r\nreturn lifetimeDataConsumed ;"
Preprocessed Expression : String lifetimeDataConsumed = "";
/*String dataVolumeConsumed = "";
String latestDataUsageDate = "";
String dataUsage = "";
String totalSMSCount = "";
String totalSMSSpend = "";
String localSMSCount = "";
String localSMSSpend = "";
String iddSMSCount = "";
String iddSMSSpend = "";
String latestSMSUsageDate = "";
String smsUsage = "";
String totalVoiceCount = "";
String totalVoiceMinutes = "";
String totalVoiceSpend = "";
String localVoiceCount = "";
String localVoiceMinutes = "";
String localVoiceSpend = "";
String iddCount = "";
String iddMinutes = "";
String iddSpend = "";
String latestVoiceUsageDate = "";
String voiceUsage = "";*/

java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
d.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));
if(DATA_ALL_Volume_LifeTime!=-99 && DATA_ALL_Volume_LifeTime>=0.0) {
lifetimeDataConsumed = String.valueOf((int)DATA_ALL_Volume_LifeTime);
}

/* if(DATA_USAGE_SERIES_LifeTime!=null && !DATA_USAGE_SERIES_LifeTime.isJsonNull() && DATA_USAGE_SERIES_LifeTime.entrySet().size()!=0) {
JsonArray dataEkeys = new JsonArray();
if(DATA_USAGE_SERIES_LifeTime.has("keys"))
dataEkeys = DATA_USAGE_SERIES_LifeTime.get("keys").getAsJsonArray();
if(dataEkeys.size()!=0){
long dataLatestDate = dataEkeys.get(dataEkeys.size()-1).getAsLong();
String latestDataString = String.valueOf(dataLatestDate);
java.util.Date dataDte= new java.util.Date(dataLatestDate);
latestDataUsageDate = d.format(dataDte);
if(DATA_USAGE_SERIES_LifeTime.has(latestDataString)){
if(!DATA_USAGE_SERIES_LifeTime.get(latestDataString).getAsString().equals("-99"))
dataVolumeConsumed = DATA_USAGE_SERIES_LifeTime.get(latestDataString).getAsString();
dataUsage = dataVolumeConsumed + "~" + latestDataUsageDate;
}
}
} */

/*if(SMS_USAGE_SERIES_LifeTime!=null && !SMS_USAGE_SERIES_LifeTime.isJsonNull() && SMS_USAGE_SERIES_LifeTime.entrySet().size()!=0) {
JsonArray SMSEkeys = new JsonArray();
if(SMS_USAGE_SERIES_LifeTime.has("keys"))
SMSEkeys = SMS_USAGE_SERIES_LifeTime.get("keys").getAsJsonArray();
if(SMSEkeys.size()!=0){
long smsLatestDate = SMSEkeys.get(SMSEkeys.size()-1).getAsLong();
String latestSMSString = String.valueOf(smsLatestDate);
java.util.Date smsDte= new java.util.Date(smsLatestDate);
latestSMSUsageDate = d.format(smsDte);
if(SMS_USAGE_SERIES_LifeTime.has(latestSMSString)){
JsonArray smsUsageInfo = SMS_USAGE_SERIES_LifeTime.get(latestSMSString).getAsJsonArray();
if(smsUsageInfo.size()>=2){
if(!smsUsageInfo.get(0).getAsString().equals("-99"))
totalSMSCount = smsUsageInfo.get(0).getAsString();
if(!smsUsageInfo.get(1).getAsString().equals("-99"))
totalSMSSpend = smsUsageInfo.get(1).getAsString();
}
if(smsUsageInfo.size()>=4){
if(!smsUsageInfo.get(2).getAsString().equals("-99"))
localSMSCount = smsUsageInfo.get(2).getAsString();
if(!smsUsageInfo.get(3).getAsString().equals("-99"))
localSMSSpend = smsUsageInfo.get(3).getAsString();
}
if(smsUsageInfo.size()>=6){
if(!smsUsageInfo.get(4).getAsString().equals("-99"))
iddSMSCount = smsUsageInfo.get(4).getAsString();
if(!smsUsageInfo.get(5).getAsString().equals("-99"))
iddSMSSpend = smsUsageInfo.get(5).getAsString();
}
smsUsage = totalSMSCount + "~" + totalSMSSpend + "~" + localSMSCount + "~" + localSMSSpend + "~" + iddSMSCount + "~" + iddSMSSpend + "~" + latestSMSUsageDate;
}
}
}*/
/*
if(VOICE_USAGE_SERIES_LifeTime!=null && !VOICE_USAGE_SERIES_LifeTime.isJsonNull() && VOICE_USAGE_SERIES_LifeTime.entrySet().size()!=0) {
JsonArray voiceEkeys= new JsonArray();
if(VOICE_USAGE_SERIES_LifeTime.has("keys"))
voiceEkeys = VOICE_USAGE_SERIES_LifeTime.get("keys").getAsJsonArray();
if(voiceEkeys.size()!=0){
long voiceLatestDate = voiceEkeys.get(voiceEkeys.size()-1).getAsLong();
String latestVoiceString = String.valueOf(voiceLatestDate);
java.util.Date voiceDte= new java.util.Date(voiceLatestDate);
latestVoiceUsageDate = d.format(voiceDte);
if(VOICE_USAGE_SERIES_LifeTime.has(latestVoiceString)){
JsonArray voiceUsageInfo = VOICE_USAGE_SERIES_LifeTime.get(latestVoiceString).getAsJsonArray();
if(voiceUsageInfo.size()>=3){
if(!voiceUsageInfo.get(0).getAsString().equals("-99"))
totalVoiceCount = voiceUsageInfo.get(0).getAsString();
if(!voiceUsageInfo.get(1).getAsString().equals("-99"))
totalVoiceMinutes = voiceUsageInfo.get(1).getAsString();
if(!voiceUsageInfo.get(2).getAsString().equals("-99"))
totalVoiceSpend = voiceUsageInfo.get(2).getAsString();
}
if(voiceUsageInfo.size()>=6){
if(!voiceUsageInfo.get(3).getAsString().equals("-99"))
localVoiceCount = voiceUsageInfo.get(3).getAsString();
if(!voiceUsageInfo.get(4).getAsString().equals("-99"))
localVoiceMinutes = voiceUsageInfo.get(4).getAsString();
if(!voiceUsageInfo.get(5).getAsString().equals("-99"))
localVoiceSpend = voiceUsageInfo.get(5).getAsString();
}
if(voiceUsageInfo.size()>=9){
if(!voiceUsageInfo.get(6).getAsString().equals("-99"))
iddCount = voiceUsageInfo.get(6).getAsString();
if(!voiceUsageInfo.get(7).getAsString().equals("-99"))
iddMinutes = voiceUsageInfo.get(7).getAsString();
if(!voiceUsageInfo.get(8).getAsString().equals("-99"))
iddSpend = voiceUsageInfo.get(8).getAsString();
}
voiceUsage = totalVoiceCount + "~" + totalVoiceMinutes + "~" + totalVoiceSpend + "~" + localVoiceCount + "~" + localVoiceMinutes + "~" + localVoiceSpend + "~" + iddCount + "~" + iddMinutes + "~" + iddSpend + "~" + latestVoiceUsageDate;
}
}
}
return lifetimeDataConsumed + "|" + dataUsage + "|" + smsUsage + "|" + voiceUsage;*/
return lifetimeDataConsumed ;
line 1:0 no viable alternative at input 'String'
------------Infered params DATA_ALL_Volume_LifeTime -- double -- double
Compiling Function : "getEventDefinitionKey" -- > "if(SIFT_INTERNAL_RECORD_TYPE.equals(\"ContactCount\") && RECORD_TYPE.equals(\"REGISTER_ACTION\"))\r\nreturn \"\";\r\nreturn \"APIEvent-e0219d14-5fbb-58cd-b79b-fbb41dd71038\";"
Preprocessed Expression : if(SIFT_INTERNAL_RECORD_TYPE.equals("ContactCount") && RECORD_TYPE.equals("REGISTER_ACTION"))
return "";
return "APIEvent-e0219d14-5fbb-58cd-b79b-fbb41dd71038";
line 1:0 no viable alternative at input 'if'
------------Infered params SIFT_INTERNAL_RECORD_TYPE -- java.lang.String -- String
------------Infered params RECORD_TYPE -- java.lang.String -- String
Compiling Function : "hasProgramSummaryContactExceeded" -- > "return false;"
Preprocessed Expression : return false;
line 1:0 no viable alternative at input 'return'
Compiling Function : "getOfferDetailsOnIssueDate" -- > "String offers = \"B_R_20_1D_10GB_28E_OFFER,B_R_20_7D_25GB_28E_OFFER,B_R_30_1D_5GB_28E_OFFER,B_R_30_7D_10GB_28E_OFFER,HH_IM_PD_LR_05B_OFFER,HH_IM_PD_LR_3A_1_OFFER,HH_IM_PD_LR_3B_1_OFFER,HH_IM_PD_LR_3C_1_OFFER,HH_IM_PD_LR_3E_OFFER,HL_PD_LR_5_OFFER,T_R_119_9D_20GB_186E_OFFER,T_R_20_11D_180M_45E_OFFER,T_R_20_9D_5GB_28E_OFFER,T_R_25_9D_5GB_28E_OFFER,T_R_30_1D_100M_186E_OFFER,T_R_30_1D_10GB_28E_OFFER,T_R_30_1D_5GB_28E_OFFER,T_R_30_7D_10GB_28E_OFFER,T_R_30_7D_25GB_28E_OFFER,T_R_30_9D_15GB_28E_OFFER,T_R_30_9D_240M_186E_OFFER,T_R_35_9D_15GB_28E_OFFER,T_R_40_9D_25GB_28E_OFFER,T_R_50_1D_10GB_28E_OFFER,T_R_50_9D_15GB_28E_OFFER\";\r\nString monitoringAction = \"\", fulfillmentAction = \"\",programDetails=\"\",details=\",,\";\r\nJsonElement thisSubscriberDocEle = getSubscriberDocument(SERVICE_NUMBER_LifeTime + \"-Indicators\" );\r\nif ( thisSubscriberDocEle == null )\r\n\treturn details;\r\nJsonElement jProgramSet = thisSubscriberDocEle.getAsJsonObject().get(\"PROGRAMS_LifeTime-L\");\r\nif( jProgramSet!=null && !jProgramSet.isJsonNull()) {\r\n\tJsonObject obj=jProgramSet.getAsJsonObject();\r\n\tif(obj.has(\"BESTOWAL_NOTIFICATION_PROGRAM\")){\r\n\tJsonArray ekeys = obj.get(\"BESTOWAL_NOTIFICATION_PROGRAM\").getAsJsonArray();\r\n\tfor(int i=0;i<=ekeys.size()-1;i++){\r\n\t\tJsonObject programObj=ekeys.get(i).getAsJsonObject();\r\n\t\tString[] name = offers.split(\"\\\\,\", -1);\r\n\t\t  for (String offersList : name) {\r\n\t\t\tif(programObj.has(offersList)) {   \r\n\t\t\t\tJsonArray offerArray = programObj.getAsJsonArray(offersList);\r\n\t\t\t\tJsonObject offerObj = offerArray.get(0).getAsJsonObject();\r\n\t\t\t\tmonitoringAction =(offerObj.has(\"monitoringAction\")?offerObj.get(\"monitoringAction\").getAsString():\"\");\r\n\t\t\t\tfulfillmentAction =(offerObj.has(\"fulfillmentAction\")?offerObj.get(\"fulfillmentAction\").getAsString():\"\");\r\n\t\t\t\tprogramDetails = offersList+\",\"+monitoringAction+\",\"+fulfillmentAction;\r\n\t\t\t\tdetails=(!details.equals(\",,\")) ? details+\"#\"+programDetails: programDetails;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t}\t\r\n}\r\nreturn details;"
Preprocessed Expression : String offers = "B_R_20_1D_10GB_28E_OFFER,B_R_20_7D_25GB_28E_OFFER,B_R_30_1D_5GB_28E_OFFER,B_R_30_7D_10GB_28E_OFFER,HH_IM_PD_LR_05B_OFFER,HH_IM_PD_LR_3A_1_OFFER,HH_IM_PD_LR_3B_1_OFFER,HH_IM_PD_LR_3C_1_OFFER,HH_IM_PD_LR_3E_OFFER,HL_PD_LR_5_OFFER,T_R_119_9D_20GB_186E_OFFER,T_R_20_11D_180M_45E_OFFER,T_R_20_9D_5GB_28E_OFFER,T_R_25_9D_5GB_28E_OFFER,T_R_30_1D_100M_186E_OFFER,T_R_30_1D_10GB_28E_OFFER,T_R_30_1D_5GB_28E_OFFER,T_R_30_7D_10GB_28E_OFFER,T_R_30_7D_25GB_28E_OFFER,T_R_30_9D_15GB_28E_OFFER,T_R_30_9D_240M_186E_OFFER,T_R_35_9D_15GB_28E_OFFER,T_R_40_9D_25GB_28E_OFFER,T_R_50_1D_10GB_28E_OFFER,T_R_50_9D_15GB_28E_OFFER";
String monitoringAction = "", fulfillmentAction = "",programDetails="",details=",,";
JsonElement thisSubscriberDocEle =  SIFTMATH.getSubscriberDocument(SERVICE_NUMBER_LifeTime + "-Indicators" );
if ( thisSubscriberDocEle == null )
	return details;
JsonElement jProgramSet = thisSubscriberDocEle.getAsJsonObject().get("PROGRAMS_LifeTime-L");
if( jProgramSet!=null && !jProgramSet.isJsonNull()) {
	JsonObject obj=jProgramSet.getAsJsonObject();
	if(obj.has("BESTOWAL_NOTIFICATION_PROGRAM")){
	JsonArray ekeys = obj.get("BESTOWAL_NOTIFICATION_PROGRAM").getAsJsonArray();
	for(int i=0;i<=ekeys.size()-1;i++){
		JsonObject programObj=ekeys.get(i).getAsJsonObject();
		String[] name = offers.split("\\,", -1);
		  for (String offersList : name) {
			if(programObj.has(offersList)) {   
				JsonArray offerArray = programObj.getAsJsonArray(offersList);
				JsonObject offerObj = offerArray.get(0).getAsJsonObject();
				monitoringAction =(offerObj.has("monitoringAction")?offerObj.get("monitoringAction").getAsString():"");
				fulfillmentAction =(offerObj.has("fulfillmentAction")?offerObj.get("fulfillmentAction").getAsString():"");
				programDetails = offersList+","+monitoringAction+","+fulfillmentAction;
				details=(!details.equals(",,")) ? details+"#"+programDetails: programDetails;
			}
		}
	}
	}	
}
return details;
line 1:0 no viable alternative at input 'String'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params SERVICE_NUMBER_LifeTime -- java.lang.String -- String
Compiling Function : "getRechargeCountSinceDiscountSent" -- > "String offerId = getLastDiscountOfferId();\r\n\t\t\r\nif (offerId != null && offerId.trim().length() > 0 && !offerId.equals(\"\")) {\r\n\t\r\n\tif (LATEST_OFFER_FULFILMENT_COUNTS != null && !LATEST_OFFER_FULFILMENT_COUNTS.isJsonNull()) {\r\n\t\tString searchKey = \"DISCOUNT_PROGRAM-\" + offerId;\r\n\t\t\r\n\t\tif (LATEST_OFFER_FULFILMENT_COUNTS.has(searchKey)) {\r\n\t\t\treturn LATEST_OFFER_FULFILMENT_COUNTS.get(searchKey).getAsInt();\r\n\t    }\r\n\t}\r\n}\r\n\r\nreturn 0;"
Preprocessed Expression : String offerId =  SIFTMATH.execStringFunction("getLastDiscountOfferId" );
		
if (offerId != null && offerId.trim().length() > 0 && !offerId.equals("")) {
	
	if (LATEST_OFFER_FULFILMENT_COUNTS != null && !LATEST_OFFER_FULFILMENT_COUNTS.isJsonNull()) {
		String searchKey = "DISCOUNT_PROGRAM-" + offerId;
		
		if (LATEST_OFFER_FULFILMENT_COUNTS.has(searchKey)) {
			return LATEST_OFFER_FULFILMENT_COUNTS.get(searchKey).getAsInt();
	    }
	}
}

return 0;
line 1:0 no viable alternative at input 'String'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params LATEST_OFFER_FULFILMENT_COUNTS -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getBoostMessageDefinitionKey" -- > "if(SIFT_INTERNAL_RECORD_TYPE.equals(\"ContactCount\") && RECORD_TYPE.equals(\"REGISTER_ACTION\"))\r\nreturn \"\";\r\nreturn \"txn-sms-def-prd-02\";"
Preprocessed Expression : if(SIFT_INTERNAL_RECORD_TYPE.equals("ContactCount") && RECORD_TYPE.equals("REGISTER_ACTION"))
return "";
return "txn-sms-def-prd-02";
line 1:0 no viable alternative at input 'if'
------------Infered params SIFT_INTERNAL_RECORD_TYPE -- java.lang.String -- String
------------Infered params RECORD_TYPE -- java.lang.String -- String
Compiling Function : "getCurrentCACID" -- > "if ( CAC_ID_LifeTime != null&& !CAC_ID_LifeTime.isJsonNull() && CAC_ID_LifeTime.entrySet().size()!=0){\r\n    String CurrentCacId = CAC_ID_LifeTime.get(\"current\").getAsString();\r\n    if(CurrentCacId!=null && CurrentCacId.length()!=0)\r\n        return CurrentCacId;\r\n}\r\nreturn \"\";"
Preprocessed Expression : if ( CAC_ID_LifeTime != null&& !CAC_ID_LifeTime.isJsonNull() && CAC_ID_LifeTime.entrySet().size()!=0){
    String CurrentCacId = CAC_ID_LifeTime.get("current").getAsString();
    if(CurrentCacId!=null && CurrentCacId.length()!=0)
        return CurrentCacId;
}
return "";
line 1:0 no viable alternative at input 'if'
------------Infered params CAC_ID_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "isBundleValid" -- > "JsonElement bundleInfoJele = BUNDLE_INFO_LifeTime;\r\n\t\tif( bundleInfoJele != null && !bundleInfoJele.isJsonNull() ) {\r\n\r\n\t\t\tif( \"All\".equalsIgnoreCase( level ) ) {\r\n\t\t\t\tboolean flag = false;\r\n\t\t\t\tfor( java.util.Map.Entry< String, JsonElement > entry : bundleInfoJele.getAsJsonObject().entrySet() ) {\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t\tcom.google.gson.Gson gson=new com.google.gson.Gson();\r\n\t\t\t\t\tJsonElement bundleNameJEle = gson.toJsonTree(entry.getValue());\r\n\t\t\t\t\tif( bundleNameJEle != null && !bundleNameJEle.isJsonNull() ) {\r\n\t\t\t\t\t\tJsonElement bundleTypeJele = bundleNameJEle.getAsJsonObject().get( \"bundleType\" );\r\n\t\t\t\t\t\tJsonElement bundleIdJele = bundleNameJEle.getAsJsonObject().get( \"bundleId\" );\r\n\t\t\t\t\t\tJsonElement categoryJele = bundleNameJEle.getAsJsonObject().get( \"category\" );\r\n\t\t\t\t\t\tJsonElement bundleUnitJele = bundleNameJEle.getAsJsonObject().get( \"bundleUnit\" );\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(bundleTypeJele==null || bundleIdJele==null || categoryJele==null ||bundleUnitJele==null ||  bundleTypeJele.isJsonNull() || bundleIdJele.isJsonNull() || categoryJele.isJsonNull() || bundleUnitJele.isJsonNull() ){\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif( (categoryJele != null &&  !categoryJele.isJsonNull() && \"NA\".equals( categoryJele.getAsString() )) || categoryJele.getAsString().isEmpty() ) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(( bundleTypeJele != null && !bundleTypeJele.isJsonNull() && \"-99\".equals( bundleTypeJele.getAsString() ) ) || bundleTypeJele.getAsString().isEmpty() ) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif( (bundleIdJele != null && !bundleIdJele.isJsonNull() && \"-99\".equals( bundleIdJele.getAsString() ))  || bundleIdJele.getAsString().isEmpty()) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif( (bundleUnitJele != null && !bundleUnitJele.isJsonNull() && \"-99\".equals( bundleUnitJele.getAsString() )) || bundleUnitJele.getAsString().isEmpty() ) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif( !flag ) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t}else if( \"bundleName\".equals( level ) ) {\r\n\r\n\t\t\t\tJsonElement bundleNameJEle = bundleInfoJele.getAsJsonObject().get( bundleName );\r\n\t\t\t\tif( bundleNameJEle != null && !bundleNameJEle.isJsonNull() ) {\r\n\t\t\t\t\tJsonElement bundleTypeJele = bundleNameJEle.getAsJsonObject().get( \"bundleType\" );\r\n\t\t\t\t\tJsonElement bundleIdJele = bundleNameJEle.getAsJsonObject().get( \"bundleId\" );\r\n\t\t\t\t\tJsonElement categoryJele = bundleNameJEle.getAsJsonObject().get( \"category\" );\r\n\t\t\t\t\tJsonElement bundleUnitJele = bundleNameJEle.getAsJsonObject().get( \"bundleUnit\" );\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(bundleTypeJele==null || bundleIdJele==null || categoryJele==null ||bundleUnitJele==null ||  bundleTypeJele.isJsonNull() || bundleIdJele.isJsonNull() || categoryJele.isJsonNull() || bundleUnitJele.isJsonNull() ){\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\tif( (categoryJele != null &&  !categoryJele.isJsonNull() && \"NA\".equals( categoryJele.getAsString() )) || categoryJele.getAsString().isEmpty() ) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(( bundleTypeJele != null && !bundleTypeJele.isJsonNull() && \"-99\".equals( bundleTypeJele.getAsString() ) ) || bundleTypeJele.getAsString().isEmpty() ) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif( (bundleIdJele != null && !bundleIdJele.isJsonNull() && \"-99\".equals( bundleIdJele.getAsString() ))  || bundleIdJele.getAsString().isEmpty()) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif( (bundleUnitJele != null && !bundleUnitJele.isJsonNull() && \"-99\".equals( bundleUnitJele.getAsString() )) || bundleUnitJele.getAsString().isEmpty() ) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t}else{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t}else{\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;"
Preprocessed Expression : JsonElement bundleInfoJele = BUNDLE_INFO_LifeTime;
		if( bundleInfoJele != null && !bundleInfoJele.isJsonNull() ) {

			if( "All".equalsIgnoreCase( level ) ) {
				boolean flag = false;
				for( java.util.Map.Entry< String, JsonElement > entry : bundleInfoJele.getAsJsonObject().entrySet() ) {
					flag = true;
					com.google.gson.Gson gson=new com.google.gson.Gson();
					JsonElement bundleNameJEle = gson.toJsonTree(entry.getValue());
					if( bundleNameJEle != null && !bundleNameJEle.isJsonNull() ) {
						JsonElement bundleTypeJele = bundleNameJEle.getAsJsonObject().get( "bundleType" );
						JsonElement bundleIdJele = bundleNameJEle.getAsJsonObject().get( "bundleId" );
						JsonElement categoryJele = bundleNameJEle.getAsJsonObject().get( "category" );
						JsonElement bundleUnitJele = bundleNameJEle.getAsJsonObject().get( "bundleUnit" );
						
						if(bundleTypeJele==null || bundleIdJele==null || categoryJele==null ||bundleUnitJele==null ||  bundleTypeJele.isJsonNull() || bundleIdJele.isJsonNull() || categoryJele.isJsonNull() || bundleUnitJele.isJsonNull() ){
							return false;
						}
						
						if( (categoryJele != null &&  !categoryJele.isJsonNull() && "NA".equals( categoryJele.getAsString() )) || categoryJele.getAsString().isEmpty() ) {
							return false;
						}
						if(( bundleTypeJele != null && !bundleTypeJele.isJsonNull() && "-99".equals( bundleTypeJele.getAsString() ) ) || bundleTypeJele.getAsString().isEmpty() ) {
							return false;
						}
						if( (bundleIdJele != null && !bundleIdJele.isJsonNull() && "-99".equals( bundleIdJele.getAsString() ))  || bundleIdJele.getAsString().isEmpty()) {
							return false;
						}
						if( (bundleUnitJele != null && !bundleUnitJele.isJsonNull() && "-99".equals( bundleUnitJele.getAsString() )) || bundleUnitJele.getAsString().isEmpty() ) {
							return false;
						}
					}else {
						return false;
					}

				}
				if( !flag ) {
					return false;
				}

			}else if( "bundleName".equals( level ) ) {

				JsonElement bundleNameJEle = bundleInfoJele.getAsJsonObject().get( bundleName );
				if( bundleNameJEle != null && !bundleNameJEle.isJsonNull() ) {
					JsonElement bundleTypeJele = bundleNameJEle.getAsJsonObject().get( "bundleType" );
					JsonElement bundleIdJele = bundleNameJEle.getAsJsonObject().get( "bundleId" );
					JsonElement categoryJele = bundleNameJEle.getAsJsonObject().get( "category" );
					JsonElement bundleUnitJele = bundleNameJEle.getAsJsonObject().get( "bundleUnit" );
					
					if(bundleTypeJele==null || bundleIdJele==null || categoryJele==null ||bundleUnitJele==null ||  bundleTypeJele.isJsonNull() || bundleIdJele.isJsonNull() || categoryJele.isJsonNull() || bundleUnitJele.isJsonNull() ){
						return false;
					}
					
				
					if( (categoryJele != null &&  !categoryJele.isJsonNull() && "NA".equals( categoryJele.getAsString() )) || categoryJele.getAsString().isEmpty() ) {
						return false;
					}
					if(( bundleTypeJele != null && !bundleTypeJele.isJsonNull() && "-99".equals( bundleTypeJele.getAsString() ) ) || bundleTypeJele.getAsString().isEmpty() ) {
						return false;
					}
					if( (bundleIdJele != null && !bundleIdJele.isJsonNull() && "-99".equals( bundleIdJele.getAsString() ))  || bundleIdJele.getAsString().isEmpty()) {
						return false;
					}
					if( (bundleUnitJele != null && !bundleUnitJele.isJsonNull() && "-99".equals( bundleUnitJele.getAsString() )) || bundleUnitJele.getAsString().isEmpty() ) {
						return false;
					}

				}else {
					return false;
				}

			}else{
				return false;
			}

		}else{
			return false;
		}

		return true;
line 1:0 no viable alternative at input 'JsonElement'
------------Infered params BUNDLE_INFO_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getLastBonusOfferId" -- > "if (OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime != null && !OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.isJsonNull() && OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.entrySet().size() > 0) {\r\n    \r\n\tif (OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.has(\"lastBonusOfferId\")) {\r\n\t\treturn OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.get(\"lastBonusOfferId\").getAsString();\r\n    }\r\n}\r\n\r\nreturn \"\";"
Preprocessed Expression : if (OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime != null && !OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.isJsonNull() && OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.entrySet().size() > 0) {
    
	if (OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.has("lastBonusOfferId")) {
		return OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.get("lastBonusOfferId").getAsString();
    }
}

return "";
line 1:0 no viable alternative at input 'if'
------------Infered params OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getRechargeCountAfterCOChange" -- > "int rechargeCount = 0;\r\nint rechargeCountOver30 = 0; \r\nlong coChangeDate = getCommercialOfferUpdateDate();\r\nif(coChangeDate!=0l && coChangeDate!=-99l){\r\n    if(RECHARGE_BLOCK_SERIES_LifeTime!=null && !RECHARGE_BLOCK_SERIES_LifeTime.isJsonNull() && RECHARGE_BLOCK_SERIES_LifeTime.entrySet().size()>0 ) {\r\n\t\tif(RECHARGE_BLOCK_SERIES_LifeTime.has(\"keys\")){\r\n\t\t\tJsonArray ekeys = RECHARGE_BLOCK_SERIES_LifeTime.get(\"keys\").getAsJsonArray();\r\n\t\t\tfor(int i=0;i<=ekeys.size()-1;i++){\r\n\t\t\t\tif(ekeys.get(i).getAsLong()>=coChangeDate){\r\n\t\t\t\t\trechargeCount = rechargeCount+1;\r\n\t\t\t\t\tJsonObject obj = RECHARGE_BLOCK_SERIES_LifeTime.getAsJsonObject(ekeys.get(i).getAsString());\r\n\t\t\t\t\tif(obj!=null && !obj.isJsonNull() && obj.entrySet().size()!=0 && obj.has(\"RECHARGE_DATA\")){\r\n\t\t\t\t\t\tJsonArray rechrgeData = obj.get(\"RECHARGE_DATA\").getAsJsonArray();\r\n\t\t\t\t\t\tint rechargeAmount = rechrgeData.get(0).getAsInt();\r\n\t\t\t\t\t\tif(rechargeAmount > 30)\r\n\t\t\t\t\t\t\trechargeCountOver30 = rechargeCountOver30+1;\r\n\t\t\t\t\t }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nreturn String.valueOf(rechargeCount) + \"|\" + String.valueOf(rechargeCountOver30);"
Preprocessed Expression : int rechargeCount = 0;
int rechargeCountOver30 = 0; 
long coChangeDate =  SIFTMATH.execLongFunction("getCommercialOfferUpdateDate" );
if(coChangeDate!=0l && coChangeDate!=-99l){
    if(RECHARGE_BLOCK_SERIES_LifeTime!=null && !RECHARGE_BLOCK_SERIES_LifeTime.isJsonNull() && RECHARGE_BLOCK_SERIES_LifeTime.entrySet().size()>0 ) {
		if(RECHARGE_BLOCK_SERIES_LifeTime.has("keys")){
			JsonArray ekeys = RECHARGE_BLOCK_SERIES_LifeTime.get("keys").getAsJsonArray();
			for(int i=0;i<=ekeys.size()-1;i++){
				if(ekeys.get(i).getAsLong()>=coChangeDate){
					rechargeCount = rechargeCount+1;
					JsonObject obj = RECHARGE_BLOCK_SERIES_LifeTime.getAsJsonObject(ekeys.get(i).getAsString());
					if(obj!=null && !obj.isJsonNull() && obj.entrySet().size()!=0 && obj.has("RECHARGE_DATA")){
						JsonArray rechrgeData = obj.get("RECHARGE_DATA").getAsJsonArray();
						int rechargeAmount = rechrgeData.get(0).getAsInt();
						if(rechargeAmount > 30)
							rechargeCountOver30 = rechargeCountOver30+1;
					 }
				}
			}
		}
	}
}
return String.valueOf(rechargeCount) + "|" + String.valueOf(rechargeCountOver30);
line 1:0 no viable alternative at input 'int'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params RECHARGE_BLOCK_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getDaysSinceCommOfferchange" -- > "return getDaysSinceCommercialOfferChange();"
Preprocessed Expression : return  SIFTMATH.getDaysSinceCommercialOfferChange();
line 1:0 no viable alternative at input 'return'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getValueFromIDDMultiSeries" -- > "int end = duration - 1;\r\n\t\tlong msecPerDay = 86400000L;\r\n\t\tif( start < 0 || end < 0 )\r\n\t\t\treturn 0.0;\r\n\t\tif( series == null )\r\n\t\t\treturn 0.0;\r\n\t\tString[ ] strCondColIndexs = condColIndexs.split( \",\" );\r\n\t\tString[ ] strConditionValues = conditionValues.split( \",\" );\r\n\t\tString[ ] strCondOperators = condOperators.split( \",\" );\r\n\t\tString[ ] strCondColTypes = condColTypes.split( \",\" );\r\n\r\n\t\tint[ ] nCondColIndexes = new int[ strCondColIndexs.length ];\r\n\t\tfor( int i = 0; i < strCondColIndexs.length; i++ )\r\n\t\t\tnCondColIndexes[ i ] = Integer.parseInt( strCondColIndexs[ i ] );\r\n\r\n\t\tlong lStart = getCurrentTime() - ( start * msecPerDay );\r\n\t\tlStart = lStart - ( lStart % msecPerDay );\r\n\t\tlong lEnd = lStart - ( end * msecPerDay );\r\n\r\n\t\tJsonElement eKeysArr = series.get( \"keys\" );\r\n\t\tif( eKeysArr == null || eKeysArr.isJsonNull() )\r\n\t\t\treturn 0.0;\r\n\r\n\t\tJsonArray jKeysArr = eKeysArr.getAsJsonArray();\r\n\r\n\t\tjava.util.ArrayList< Double > selectedValues = new java.util.ArrayList< Double >();\r\n\t\tfor( int i = ( jKeysArr.size() - 1 ); i >= 0; i-- ) {\r\n\t\t\tlong currentKey = jKeysArr.get( i ).getAsLong();\r\n\t\t\tif( currentKey < lEnd )\r\n\t\t\t\tbreak;\r\n\t\t\tif( currentKey > lStart )\r\n\t\t\t\tcontinue;\r\n\t\t\tString index = new Long( currentKey ).toString();\r\n\t\t\tJsonElement e = series.get( index );\r\n\t\t\tif( e == null )\r\n\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tJsonElement iddTypeJele = e.getAsJsonObject().get(iddType);\r\n\t\t\tif(iddTypeJele ==null)\r\n\t\t\t\tcontinue;\t\t\r\n\t\t\tJsonElement eIDD = iddTypeJele.getAsJsonObject().get( iddIndex );\r\n\t\t\tif( eIDD == null )\r\n\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tJsonArray jValue = eIDD.getAsJsonArray();\r\n\t\t\tjava.util.ArrayList< Boolean > results = new java.util.ArrayList< Boolean >();\r\n\t\t\tfor( int j = 0; j < nCondColIndexes.length; j++ ) {\r\n\t\t\t\tString lhs = jValue.get( nCondColIndexes[ j ] ).getAsString();\r\n\t\t\t\tString rhs = strConditionValues[ j ];\r\n\t\t\t\tif( strCondColTypes[ j ].equals( \"String\" ) && !evaluateStringOperations( lhs, rhs, strCondOperators[ j ] ) )\r\n\t\t\t\t\tbreak;\r\n\t\t\t\telse if( !strCondColTypes[ j ].equals( \"String\" )\r\n\t\t\t\t\t\t&& !evaluateNumericOperation( Double.parseDouble( lhs ), Double.parseDouble( rhs ), strCondOperators[ j ] ) )\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tresults.add( true );\r\n\t\t\t}\r\n\t\t\tif( results.size() == nCondColIndexes.length )\r\n\t\t\t\tselectedValues.add( jValue.get( opColumn ).getAsDouble() );\r\n\t\t}\r\n\t\t// System.out.println( \"SelectedValues : \" + selectedValues.toString()\r\n\t\t// );\r\n\t\tdouble[ ] dRes = new double[ selectedValues.size() ];\r\n\t\tfor( int i = 0; i < selectedValues.size(); i++ )\r\n\t\t\tdRes[ i ] = (Double)selectedValues.get( i );\r\n\t\t// /SUM,COUNT,MODE,MEAN,MAX\r\n\t\tif( operationType.equals( \"SUM\" ) ) {\r\n\t\t\torg.apache.commons.math3.stat.descriptive.summary.Sum  sum = new org.apache.commons.math3.stat.descriptive.summary.Sum();\r\n\t\t\treturn sum.evaluate( dRes );\r\n\t\t}else if( operationType.equals( \"COUNT\" ) )\r\n\t\t\treturn (double)dRes.length;\r\n\t\telse if( operationType.equals( \"MEAN\" ) ) {\r\n\t\t\torg.apache.commons.math3.stat.descriptive.moment.Mean  mean = new org.apache.commons.math3.stat.descriptive.moment.Mean();\r\n\t\t\treturn mean.evaluate( dRes );\r\n\t\t}else if( operationType.equals( \"MIN\" ) ) {\r\n\t\t\torg.apache.commons.math3.stat.descriptive.rank.Min min = new org.apache.commons.math3.stat.descriptive.rank.Min();\r\n\t\t\treturn min.evaluate( dRes );\r\n\t\t}else if( operationType.equals( \"MEDIAN\" ) ) {\r\n\t\t\torg.apache.commons.math.stat.descriptive.rank.Median med = new org.apache.commons.math.stat.descriptive.rank.Median();\r\n\t\t\treturn med.evaluate( dRes );\r\n\t\t}else if( operationType.equals( \"MAX\" ) ) {\r\n\t\t\torg.apache.commons.math3.stat.descriptive.rank.Max max = new org.apache.commons.math3.stat.descriptive.rank.Max();\r\n\t\t\treturn max.evaluate( dRes );\r\n\t\t}else if( operationType.equals( \"MODE\" ) ) {\r\n\t\t\tdouble maxValue = 0, maxCount = 0;\r\n\t\t\tfor( int i = 0; i < dRes.length; ++i ) {\r\n\t\t\t\tdouble count = 0;\r\n\t\t\t\tfor( int j = 0; j < dRes.length; ++j ) {\r\n\t\t\t\t\tif( dRes[ j ] == dRes[ i ] )\r\n\t\t\t\t\t\t++count;\r\n\t\t\t\t}\r\n\t\t\t\tif( count >= maxCount ) {\r\n\t\t\t\t\tmaxCount = count;\r\n\t\t\t\t\tmaxValue = dRes[ i ];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn maxValue;\r\n\t\t}\r\n\t\treturn 0.0;"
Preprocessed Expression : int end = duration - 1;
		long msecPerDay = 86400000L;
		if( start < 0 || end < 0 )
			return 0.0;
		if( series == null )
			return 0.0;
		String[ ] strCondColIndexs = condColIndexs.split( "," );
		String[ ] strConditionValues = conditionValues.split( "," );
		String[ ] strCondOperators = condOperators.split( "," );
		String[ ] strCondColTypes = condColTypes.split( "," );

		int[ ] nCondColIndexes = new int[ strCondColIndexs.length ];
		for( int i = 0; i < strCondColIndexs.length; i++ )
			nCondColIndexes[ i ] = Integer.parseInt( strCondColIndexs[ i ] );

		long lStart =  SIFTMATH.getCurrentTime() - ( start * msecPerDay );
		lStart = lStart - ( lStart % msecPerDay );
		long lEnd = lStart - ( end * msecPerDay );

		JsonElement eKeysArr = series.get( "keys" );
		if( eKeysArr == null || eKeysArr.isJsonNull() )
			return 0.0;

		JsonArray jKeysArr = eKeysArr.getAsJsonArray();

		java.util.ArrayList< Double > selectedValues = new java.util.ArrayList< Double >();
		for( int i = ( jKeysArr.size() - 1 ); i >= 0; i-- ) {
			long currentKey = jKeysArr.get( i ).getAsLong();
			if( currentKey < lEnd )
				break;
			if( currentKey > lStart )
				continue;
			String index = new Long( currentKey ).toString();
			JsonElement e = series.get( index );
			if( e == null )
				continue;
			
			JsonElement iddTypeJele = e.getAsJsonObject().get(iddType);
			if(iddTypeJele ==null)
				continue;		
			JsonElement eIDD = iddTypeJele.getAsJsonObject().get( iddIndex );
			if( eIDD == null )
				continue;
			
			JsonArray jValue = eIDD.getAsJsonArray();
			java.util.ArrayList< Boolean > results = new java.util.ArrayList< Boolean >();
			for( int j = 0; j < nCondColIndexes.length; j++ ) {
				String lhs = jValue.get( nCondColIndexes[ j ] ).getAsString();
				String rhs = strConditionValues[ j ];
				if( strCondColTypes[ j ].equals( "String" ) && ! SIFTMATH.execBooleanFunction("evaluateStringOperations",  lhs, rhs, strCondOperators[ j ] ) )
					break;
				else if( !strCondColTypes[ j ].equals( "String" )
						&& ! SIFTMATH.execBooleanFunction("evaluateNumericOperation",  Double.parseDouble( lhs ), Double.parseDouble( rhs ), strCondOperators[ j ] ) )
					break;
				results.add( true );
			}
			if( results.size() == nCondColIndexes.length )
				selectedValues.add( jValue.get( opColumn ).getAsDouble() );
		}
		// System.out.println( "SelectedValues : " + selectedValues.toString()
		// );
		double[ ] dRes = new double[ selectedValues.size() ];
		for( int i = 0; i < selectedValues.size(); i++ )
			dRes[ i ] = (Double)selectedValues.get( i );
		// /SUM,COUNT,MODE,MEAN,MAX
		if( operationType.equals( "SUM" ) ) {
			org.apache.commons.math3.stat.descriptive.summary.Sum  sum = new org.apache.commons.math3.stat.descriptive.summary.Sum();
			return sum.evaluate( dRes );
		}else if( operationType.equals( "COUNT" ) )
			return (double)dRes.length;
		else if( operationType.equals( "MEAN" ) ) {
			org.apache.commons.math3.stat.descriptive.moment.Mean  mean = new org.apache.commons.math3.stat.descriptive.moment.Mean();
			return mean.evaluate( dRes );
		}else if( operationType.equals( "MIN" ) ) {
			org.apache.commons.math3.stat.descriptive.rank.Min min = new org.apache.commons.math3.stat.descriptive.rank.Min();
			return min.evaluate( dRes );
		}else if( operationType.equals( "MEDIAN" ) ) {
			org.apache.commons.math.stat.descriptive.rank.Median med = new org.apache.commons.math.stat.descriptive.rank.Median();
			return med.evaluate( dRes );
		}else if( operationType.equals( "MAX" ) ) {
			org.apache.commons.math3.stat.descriptive.rank.Max max = new org.apache.commons.math3.stat.descriptive.rank.Max();
			return max.evaluate( dRes );
		}else if( operationType.equals( "MODE" ) ) {
			double maxValue = 0, maxCount = 0;
			for( int i = 0; i < dRes.length; ++i ) {
				double count = 0;
				for( int j = 0; j < dRes.length; ++j ) {
					if( dRes[ j ] == dRes[ i ] )
						++count;
				}
				if( count >= maxCount ) {
					maxCount = count;
					maxValue = dRes[ i ];
				}
			}
			return maxValue;
		}
		return 0.0;
line 1:0 no viable alternative at input 'int'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getLatestCreditActivityDate" -- > "JsonObject jCreditSeries = CREDIT_SERIES_LifeTime;\r\nif(jCreditSeries.has( \"latestCreditActivityDate\" )){\r\nJsonElement eLatestCreditDate= jCreditSeries.get( \"latestCreditActivityDate\" );\r\nif( eLatestCreditDate == null )\r\nreturn 0l;\r\nreturn eLatestCreditDate.getAsLong();\r\n}\r\nelse return 0l;"
Preprocessed Expression : JsonObject jCreditSeries = CREDIT_SERIES_LifeTime;
if(jCreditSeries.has( "latestCreditActivityDate" )){
JsonElement eLatestCreditDate= jCreditSeries.get( "latestCreditActivityDate" );
if( eLatestCreditDate == null )
return 0l;
return eLatestCreditDate.getAsLong();
}
else return 0l;
line 1:0 no viable alternative at input 'JsonObject'
------------Infered params CREDIT_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getDaysSinceLastJourneyContact" -- > "int diff = -1; \r\n\t\tif (EVENT_CONTACTS_LifeTime != null && !EVENT_CONTACTS_LifeTime.isJsonNull() && EVENT_CONTACTS_LifeTime.entrySet().size() != 0) {\r\n\tjava.util.Set<java.util.Map.Entry<String, JsonElement>> entrySet = EVENT_CONTACTS_LifeTime.entrySet();\r\n\tfor (java.util.Map.Entry<String, JsonElement> entry : entrySet) {\r\n\t\tif( EVENT_CONTACTS_LifeTime.has(EVENT_IDENTIFICATION_KEY) ) { \r\n            long lastTriggerDateTime = EVENT_CONTACTS_LifeTime.get(EVENT_IDENTIFICATION_KEY).getAsLong(); \r\n            lastTriggerDateTime = ( lastTriggerDateTime - ( lastTriggerDateTime % 86400000l ) ); \r\n            int daysDiff = (int) ( getCurrentDay() - lastTriggerDateTime ); \r\n            diff = ( int ) ( daysDiff / 86400000l );\r\n        } \r\n\t}\r\n\t\t}\r\n        return diff;"
Preprocessed Expression : int diff = -1; 
		if (EVENT_CONTACTS_LifeTime != null && !EVENT_CONTACTS_LifeTime.isJsonNull() && EVENT_CONTACTS_LifeTime.entrySet().size() != 0) {
	java.util.Set<java.util.Map.Entry<String, JsonElement>> entrySet = EVENT_CONTACTS_LifeTime.entrySet();
	for (java.util.Map.Entry<String, JsonElement> entry : entrySet) {
		if( EVENT_CONTACTS_LifeTime.has(EVENT_IDENTIFICATION_KEY) ) { 
            long lastTriggerDateTime = EVENT_CONTACTS_LifeTime.get(EVENT_IDENTIFICATION_KEY).getAsLong(); 
            lastTriggerDateTime = ( lastTriggerDateTime - ( lastTriggerDateTime % 86400000l ) ); 
            int daysDiff = (int) (  SIFTMATH.getCurrentDay() - lastTriggerDateTime ); 
            diff = ( int ) ( daysDiff / 86400000l );
        } 
	}
		}
        return diff;
line 1:0 no viable alternative at input 'int'
------------Infered params EVENT_CONTACTS_LifeTime -- com.google.gson.JsonObject -- JsonObject
------------Infered params EVENT_IDENTIFICATION_KEY -- java.lang.String -- String
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "isCurrentlyMonitored" -- > "JsonArray finalResult = new JsonArray();\r\nif(OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime!=null && !OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.isJsonNull() && OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.entrySet().size()!=0) {\r\n\tString offerName = \"\", endTime = \"\", startTime = \"\", rewardValue = \"\", rewardExpiry = \"\", monitoredAction = \"\",optin = \"\",channel=\"\";\r\n\tString offerNameList = null, endTimeList = null, startTimeList = null, rewardValueList = null,\r\n\trewardExpiryList = null, monitoredActionList = null, optinList = null,channelList=null;\r\n\t\r\n\tjava.util.Set<java.util.Map.Entry<String, JsonElement>> entrySet = OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.entrySet();\r\n\tfor (java.util.Map.Entry<String, JsonElement> entry : entrySet) {\r\n\t\tJsonElement ele = (JsonElement)entry.getValue();\r\n\t\tif(!ele.isJsonArray())\r\n\t\t\tcontinue;\r\n\t\tJsonArray offerArray = (JsonArray) entry.getValue();\r\n\t\tofferName = entry.getKey().toString();\r\n\t\tif(offerArray.size()>=2){\r\n\t\t\tendTime = offerArray.get(0).getAsString();\r\n\t\t\tstartTime = offerArray.get(1).getAsString();\r\n\t\t}\r\n\t\tif(offerArray.size()>=5){\r\n\t\t\trewardValue = offerArray.get(2).getAsString();\r\n\t\t\trewardExpiry = offerArray.get(3).getAsString();\r\n\t\t\tmonitoredAction = offerArray.get(4).getAsString();\r\n\t\t}\r\n\t\tif(offerArray.size()>=6)\r\n\t\t\toptin = offerArray.get(5).getAsString();\r\n\t\tif(offerArray.size()>=7)\r\n\t\t\tchannel = offerArray.get(6).getAsString();\r\n\r\n\t\tif (endTimeList == null)\r\n\t\t\tendTimeList = endTime;\r\n\t\telse\r\n\t\t\tendTimeList = endTimeList + \"~\" + endTime;\r\n\r\n\t\tif (startTimeList == null)\r\n\t\t\tstartTimeList = startTime;\r\n\t\telse\r\n\t\t\tstartTimeList = startTimeList + \"~\" + startTime;\r\n\r\n\t\tif (rewardValueList == null)\r\n\t\t\trewardValueList = rewardValue;\r\n\t\telse\r\n\t\t\trewardValueList = rewardValueList + \"~\" + rewardValue;\r\n\r\n\t\tif (rewardExpiryList == null)\r\n\t\t\trewardExpiryList = rewardExpiry;\r\n\t\telse\r\n\t\t\trewardExpiryList = rewardExpiryList + \"~\" + rewardExpiry;\r\n\r\n\t\tif (monitoredActionList == null)\r\n\t\t\tmonitoredActionList = monitoredAction;\r\n\t\telse\r\n\t\t\tmonitoredActionList = monitoredActionList + \"~\" + monitoredAction;\r\n\r\n\t\tif (optinList == null)\r\n\t\t\toptinList = optin;\r\n\t\telse\r\n\t\t\toptinList = optinList + \"~\" + optin;\r\n\r\n\t\tif (offerNameList == null)\r\n\t\t\tofferNameList = offerName;\r\n\t\telse\r\n\t\t\tofferNameList = offerNameList + \"~\" + offerName;\r\n\r\n\t\tif (channelList == null)\r\n\t\t\tchannelList = channel;\r\n\t\telse\r\n\t\t\tchannelList = channelList + \"~\" + channel;\r\n\r\n\t}\r\n\tif(offerNameList!=null)\r\n\tfinalResult.add(new JsonPrimitive(offerNameList));\r\n\tif(endTimeList!=null)\r\n\tfinalResult.add(new JsonPrimitive(endTimeList));\r\n\tif(startTimeList!=null)\r\n\tfinalResult.add(new JsonPrimitive(startTimeList));\r\n\tif(rewardValueList!=null)\r\n\tfinalResult.add(new JsonPrimitive(rewardValueList));\r\n\tif(rewardExpiryList!=null)\r\n\tfinalResult.add(new JsonPrimitive(rewardExpiryList));\r\n\tif(monitoredActionList!=null)\r\n\tfinalResult.add(new JsonPrimitive(monitoredActionList));\r\n\tif(optinList!=null)\r\n\tfinalResult.add(new JsonPrimitive(optinList));\r\n\tif(channelList!=null)\r\n\tfinalResult.add(new JsonPrimitive(channelList));\r\n}\r\nreturn finalResult;"
Preprocessed Expression : JsonArray finalResult = new JsonArray();
if(OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime!=null && !OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.isJsonNull() && OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.entrySet().size()!=0) {
	String offerName = "", endTime = "", startTime = "", rewardValue = "", rewardExpiry = "", monitoredAction = "",optin = "",channel="";
	String offerNameList = null, endTimeList = null, startTimeList = null, rewardValueList = null,
	rewardExpiryList = null, monitoredActionList = null, optinList = null,channelList=null;
	
	java.util.Set<java.util.Map.Entry<String, JsonElement>> entrySet = OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.entrySet();
	for (java.util.Map.Entry<String, JsonElement> entry : entrySet) {
		JsonElement ele = (JsonElement)entry.getValue();
		if(!ele.isJsonArray())
			continue;
		JsonArray offerArray = (JsonArray) entry.getValue();
		offerName = entry.getKey().toString();
		if(offerArray.size()>=2){
			endTime = offerArray.get(0).getAsString();
			startTime = offerArray.get(1).getAsString();
		}
		if(offerArray.size()>=5){
			rewardValue = offerArray.get(2).getAsString();
			rewardExpiry = offerArray.get(3).getAsString();
			monitoredAction = offerArray.get(4).getAsString();
		}
		if(offerArray.size()>=6)
			optin = offerArray.get(5).getAsString();
		if(offerArray.size()>=7)
			channel = offerArray.get(6).getAsString();

		if (endTimeList == null)
			endTimeList = endTime;
		else
			endTimeList = endTimeList + "~" + endTime;

		if (startTimeList == null)
			startTimeList = startTime;
		else
			startTimeList = startTimeList + "~" + startTime;

		if (rewardValueList == null)
			rewardValueList = rewardValue;
		else
			rewardValueList = rewardValueList + "~" + rewardValue;

		if (rewardExpiryList == null)
			rewardExpiryList = rewardExpiry;
		else
			rewardExpiryList = rewardExpiryList + "~" + rewardExpiry;

		if (monitoredActionList == null)
			monitoredActionList = monitoredAction;
		else
			monitoredActionList = monitoredActionList + "~" + monitoredAction;

		if (optinList == null)
			optinList = optin;
		else
			optinList = optinList + "~" + optin;

		if (offerNameList == null)
			offerNameList = offerName;
		else
			offerNameList = offerNameList + "~" + offerName;

		if (channelList == null)
			channelList = channel;
		else
			channelList = channelList + "~" + channel;

	}
	if(offerNameList!=null)
	finalResult.add(new JsonPrimitive(offerNameList));
	if(endTimeList!=null)
	finalResult.add(new JsonPrimitive(endTimeList));
	if(startTimeList!=null)
	finalResult.add(new JsonPrimitive(startTimeList));
	if(rewardValueList!=null)
	finalResult.add(new JsonPrimitive(rewardValueList));
	if(rewardExpiryList!=null)
	finalResult.add(new JsonPrimitive(rewardExpiryList));
	if(monitoredActionList!=null)
	finalResult.add(new JsonPrimitive(monitoredActionList));
	if(optinList!=null)
	finalResult.add(new JsonPrimitive(optinList));
	if(channelList!=null)
	finalResult.add(new JsonPrimitive(channelList));
}
return finalResult;
line 1:0 no viable alternative at input 'JsonArray'
------------Infered params OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getActivationAccountProfile" -- > "if(ACTIVATION_ACCOUNT_PROFILE_LifeTime!=null && !ACTIVATION_ACCOUNT_PROFILE_LifeTime.equals(\"-99\"))\r\n{\r\nreturn ACTIVATION_ACCOUNT_PROFILE_LifeTime;\r\n}\r\nreturn \"\";"
Preprocessed Expression : if(ACTIVATION_ACCOUNT_PROFILE_LifeTime!=null && !ACTIVATION_ACCOUNT_PROFILE_LifeTime.equals("-99"))
{
return ACTIVATION_ACCOUNT_PROFILE_LifeTime;
}
return "";
line 1:0 no viable alternative at input 'if'
------------Infered params ACTIVATION_ACCOUNT_PROFILE_LifeTime -- java.lang.String -- String
Compiling Function : "getContactCount" -- > "long lStart, lEnd;\r\n\t\tint count = 0;\r\n\t\tlong msecPerDay = 86400000l;\r\n\t\tif( start == - 1 )\r\n\t\t\tlStart = -1;\r\n\t\telse \r\n\t\t\tlStart = getCurrentTime() - start * msecPerDay;\t\t// Until the current time of the day\r\n\r\n\t\tif( duration == -1 )\r\n\t\t\tlEnd = -1;\r\n\t\telse{\r\n\t\t\tlEnd = ( lStart - lStart % msecPerDay ) - ( ( duration - 1 ) * msecPerDay );\r\n\t\t\tlStart += msecPerDay - 1000;\r\n\t\t}\r\n\r\n\t\tif( category.equals( \"*\" ) ){\r\n\t\t\tif( offer.equals( \"*\" ) ){\r\n\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\treturn OFFER_COUNT_LifeTime.get( \"TotalCount\" ).getAsInt();\t\t\t\t\t\t\t\t\t// getContactCount( \"*\", \"*\", \"*\", -1, -1 );\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tcom.google.gson.JsonElement contactSeriesEle = OFFER_COUNT_LifeTime.get( \"CONTACT_SERIES\" );\r\n\t\t\t\t\t\tif( contactSeriesEle == null || contactSeriesEle.isJsonNull() )\r\n\t\t\t\t\t\t\treturn -1;\r\n\r\n\t\t\t\t\t\treturn getRangeCountFromArray( contactSeriesEle.getAsJsonArray(), lStart, lEnd );\r\n\t\t\t\t\t}\r\n\t\t\t\t} else{\r\n\t\t\t\t\tif( lStart == -1 ){\r\n\t\t\t\t\t\tcom.google.gson.JsonElement channelEle = OFFER_COUNT_LifeTime.get( channel);\r\n\t\t\t\t\t\tif( channelEle == null )\r\n\t\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\treturn channelEle.getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// getContactCount( \"*\", \"*\", \"SMS\", -1, -1 );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// TODO: Need to add for getContactCount( \"*\", \"*\", \"SMS\", 0, 30 );\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else{\r\n\r\n\t\t\t\tString[] offerCategories = null;\r\n\t\t\t\tif( OFFER_CATEGORY == null || OFFER_CATEGORY.equals( \"\" ) ) {\r\n\t\t\t\t\tcom.google.gson.JsonElement offerCatEle = getSiftwareAttribute( \"Offer\", offer, \"category\" );\r\n\t\t\t\t\tif( offerCatEle == null || offerCatEle.isJsonNull() ) {\r\n\t\t\t\t\t\tofferCategories = new String[ 1 ];\r\n\t\t\t\t\t\tofferCategories[ 0 ] = \"GENERIC\";\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\tofferCategories = offerCatEle.getAsString().split( \",\" );\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tofferCategories = OFFER_CATEGORY.split( \",\" );\r\n\r\n\r\n\t\t\t\tfor( int i = 0; i < offerCategories.length; i ++ ){\r\n\t\t\t\t\tjava.lang.String cat = offerCategories[ i ];\r\n\t\t\t\t\tcom.google.gson.JsonElement catele = OFFER_COUNT_LifeTime.get( cat );\r\n\t\t\t\t\tif( catele == null )\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\tcom.google.gson.JsonObject catObj = catele.getAsJsonObject();\r\n\t\t\t\t\tcom.google.gson.JsonElement catOfferEle = catObj.get( offer);\r\n\t\t\t\t\tif( catOfferEle == null )\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\tcom.google.gson.JsonObject catOfferObj = catOfferEle.getAsJsonObject();\r\n\t\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\t\treturn catOfferObj.get( \"count\" ).getAsInt();\t\t\t\t\t\t\t\t\t\t\t// getContactCount( \"*\", \"Offer1\", \"*\", -1, -1 );\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tcom.google.gson.JsonElement dateSeriesEle = catOfferObj.get( \"date_series\" );\r\n\t\t\t\t\t\t\tif( dateSeriesEle == null )\r\n\t\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\t\treturn getRangeCountFromArray( dateSeriesEle.getAsJsonArray(), lStart, lEnd );\t\t\t// getContactCount( \"*\", \"Offer1\", \"*\", 0, 30 );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else{\r\n\t\t\t\t\t\tif( lStart == -1 ){\r\n\t\t\t\t\t\t\tcom.google.gson.JsonElement channelEle = catOfferObj.get( channel);\r\n\t\t\t\t\t\t\tif( channelEle == null )\r\n\t\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\t\treturn channelEle.getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// getContactCount( \"*\", \"Offer1\", \"SMS\", -1, -1 );\r\n\t\t\t\t\t\t} else{\r\n\t\t\t\t\t\t\tcom.google.gson.JsonElement channelDateSeriesEle = catOfferObj.get( channel+ \"_date_series\" );\r\n\t\t\t\t\t\t\tif( channelDateSeriesEle == null )\r\n\t\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\t\treturn getRangeCountFromArray( channelDateSeriesEle.getAsJsonArray(), lStart, lEnd );\t//  getContactCount( \"*\", \"Offer1\", \"SMS\", 0, 30 );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else{\r\n\t\t\tcom.google.gson.JsonElement catEle = OFFER_COUNT_LifeTime.get( category );\r\n\t\t\tif( catEle == null )\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\tcom.google.gson.JsonObject catObj = catEle.getAsJsonObject();\r\n\t\t\tif( offer.equals( \"*\" ) ){\r\n\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\treturn catObj.get( \"count\" ).getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t//  getContactCount( \"Cat1\", \"*\", \"*\", -1, -1 );\r\n\r\n\t\t\t\t\tcom.google.gson.JsonElement dateSeriesEle = catObj.get( \"date_series\" );\r\n\t\t\t\t\tif( dateSeriesEle == null )\r\n\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\treturn getRangeCountFromArray( dateSeriesEle.getAsJsonArray(), lStart, lEnd );\t\t\t\t\t//  getContactCount( \"Cat1\", \"*\", \"*\", 0, 30 );\r\n\t\t\t\t} else{\r\n\t\t\t\t\tif( lStart == -1 ){\r\n\t\t\t\t\t\tcom.google.gson.JsonElement channelEle = catObj.get( channel);\r\n\t\t\t\t\t\tif( channelEle == null )\r\n\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\treturn catObj.get( channel).getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t//  getContactCount( \"Cat1\", \"*\", \"SMS\", -1, -1 );\r\n\t\t\t\t\t} else{\r\n\t\t\t\t\t\tcom.google.gson.JsonElement catchannelEle = catObj.get( channel+ \"_date_series\" );\r\n\t\t\t\t\t\tif( catchannelEle == null ) \r\n\t\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\t\treturn getRangeCountFromArray( catchannelEle.getAsJsonArray(), lStart, lEnd );\t\t\t\t//  getContactCount( \"Cat1\", \"*\", \"SMS\", 0, 30 );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else{\r\n\t\t\t\tcom.google.gson.JsonElement offerEle = catObj.get( offer);\r\n\t\t\t\tif( offerEle == null )\r\n\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\tcom.google.gson.JsonObject offerObj = offerEle.getAsJsonObject();\r\n\t\t\t\tif( channel.equals( \"*\" ) ){\r\n\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\treturn offerObj.get( \"count\" ).getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t//  getContactCount( \"Cat1\", \"Offer1\", \"*\", -1, -1 );\r\n\r\n\t\t\t\t\tcom.google.gson.JsonElement dateSeriesEle = offerObj.get( \"date_series\" );\r\n\t\t\t\t\tif( dateSeriesEle == null )\r\n\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\treturn getRangeCountFromArray( dateSeriesEle.getAsJsonArray(), lStart, lEnd );\t\t\t\t\t//  getContactCount( \"Cat1\", \"Offer1\", \"*\", 0, 30 );\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tcom.google.gson.JsonElement channelEle = offerObj.get( channel);\r\n\t\t\t\t\tif( channelEle == null )\r\n\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\tif( lStart == -1 )\r\n\t\t\t\t\t\treturn offerObj.get( channel).getAsInt();\t\t\t\t\t\t\t\t\t\t\t\t\t//  getContactCount( \"Cat1\", \"Offer1\", \"SMS\", -1, -1 );\r\n\r\n\t\t\t\t\tcom.google.gson.JsonElement channelDateSeriesEle = offerObj.get( channel+ \"_date_series\" );\r\n\t\t\t\t\tif( channelDateSeriesEle == null )\r\n\t\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t\treturn getRangeCountFromArray( channelDateSeriesEle.getAsJsonArray(), lStart, lEnd );\t\t\t//  getContactCount( \"Cat1\", \"Offer1\", \"SMS\", 0, 30 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif( IS_SIMULATED.equals( \"true\" ) )\r\n\t\t\tcount += getSimulatedContactCount( category, offer, channel, start, duration );\r\n\t\treturn count;"
Preprocessed Expression : long lStart, lEnd;
		int count = 0;
		long msecPerDay = 86400000l;
		if( start == - 1 )
			lStart = -1;
		else 
			lStart =  SIFTMATH.getCurrentTime() - start * msecPerDay;		// Until the current time of the day

		if( duration == -1 )
			lEnd = -1;
		else{
			lEnd = ( lStart - lStart % msecPerDay ) - ( ( duration - 1 ) * msecPerDay );
			lStart += msecPerDay - 1000;
		}

		if( category.equals( "*" ) ){
			if( offer.equals( "*" ) ){
				if( channel.equals( "*" ) ){
					if( lStart == -1 )
						return OFFER_COUNT_LifeTime.get( "TotalCount" ).getAsInt();									//  SIFTMATH.execIntFunction("getContactCount",  "*", "*", "*", -1, -1 );
					else{
						com.google.gson.JsonElement contactSeriesEle = OFFER_COUNT_LifeTime.get( "CONTACT_SERIES" );
						if( contactSeriesEle == null || contactSeriesEle.isJsonNull() )
							return -1;

						return  SIFTMATH.execIntFunction("getRangeCountFromArray",  contactSeriesEle.getAsJsonArray(), lStart, lEnd );
					}
				} else{
					if( lStart == -1 ){
						com.google.gson.JsonElement channelEle = OFFER_COUNT_LifeTime.get( channel);
						if( channelEle == null )
							return 0;
						return channelEle.getAsInt();																//  SIFTMATH.execIntFunction("getContactCount",  "*", "*", "SMS", -1, -1 );
					} else {
						// TODO: Need to add for  SIFTMATH.execIntFunction("getContactCount",  "*", "*", "SMS", 0, 30 );
						return -1;
					}
				}
			} else{

				String[] offerCategories = null;
				if( OFFER_CATEGORY == null || OFFER_CATEGORY.equals( "" ) ) {
					com.google.gson.JsonElement offerCatEle =  SIFTMATH.getSiftwareAttribute( "Offer", offer, "category" );
					if( offerCatEle == null || offerCatEle.isJsonNull() ) {
						offerCategories = new String[ 1 ];
						offerCategories[ 0 ] = "GENERIC";
					} else
						offerCategories = offerCatEle.getAsString().split( "," );
				}
				else
					offerCategories = OFFER_CATEGORY.split( "," );


				for( int i = 0; i < offerCategories.length; i ++ ){
					java.lang.String cat = offerCategories[ i ];
					com.google.gson.JsonElement catele = OFFER_COUNT_LifeTime.get( cat );
					if( catele == null )
						continue;

					com.google.gson.JsonObject catObj = catele.getAsJsonObject();
					com.google.gson.JsonElement catOfferEle = catObj.get( offer);
					if( catOfferEle == null )
						continue;

					com.google.gson.JsonObject catOfferObj = catOfferEle.getAsJsonObject();
					if( channel.equals( "*" ) ){
						if( lStart == -1 )
							return catOfferObj.get( "count" ).getAsInt();											//  SIFTMATH.execIntFunction("getContactCount",  "*", "Offer1", "*", -1, -1 );
						else{
							com.google.gson.JsonElement dateSeriesEle = catOfferObj.get( "date_series" );
							if( dateSeriesEle == null )
								return 0;

							return  SIFTMATH.execIntFunction("getRangeCountFromArray",  dateSeriesEle.getAsJsonArray(), lStart, lEnd );			//  SIFTMATH.execIntFunction("getContactCount",  "*", "Offer1", "*", 0, 30 );
						}
					} else{
						if( lStart == -1 ){
							com.google.gson.JsonElement channelEle = catOfferObj.get( channel);
							if( channelEle == null )
								return 0;

							return channelEle.getAsInt();															//  SIFTMATH.execIntFunction("getContactCount",  "*", "Offer1", "SMS", -1, -1 );
						} else{
							com.google.gson.JsonElement channelDateSeriesEle = catOfferObj.get( channel+ "_date_series" );
							if( channelDateSeriesEle == null )
								return 0;

							return  SIFTMATH.execIntFunction("getRangeCountFromArray",  channelDateSeriesEle.getAsJsonArray(), lStart, lEnd );	//   SIFTMATH.execIntFunction("getContactCount",  "*", "Offer1", "SMS", 0, 30 );
						}
					}
				}
			}
		} else{
			com.google.gson.JsonElement catEle = OFFER_COUNT_LifeTime.get( category );
			if( catEle == null )
				return 0;

			com.google.gson.JsonObject catObj = catEle.getAsJsonObject();
			if( offer.equals( "*" ) ){
				if( channel.equals( "*" ) ){
					if( lStart == -1 )
						return catObj.get( "count" ).getAsInt();													//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "*", "*", -1, -1 );

					com.google.gson.JsonElement dateSeriesEle = catObj.get( "date_series" );
					if( dateSeriesEle == null )
						return 0;

					return  SIFTMATH.execIntFunction("getRangeCountFromArray",  dateSeriesEle.getAsJsonArray(), lStart, lEnd );					//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "*", "*", 0, 30 );
				} else{
					if( lStart == -1 ){
						com.google.gson.JsonElement channelEle = catObj.get( channel);
						if( channelEle == null )
							return 0;

						return catObj.get( channel).getAsInt();													//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "*", "SMS", -1, -1 );
					} else{
						com.google.gson.JsonElement catchannelEle = catObj.get( channel+ "_date_series" );
						if( catchannelEle == null ) 
							return 0;

						return  SIFTMATH.execIntFunction("getRangeCountFromArray",  catchannelEle.getAsJsonArray(), lStart, lEnd );				//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "*", "SMS", 0, 30 );
					}
				}
			} else{
				com.google.gson.JsonElement offerEle = catObj.get( offer);
				if( offerEle == null )
					return 0;

				com.google.gson.JsonObject offerObj = offerEle.getAsJsonObject();
				if( channel.equals( "*" ) ){
					if( lStart == -1 )
						return offerObj.get( "count" ).getAsInt();													//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "Offer1", "*", -1, -1 );

					com.google.gson.JsonElement dateSeriesEle = offerObj.get( "date_series" );
					if( dateSeriesEle == null )
						return 0;

					return  SIFTMATH.execIntFunction("getRangeCountFromArray",  dateSeriesEle.getAsJsonArray(), lStart, lEnd );					//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "Offer1", "*", 0, 30 );
				}
				else{
					com.google.gson.JsonElement channelEle = offerObj.get( channel);
					if( channelEle == null )
						return 0;

					if( lStart == -1 )
						return offerObj.get( channel).getAsInt();													//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "Offer1", "SMS", -1, -1 );

					com.google.gson.JsonElement channelDateSeriesEle = offerObj.get( channel+ "_date_series" );
					if( channelDateSeriesEle == null )
						return 0;

					return  SIFTMATH.execIntFunction("getRangeCountFromArray",  channelDateSeriesEle.getAsJsonArray(), lStart, lEnd );			//   SIFTMATH.execIntFunction("getContactCount",  "Cat1", "Offer1", "SMS", 0, 30 );
				}
			}
		}
		if( IS_SIMULATED.equals( "true" ) )
			count +=  SIFTMATH.execIntFunction("getSimulatedContactCount",  category, offer, channel, start, duration );
		return count;
line 1:0 no viable alternative at input 'long'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params OFFER_COUNT_LifeTime -- com.google.gson.JsonObject -- JsonObject
------------Infered params OFFER_CATEGORY -- java.lang.String -- String
------------Infered params IS_SIMULATED -- java.lang.String -- String
Compiling Function : "getAutoRechargeAmount" -- > "if(AUTO_RECHARGE_LifeTime!=null && !AUTO_RECHARGE_LifeTime.isJsonNull()){\r\nif(AUTO_RECHARGE_LifeTime.has(\"ExpiryBased\")){\r\nJsonObject ExpiryBased=AUTO_RECHARGE_LifeTime.get(\"ExpiryBased\").getAsJsonObject();\r\nif(ExpiryBased.has(\"amount\")) \r\nreturn(ExpiryBased.get(\"amount\").getAsDouble());\r\n}}return 0.0;"
Preprocessed Expression : if(AUTO_RECHARGE_LifeTime!=null && !AUTO_RECHARGE_LifeTime.isJsonNull()){
if(AUTO_RECHARGE_LifeTime.has("ExpiryBased")){
JsonObject ExpiryBased=AUTO_RECHARGE_LifeTime.get("ExpiryBased").getAsJsonObject();
if(ExpiryBased.has("amount")) 
return(ExpiryBased.get("amount").getAsDouble());
}}return 0.0;
line 1:0 no viable alternative at input 'if'
------------Infered params AUTO_RECHARGE_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getMaxExpBonusDate" -- > "if (OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime != null && !OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.isJsonNull() && OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.entrySet().size() > 0) {\r\n    String formatedDate =\"\";\r\n\tif (OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.has(\"maxExpBonusDate\")) {\r\n\t\tJsonElement maxExpBonusDate = OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.get(\"maxExpBonusDate\");\r\n\t\t\t\t\r\n\t\tif (!maxExpBonusDate.isJsonNull()) {\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t    long expDate= Long.parseLong(maxExpBonusDate.getAsString());\r\n\t\t\t    if(expDate>0) {\r\n\t\t\t\tjava.util.Date date = new java.util.Date(expDate);\r\n\t\t\t\tjava.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n\t\t\t\tdateFormat.setTimeZone(java.util.TimeZone.getTimeZone(\"GMT\"));\r\n\t\t\t\t formatedDate = dateFormat.format(date);\r\n\t\t\t\t}\r\n\t\t\t\treturn formatedDate;\r\n\t\t\t\t\r\n\t\t\t} catch (NumberFormatException e) {\r\n\t\t\t\treturn \"\";\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n}\r\n\r\nreturn \"\";"
Preprocessed Expression : if (OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime != null && !OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.isJsonNull() && OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.entrySet().size() > 0) {
    String formatedDate ="";
	if (OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.has("maxExpBonusDate")) {
		JsonElement maxExpBonusDate = OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.get("maxExpBonusDate");
				
		if (!maxExpBonusDate.isJsonNull()) {
			
			try {
			    long expDate= Long.parseLong(maxExpBonusDate.getAsString());
			    if(expDate>0) {
				java.util.Date date = new java.util.Date(expDate);
				java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				dateFormat.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));
				 formatedDate = dateFormat.format(date);
				}
				return formatedDate;
				
			} catch (NumberFormatException e) {
				return "";
			}
		}
    }
}

return "";
line 1:0 no viable alternative at input 'if'
------------Infered params OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getBundleExpiryDate" -- > "long expiryDate = 0;\r\n\t\tJsonElement bundleInfoJele = BUNDLE_INFO_LifeTime;\r\n\t\tif( bundleInfoJele != null && !bundleInfoJele.isJsonNull() ) {\r\n\t\t\tJsonElement bundleNameJele = bundleInfoJele.getAsJsonObject().get( bundleName );\r\n\t\t\tif( bundleNameJele != null && !bundleNameJele.isJsonNull() ) {\r\n\t\t\t\tJsonElement bundleExpiryDateJele = bundleNameJele.getAsJsonObject().get( \"bundleExpiryDate\" );\r\n\t\t\t\tif( bundleExpiryDateJele != null && !bundleExpiryDateJele.isJsonNull() ) {\r\n\t\t\t\t\texpiryDate = bundleExpiryDateJele.getAsLong();\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn expiryDate;"
Preprocessed Expression : long expiryDate = 0;
		JsonElement bundleInfoJele = BUNDLE_INFO_LifeTime;
		if( bundleInfoJele != null && !bundleInfoJele.isJsonNull() ) {
			JsonElement bundleNameJele = bundleInfoJele.getAsJsonObject().get( bundleName );
			if( bundleNameJele != null && !bundleNameJele.isJsonNull() ) {
				JsonElement bundleExpiryDateJele = bundleNameJele.getAsJsonObject().get( "bundleExpiryDate" );
				if( bundleExpiryDateJele != null && !bundleExpiryDateJele.isJsonNull() ) {
					expiryDate = bundleExpiryDateJele.getAsLong();

				}
			}
		}

		return expiryDate;
line 1:0 no viable alternative at input 'long'
------------Infered params BUNDLE_INFO_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "isEligibleForBoostPreDormancyFulfilment" -- > "int daysSinceOffer_Fulfil = (int)getDaysSinceOfferTriggered(\"BESTOWAL_NOTIFICATION_PROGRAM\",offerName,\"fulfil\");\r\n\r\nif((daysSinceOffer_Fulfil!=-1 && daysSinceOffer_Fulfil <=85 ) ){\r\n\tint count =0;\r\n\tString program_offerName =\"BESTOWAL_NOTIFICATION_PROGRAM-\"+offerName;\r\n\tif(LATEST_OFFER_FULFILMENT_COUNTS.has(program_offerName))\r\n\t\tcount= LATEST_OFFER_FULFILMENT_COUNTS.get( program_offerName ).getAsInt();\r\n\r\n\t if (count < 3 && count >=1 ) {\r\n\t     return true;\r\n\t }\r\n}\r\nreturn false;"
Preprocessed Expression : int daysSinceOffer_Fulfil = (int) SIFTMATH.getDaysSinceOfferTriggered("BESTOWAL_NOTIFICATION_PROGRAM",offerName,"fulfil");

if((daysSinceOffer_Fulfil!=-1 && daysSinceOffer_Fulfil <=85 ) ){
	int count =0;
	String program_offerName ="BESTOWAL_NOTIFICATION_PROGRAM-"+offerName;
	if(LATEST_OFFER_FULFILMENT_COUNTS.has(program_offerName))
		count= LATEST_OFFER_FULFILMENT_COUNTS.get( program_offerName ).getAsInt();

	 if (count < 3 && count >=1 ) {
	     return true;
	 }
}
return false;
line 1:0 no viable alternative at input 'int'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params LATEST_OFFER_FULFILMENT_COUNTS -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "housekeepArraySeries" -- > "for( int i = 0; i < cleanDaysCount; i++ ) {\r\n\t\t\tif( arr.size() == 0 )\r\n\t\t\t\treturn true;\r\n\t\t\tlong thisDate = arr.get( 0 ).getAsJsonArray().get( 0 ).getAsLong();\r\n\t\t\tif( thisDate > limitDate )\r\n\t\t\t\tbreak;\r\n\t\t\tarr.remove( 0 );\r\n\t\t}\r\n\r\n\t\treturn true;"
Preprocessed Expression : for( int i = 0; i < cleanDaysCount; i++ ) {
			if( arr.size() == 0 )
				return true;
			long thisDate = arr.get( 0 ).getAsJsonArray().get( 0 ).getAsLong();
			if( thisDate > limitDate )
				break;
			arr.remove( 0 );
		}

		return true;
line 1:0 no viable alternative at input 'for'
Compiling Function : "getValueConsumed" -- > "JsonElement bundleInfoJele = BUNDLE_INFO_LifeTime;\r\n\t\tif( bundleInfoJele != null && !bundleInfoJele.isJsonNull() ) {\r\n\t\t\tJsonElement bundleNameJele = bundleInfoJele.getAsJsonObject().get( bundleName );\r\n\t\t\tif( bundleNameJele != null && !bundleNameJele.isJsonNull() ) {\r\n\t\t\t\tJsonElement totalActiveBalanceJele = bundleNameJele.getAsJsonObject().get( \"totalActiveBalance\" );\r\n\t\t\t\tJsonElement bundleQuantityJele = bundleNameJele.getAsJsonObject().get( \"bundleQuantity\" );\r\n\t\t\t\tif( totalActiveBalanceJele != null && !totalActiveBalanceJele.isJsonNull() && bundleQuantityJele != null && !bundleQuantityJele.isJsonNull() ) {\r\n\t\t\t\t\treturn ( bundleQuantityJele.getAsDouble() - totalActiveBalanceJele.getAsDouble() );\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0.0;"
Preprocessed Expression : JsonElement bundleInfoJele = BUNDLE_INFO_LifeTime;
		if( bundleInfoJele != null && !bundleInfoJele.isJsonNull() ) {
			JsonElement bundleNameJele = bundleInfoJele.getAsJsonObject().get( bundleName );
			if( bundleNameJele != null && !bundleNameJele.isJsonNull() ) {
				JsonElement totalActiveBalanceJele = bundleNameJele.getAsJsonObject().get( "totalActiveBalance" );
				JsonElement bundleQuantityJele = bundleNameJele.getAsJsonObject().get( "bundleQuantity" );
				if( totalActiveBalanceJele != null && !totalActiveBalanceJele.isJsonNull() && bundleQuantityJele != null && !bundleQuantityJele.isJsonNull() ) {
					return ( bundleQuantityJele.getAsDouble() - totalActiveBalanceJele.getAsDouble() );

				}
			}
		}
		return 0.0;
line 1:0 no viable alternative at input 'JsonElement'
------------Infered params BUNDLE_INFO_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getNextAutoRechargeDate" -- > "if(AUTO_RECHARGE_LifeTime!=null && !AUTO_RECHARGE_LifeTime.isJsonNull()){\r\nif(AUTO_RECHARGE_LifeTime.has(\"ExpiryBased\")){\r\nJsonObject ExpiryBased=AUTO_RECHARGE_LifeTime.get(\"ExpiryBased\").getAsJsonObject();\r\nif(ExpiryBased.has(\"nextRechargeCycle\")) \r\nreturn(ExpiryBased.get(\"nextRechargeCycle\").getAsLong());\r\n}}return -99l;"
Preprocessed Expression : if(AUTO_RECHARGE_LifeTime!=null && !AUTO_RECHARGE_LifeTime.isJsonNull()){
if(AUTO_RECHARGE_LifeTime.has("ExpiryBased")){
JsonObject ExpiryBased=AUTO_RECHARGE_LifeTime.get("ExpiryBased").getAsJsonObject();
if(ExpiryBased.has("nextRechargeCycle")) 
return(ExpiryBased.get("nextRechargeCycle").getAsLong());
}}return -99l;
line 1:0 no viable alternative at input 'if'
------------Infered params AUTO_RECHARGE_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "hasProgramContactExceeded" -- > "return false;"
Preprocessed Expression : return false;
line 1:0 no viable alternative at input 'return'
Compiling Function : "containsExt" -- > "if( data == null || data.equals( \"\" ) || pattern == null || pattern.equals( \"\" ) )\r\n\t\t\treturn false;\r\n\r\n\t\treturn data.contains( pattern );"
Preprocessed Expression : if( data == null || data.equals( "" ) || pattern == null || pattern.equals( "" ) )
			return false;

		return data.contains( pattern );
line 1:0 no viable alternative at input 'if'
Compiling Function : "getSMSUsageInfo" -- > "String totalSMSCount = \"\";\r\nString totalSMSSpend = \"\";\r\nString localSMSCount = \"\";\r\nString localSMSSpend = \"\";\r\nString iddSMSCount = \"\";\r\nString iddSMSSpend = \"\";\r\nString latestSMSUsageDate = \"NULL\";\r\njava.text.SimpleDateFormat d = new java.text.SimpleDateFormat(\"yyyyMMddHHmmss\");\r\nif(SMS_USAGE_SERIES_LifeTime!=null && !SMS_USAGE_SERIES_LifeTime.isJsonNull() && SMS_USAGE_SERIES_LifeTime.entrySet().size()!=0) {\r\nJsonArray ekeys = SMS_USAGE_SERIES_LifeTime.get(\"keys\").getAsJsonArray();\r\nif(ekeys.size()!=0){\r\nlong latestDate = ekeys.get(ekeys.size()-1).getAsLong();\r\njava.util.Date dte= new java.util.Date(latestDate);\r\nlatestSMSUsageDate = d.format(dte);\r\nJsonArray smsUsageInfo = SMS_USAGE_SERIES_LifeTime.get(String.valueOf(latestDate)).getAsJsonArray();\r\ntotalSMSCount = smsUsageInfo.get(0).getAsString();\r\ntotalSMSSpend = smsUsageInfo.get(1).getAsString();\r\nlocalSMSCount = smsUsageInfo.get(2).getAsString();\r\nlocalSMSSpend = smsUsageInfo.get(3).getAsString();\r\niddSMSCount = smsUsageInfo.get(4).getAsString();\r\niddSMSSpend = smsUsageInfo.get(5).getAsString();\r\n}\r\n}\r\nreturn totalSMSCount + \"~\" + totalSMSSpend + \"~\" + localSMSCount + \"~\" + localSMSSpend + \"~\" + iddSMSCount + \"~\" + iddSMSSpend + \"~\" + latestSMSUsageDate;"
Preprocessed Expression : String totalSMSCount = "";
String totalSMSSpend = "";
String localSMSCount = "";
String localSMSSpend = "";
String iddSMSCount = "";
String iddSMSSpend = "";
String latestSMSUsageDate = "NULL";
java.text.SimpleDateFormat d = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
if(SMS_USAGE_SERIES_LifeTime!=null && !SMS_USAGE_SERIES_LifeTime.isJsonNull() && SMS_USAGE_SERIES_LifeTime.entrySet().size()!=0) {
JsonArray ekeys = SMS_USAGE_SERIES_LifeTime.get("keys").getAsJsonArray();
if(ekeys.size()!=0){
long latestDate = ekeys.get(ekeys.size()-1).getAsLong();
java.util.Date dte= new java.util.Date(latestDate);
latestSMSUsageDate = d.format(dte);
JsonArray smsUsageInfo = SMS_USAGE_SERIES_LifeTime.get(String.valueOf(latestDate)).getAsJsonArray();
totalSMSCount = smsUsageInfo.get(0).getAsString();
totalSMSSpend = smsUsageInfo.get(1).getAsString();
localSMSCount = smsUsageInfo.get(2).getAsString();
localSMSSpend = smsUsageInfo.get(3).getAsString();
iddSMSCount = smsUsageInfo.get(4).getAsString();
iddSMSSpend = smsUsageInfo.get(5).getAsString();
}
}
return totalSMSCount + "~" + totalSMSSpend + "~" + localSMSCount + "~" + localSMSSpend + "~" + iddSMSCount + "~" + iddSMSSpend + "~" + latestSMSUsageDate;
line 1:0 no viable alternative at input 'String'
------------Infered params SMS_USAGE_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "manageSubscriberLifeCycle" -- > "if ((\"MER\".equals(RECORD_TYPE) && \"5004\".equals(EVENT_TYPE)) || (\"LDR\".equals(RECORD_TYPE) && \"4004\".equals(EVENT_TYPE)) || (\"HMER\".equals(RECORD_TYPE) && \"5004\".equals(EVENT_TYPE)) ||(\"HLDR\".equals(RECORD_TYPE) && \"4004\".equals(EVENT_TYPE))) {\r\n    JsonObject subscriberDocument = getSubscriberDocument(MSISDN + \"-Indicators\");\r\n    if (subscriberDocument != null) {\r\n        setDocumentInPersist(MSISDN + \"-Indicators-D\", 3, subscriberDocument.toString());\r\n        deleteSubscriber(MSISDN);\r\n    }\r\n    return 0;\r\n}\r\n\r\n//These are usages/rechard activities done by the user. These can occur in any order after activation and before deactivation. These record types can create a proile if it does not already exisit, else simply update relavent indicators in profile\r\n//Check if the profile is marked for deletion, if so then do not process the record.\r\nelse if (\",DATA,VOICE,SMS,CONTENT,MMS,LDR,BTR,BATCH_TRIGGER,\".contains(\",\"+RECORD_TYPE+\",\")) {\r\n    JsonObject subscriberDocument = getSubscriberDocument(MSISDN + \"-Indicators\");\r\n    if (subscriberDocument == null) {\r\n        JsonObject subscriberDocumentDelete = getSubscriberDocument(MSISDN + \"-Indicators-D\");\r\n        if (subscriberDocumentDelete != null) {\r\n           // System.out.println(\"LCS : \" + RECORD_TIMESTAMP + \" : \" + RECORD_TYPE + \" : \" + EVENT_TYPE + \" : \" + MSISDN + \" : 101\");\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n \r\n//Creation of profile in SIFT. These record types can recreate a profile in SIFT if the profile is more than 3 days old. If the profile is created with in last 3 days, it will simply update the profile\r\nelse if (\"MER\".equals(RECORD_TYPE) || \"HMER\".equals(RECORD_TYPE) ){\r\n    if (\"5002\".equals(EVENT_TYPE) || \"5003\".equals(EVENT_TYPE) ||\"5001\".equals(EVENT_TYPE) ) {\r\n        int numberOfDays = 3;\r\n        long numberOfDaysInMilliSecs = numberOfDays * 86400000L;\r\n        JsonObject subscriberDocument = getSubscriberDocument(MSISDN + \"-Indicators\");\r\n      \r\n        if (subscriberDocument != null) {\r\n            JsonElement docLifeCycleJele = subscriberDocument.get(\"DOCUMENT_LIFECYCLE_LifeTime-L\");\r\n            if (docLifeCycleJele != null && !docLifeCycleJele.isJsonNull()) {\r\n                JsonElement firstRecordJele = docLifeCycleJele.getAsJsonObject().get(\"FIRSTRECORD\");\r\n                if (firstRecordJele != null) {\r\n                    String firstRecordJeleString = firstRecordJele.getAsString();\r\n                    String timeStamp = firstRecordJeleString.substring(firstRecordJeleString.lastIndexOf('-') + 1);\r\n                    long profileCreationTimeStamp = Long.parseLong(timeStamp);\r\n                    long duration = RECORD_TIMESTAMP - profileCreationTimeStamp;\r\n                    if (duration > numberOfDaysInMilliSecs) {\r\n                        //System.out.println(\"LCS : \" + RECORD_TIMESTAMP + \" : \" + RECORD_TYPE + \" : \" + EVENT_TYPE + \" : \" + MSISDN + \" : 102\");\r\n                        resetIndicators(MSISDN);\r\n                    }\r\n                } else {\r\n                    //System.out.println(\"LCS : \" + RECORD_TIMESTAMP + \" : \" + RECORD_TYPE + \" : \" + EVENT_TYPE + \" : \" + MSISDN + \" : 102\");\r\n                    resetIndicators(MSISDN);\r\n                }\r\n            } else {\r\n               // System.out.println(\"LCS : \" + RECORD_TIMESTAMP + \" : \" + RECORD_TYPE + \" : \" + EVENT_TYPE + \" : \" + MSISDN + \" : 102\");\r\n                resetIndicators(MSISDN);\r\n            }\r\n        } else {\r\n            JsonObject subscriberDocument_D = getSubscriberDocument(MSISDN + \"-Indicators-D\");\r\n\t\t\t\r\n            if (subscriberDocument_D == null) {\r\n                resetIndicators(MSISDN);\r\n            } else {\r\n                JsonElement newMSISDNJele = subscriberDocument_D.get(\"newMSISDN\");\r\n\t\t\t\t\r\n                if (newMSISDNJele != null && !newMSISDNJele.isJsonNull()) {\r\n                    String newMsisdn = newMSISDNJele.getAsString();\r\n                 // System.out.println(\"LCS : \" + RECORD_TIMESTAMP + \" : \" + RECORD_TYPE + \" : \" + EVENT_TYPE + \" : \" + MSISDN + \" : 103\");\r\n\t\t\t\t\t\r\n                    setNewNumber(newMsisdn);\r\n                } else {\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n                  // System.out.println(\"LCS : \" + RECORD_TIMESTAMP + \" : \" + RECORD_TYPE + \" : \" + EVENT_TYPE + \" : \" + MSISDN + \" : 104\");\r\n                    resetIndicators(MSISDN);\r\n                }\r\n            }\r\n        }\r\n    } \r\n}\t\r\nif (\"5007\".equals(EVENT_TYPE) ){\r\n\t\tString newCAC = CAC_ID;\r\n        JsonObject oldSubscriberDocument = getSubscriberDocument(MSISDN + \"-Indicators\");\r\n        String oldSubscriberEventTagList = getSubscriberEventTagList(MSISDN);\r\n        if (oldSubscriberDocument == null) {\r\n            oldSubscriberDocument = new JsonObject();\r\n            oldSubscriberDocument.addProperty(\"docType\", \"subscriberIndicators\");\r\n            oldSubscriberDocument.addProperty(\"newMSISDN\", NEW_MSISDN);\r\n            setDocumentInPersist(MSISDN + \"-Indicators-D\", 3, oldSubscriberDocument.toString());\r\n            return 0;\r\n        } else {     \r\n\t\t    JsonObject newSubscriberDocument = getSubscriberDocument(NEW_MSISDN + \"-Indicators\");\r\n\t\t\tif(newSubscriberDocument ==null)\r\n\t\t\t{\r\n              setDocumentInPersist(NEW_MSISDN + \"-Indicators\", 0, oldSubscriberDocument.toString());\r\n\t\t\t  if(!\"\".equals(oldSubscriberEventTagList))\r\n              setDocumentInPersist(\"EventTagList-\" + NEW_MSISDN, 0, oldSubscriberEventTagList);\r\n              oldSubscriberDocument.addProperty(\"newMSISDN\", NEW_MSISDN);\r\n\t\t\t  JsonObject subscriberDocument = getSubscriberDocument(NEW_MSISDN + \"-Indicators\");\r\n\t\t\t   if (subscriberDocument != null) {\r\n\t\t\t\tJsonElement cacJele = subscriberDocument.get(\"CAC_ID_LifeTime-L\");\r\n\t\t\t\tif (cacJele != null) {\r\n\t\t\t\t\tJsonObject cacObj = cacJele.getAsJsonObject();\r\n\t\t\t\t\t if (cacObj != null) {\r\n\t\t\t\t\t\tJsonElement currentJele = cacObj.get(\"current\");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (currentJele != null && !currentJele.isJsonNull()) {\r\n\t\t\t\t\t\t\tif (!currentJele.getAsString().equals(newCAC) ) {\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t JsonElement prevJele = cacObj.get(\"prev\");\r\n\t\t\t\t\t\t\t\t if(prevJele !=null && !prevJele.isJsonNull()){\r\n\t\t\t\t\t\t\t\t\t  if(prevJele.getAsString().equals(newCAC)){\r\n\t\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t\t\t  return 0;\r\n\t\t\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t\t\t }\t\t \r\n\t\t\t\t\t\t\t\tif(!RECORD_TYPE.equals(\"BATCH_TRIGGER\")) {\r\n\t\t\t\t\t\t\t\t\tresetIndicators(NEW_MSISDN);\r\n\t\t\t\t\t\t\t\t\tJsonObject newerSubscriberDocument = getSubscriberDocument(NEW_MSISDN + \"-Indicators\");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tJsonObject cacJobj = new JsonObject();\r\n\t\t\t\t\t\t\t\t\tcacJobj.addProperty(\"current\",newCAC);\r\n\t\t\t\t\t\t\t\t\tcacJobj.addProperty(\"prev\",currentJele.getAsString());\r\n\t\t\t\t\t\t\t\t\tnewerSubscriberDocument.add(\"CAC_ID_LifeTime\",cacJobj);     \r\n\t\t\t\t\t\t\t\t\tsetDocumentInPersist(NEW_MSISDN + \"-Indicators\",0, newerSubscriberDocument.toString());\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n              setDocumentInPersist(MSISDN + \"-Indicators-D\", 3, oldSubscriberDocument.toString());\r\n              deleteSubscriber(MSISDN);\r\n              return 0;\r\n            }\r\n\t\t\telse{\r\n\t\t\t\t// this case of MER event type 5007 logging for beyond time boundry, both new and old NEW_MSISDN exsist be handled by correcting data\r\n\t\t\t    //System.out.println(\"Both new and old NEW_MSISDN exist, Record_Type: \"+RECORD_TYPE+\" Event Type: \"+EVENT_TYPE+\" MSISDN: \"+MSISDN+\"New NEW_MSISDN: \"+NEW_MSISDN);\r\n\t\t\t\t// System.out.println(\"LCS : \" + RECORD_TIMESTAMP + \" : \" + RECORD_TYPE + \" : \" + EVENT_TYPE + \" : \" + NEW_MSISDN + \" : 106\");\r\n\t\t}\r\n    }\r\n}\r\n\r\n//Creation of profile in SIFT. These record type will create a profile if it does not already exist, else it will simply update relavent triggers\r\nelse if (\",BARSUB,CREDIT,HBAR,\".contains(\",\"+RECORD_TYPE+\",\") && \"3402\".equals(EVENT_TYPE)) {\r\n\t\r\n    JsonObject subscriberDocument = getSubscriberDocument(MSISDN + \"-Indicators\");\r\n\t\r\n    if (subscriberDocument == null) {\r\n        JsonObject subscriberDocument_D = getSubscriberDocument(MSISDN + \"-Indicators-D\");\r\n        if (subscriberDocument_D != null) {\r\n            JsonElement newMSISDNJele = subscriberDocument_D.get(\"newMSISDN\");\r\n            if (newMSISDNJele != null && !newMSISDNJele.isJsonNull()) {\r\n                String newMsisdn = newMSISDNJele.getAsString();\r\n                setNewNumber(newMsisdn);\r\n            }\r\n        }\r\n    }\r\n}\r\n \r\n//Cannot create a new profile in SIFT. It can only update a pre-exisiting profile\r\nif (\",BATCH_TRIGGER,MOB_ACTIVITY,BAL,MODEL_SCORE,SFMC_PROFILE_FEED,ETL_TRIGGER,DISASTER_BONUS,ADHOC,SFDC,\".contains(\",\"+RECORD_TYPE+\",\")) {\r\n    JsonObject subscriberDocument = getSubscriberDocument(MSISDN + \"-Indicators\");  \r\n    if (subscriberDocument == null) {\r\n        //System.out.println(\"LCS : \" + RECORD_TIMESTAMP + \" : \" + RECORD_TYPE + \" : \" + EVENT_TYPE + \" : \" + MSISDN + \" : 108\");\r\n        return 0;\r\n    }\r\n}\r\n\r\n//If for a given MSISDN, the incoming BAID value is valid but different than the current BAID in SIFT than the profile must be recycled in SIFT. If the BAID value is -99 then this rule will not apply and the profile should be normally updated.\r\nif (\",MER,BARSUB,CREDIT,DATA,VOICE,SMS,CONTENT,MMS,LDR,BATCH_TRIGGER,\".contains(\",\"+RECORD_TYPE+\",\") && !BA_ID.equals(\"-99\") && !SOURCE_SYSTEM_ID.equals(\"H\") && !(RECORD_TYPE.equals(\"MER\") && EVENT_TYPE.equals(\"5006\"))) {\r\n    JsonObject subscriberDocument = getSubscriberDocument(MSISDN + \"-Indicators\");\r\n    if (subscriberDocument != null) {\r\n        JsonElement baidJele = subscriberDocument.get(\"BAID_LifeTime-L\");\r\n        if (baidJele != null) {\r\n            JsonObject baidObj = baidJele.getAsJsonObject();\r\n             if (baidObj != null) {\r\n                JsonElement currentJele = baidObj.get(\"current\");\r\n                if (currentJele != null && !currentJele.isJsonNull()) {\r\n                    if (!currentJele.getAsString().equals(BA_ID) ) {\r\n\t\t\t\t\t\t JsonElement prevJele = baidObj.get(\"prev\");\r\n\t\t\t\t\t\t if(prevJele !=null && !prevJele.isJsonNull()){\r\n\t\t\t\t\t\t      if(prevJele.getAsString().equals(BA_ID)){\r\n\t\t\t\t\t\t\t\t  return 0;\r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t }\t\t \r\n                        if(!RECORD_TYPE.equals(\"BATCH_TRIGGER\")){\r\n                            resetIndicators(MSISDN);\r\n\t\t\t\t\t\t\tJsonObject newSubscriberDocument = getSubscriberDocument(MSISDN + \"-Indicators\");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tJsonObject baidJobj = new JsonObject();\r\n\t\t\t\t\t\t\tbaidJobj.addProperty(\"current\",BA_ID);\r\n\t\t\t\t\t\t\tbaidJobj.addProperty(\"prev\",currentJele.getAsString());\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tnewSubscriberDocument.add(\"BAID_LifeTime-L\",baidJobj);     \r\n\t                        setDocumentInPersist(MSISDN + \"-Indicators\",0, newSubscriberDocument.toString());\r\n\t\t\t\t\t\t\t\r\n                        } else {\r\n\t\t\t\t\t\t\r\n                            return 0;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nif (\",HMER,HBAR,DATA,VOICE,SMS,VIDEO,MMS,HLDR,SFDC_ACCOUNT,\".contains(\",\"+RECORD_TYPE+\",\") && (!CAC_ID.equals(\"-99\")|| !CAC_ID.equals(\"\")) && !(RECORD_TYPE.equals(\"HMER\") && EVENT_TYPE.equals(\"5007\"))) {\r\n    JsonObject subscriberDocument = getSubscriberDocument(MSISDN + \"-Indicators\");\r\n    if (subscriberDocument != null) {\r\n        JsonElement cacJele = subscriberDocument.get(\"CAC_ID_LifeTime-L\");\r\n        if (cacJele != null) {\r\n            JsonObject cacObj = cacJele.getAsJsonObject();\r\n             if (cacObj != null) {\r\n                JsonElement currentJele = cacObj.get(\"current\");\r\n                if (currentJele != null && !currentJele.isJsonNull()) {\r\n                    if (!currentJele.getAsString().equals(CAC_ID) ) {\r\n                         \t\t\t//System.out.println(\"CAC id different\");\r\n                        //System.out.println(\"LCS : \" + RECORD_TIMESTAMP + \" : \" + RECORD_TYPE + \" : \" + EVENT_TYPE + \" : \" + MSISDN + \" : 109\");\r\n\t\t\t\t\t\t JsonElement prevJele = cacObj.get(\"prev\");\r\n\t\t\t\t\t\t if(prevJele !=null && !prevJele.isJsonNull()){\r\n\t\t\t\t\t\t      if(prevJele.getAsString().equals(CAC_ID)){\r\n\t\t\t\t\t\t\t\t  return 0;\r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t }\t\t \r\n                        if(!RECORD_TYPE.equals(\"BATCH_TRIGGER\")){\r\n\t\t\t\t\t\t\tJsonObject subscriberDocumentN = getSubscriberDocument(MSISDN + \"-Indicators\");\r\n\t\t\t\t\t\t\tsetDocumentInPersist(MSISDN + \"-Indicators-D\", 3, subscriberDocumentN.toString());\r\n                            resetIndicators(MSISDN);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tJsonObject newSubscriberDocument = getSubscriberDocument(MSISDN + \"-Indicators\");\r\n\t\t\t\t\t\t\tJsonObject cacJobj = new JsonObject();\r\n\t\t\t\t\t\t\tcacJobj.addProperty(\"current\",CAC_ID);\r\n\t\t\t\t\t\t\tcacJobj.addProperty(\"prev\",currentJele.getAsString());\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tnewSubscriberDocument.add(\"CAC_ID_LifeTime-L\",cacJobj);   \r\n\t                        setDocumentInPersist(MSISDN + \"-Indicators\",0, newSubscriberDocument.toString());\r\n\t\t\t\t\t\t\t\r\n                        } else {\r\n                          return 0;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nif (\",HMER,HBAR,\".contains(\",\"+RECORD_TYPE+\",\") && !CAC_ID.equals(\"-99\")&& ((RECORD_TYPE.equals(\"HMER\") && EVENT_TYPE.equals(\"5900\"))||(RECORD_TYPE.equals(\"HBAR\") && EVENT_TYPE.equals(\"3900\")))){\r\n\tString newCAC = CAC_ID;\r\n    JsonObject subscriberDocument = getSubscriberDocument(MSISDN + \"-Indicators\");\r\n    String oldSubscriberEventTagList = getSubscriberEventTagList(MSISDN);\r\n\t\tLong reversalTimestamp =0l;\r\n\t  if (subscriberDocument != null) {\r\n\t\t\tJsonElement migrationele = subscriberDocument.get(\"HENDRIX_MIGRATION_LifeTime-L\");\r\n\t\t\t\tif(migrationele !=null){\r\n\t\t\t\t\tJsonArray migrationarr= migrationele.getAsJsonArray();\r\n\t\t\t\t\tboolean found = false;\r\n\t\t\t\t\tfor (int i = 0; i < migrationarr.size(); i++) {\r\n\t\t\t\t\t\tif (migrationarr.get(i).getAsString().equals(\"S\")){\r\n\t\t\t\t\t\t\tfound =true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (migrationarr.get(i).getAsString().equals(\"F\"))\r\n\t\t\t\t\t\t\treversalTimestamp =migrationarr.get(i+1).getAsLong();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!found && (RECORD_TIMESTAMP > reversalTimestamp) ){\r\n\t\t\t\t\t\t\tif(!\"\".equals(oldSubscriberEventTagList))\r\n\t\t\t\t\t\t\t\tsetDocumentInPersist(\"EventTagList-\" + MSISDN+\"-D\", 3, oldSubscriberEventTagList);\r\n\t\t\t\t\t\t\tJsonElement cacJele = subscriberDocument.get(\"CAC_ID_LifeTime-L\");\r\n\t\t\t\t\t\t\tif (cacJele != null) {\r\n\t\t\t\t\t\t\t\tJsonObject cacObj = cacJele.getAsJsonObject();\r\n\t\t\t\t\t\t\t\tif (cacObj != null) {\r\n\t\t\t\t\t\t\t\t\tJsonElement currentJele = cacObj.get(\"current\");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (currentJele != null && !currentJele.isJsonNull()) {\r\n\t\t\t\t\t\t\t\t\tif (!currentJele.getAsString().equals(newCAC) ) {\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tJsonElement prevJele = cacObj.get(\"prev\");\r\n\t\t\t\t\t\t\t\t\tif(prevJele !=null && !prevJele.isJsonNull()){\r\n\t\t\t\t\t\t\t\t\t\tif(prevJele.getAsString().equals(newCAC)){\r\n\t\t\t\t\t\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\t\t \r\n\t\t\t\t\t\t\t\tif(!RECORD_TYPE.equals(\"BATCH_TRIGGER\")) {\r\n\t\t\t\t\t\t\t\tsetDocumentInPersist(MSISDN + \"-Indicators-D\", 3, subscriberDocument.toString());\r\n\t\t\t\t\t\t\t\tresetIndicators(MSISDN);\r\n\t\t\t\t\t\t\t\tprocessIndicator(\"*\");\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treturn 2;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}else {\r\n\t\t\t\treturn 2;}\r\n    \t}\r\n\t}\r\n}\r\nif (\",HMER,HBAR,\".contains(\",\"+RECORD_TYPE+\",\") && !CAC_ID.equals(\"-99\")&& ((RECORD_TYPE.equals(\"HMER\") && EVENT_TYPE.equals(\"5901\"))||(RECORD_TYPE.equals(\"HBAR\") && EVENT_TYPE.equals(\"3901\"))) ){\r\n\tString newCAC = CAC_ID;\r\n    JsonObject subscriberDocument = getSubscriberDocument(MSISDN + \"-Indicators\");\r\n\t  if (subscriberDocument != null) {\r\n\t\t\tJsonElement migrationele = subscriberDocument.get(\"HENDRIX_MIGRATION_LifeTime-L\");\r\n\t\t\t\tif(migrationele !=null){\r\n\t\t\t\t\tJsonArray migrationarr= migrationele.getAsJsonArray();\r\n\t\t\t\t\tboolean found = false;\r\n\t\t\t\t\tLong successTimestamp =0l;\r\n\t\t\t\t\tfor (int i = 0; i < migrationarr.size(); i++) {\r\n\t\t\t\t\t\tif (migrationarr.get(i).getAsString().equals(\"F\")){\r\n\t\t\t\t\t\t\tfound =true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (migrationarr.get(i).getAsString().equals(\"S\"))\r\n\t\t\t\t\t\t\tsuccessTimestamp =migrationarr.get(i+1).getAsLong();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!found){\r\n\t\t\t\t\t\t\tif(RECORD_TIMESTAMP > successTimestamp) {\r\n\t\t\t\t\t\t\t\tJsonObject oldSubscriberEventTagList = getSubscriberDocument(\"EventTagList-\" + MSISDN+\"-D\");\r\n\t\t\t\t\t\t\t\tif(oldSubscriberEventTagList != null)\r\n\t\t\t\t\t\t\t\t\tsetDocumentInPersist(\"EventTagList-\" + MSISDN, 0, oldSubscriberEventTagList.toString());\r\n\t\t\t\t\t\t\t\t\t//JsonArray newarr = new JsonArray();\r\n\t\t\t\t\t\t\t\t\tprocessIndicator(\"*\");\r\n\t\t\t\t\t\t\t\t\t//processIndicators(CAC_ID_LifeTime);\r\n\t\t\t\t\t\t\t\t\t//processIndicators(HENDRIX_MIGRATION_LifeTime);\r\n\t\t\t\t\t\t\t\t}else {\r\n\t\t\t\t\t\t\t\t\treturn 2;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else {\r\n\t\t\t\t\treturn 2;\r\n\t\t\t\t\t}\r\n\t}\r\n}\r\nif(\",MER,BARSUB,CREDIT,DATA,VOICE,SMS,CONTENT,MMS,LDR,\".contains(\",\"+RECORD_TYPE+\",\") && !BA_ID.equals(\"-99\") && !SOURCE_SYSTEM_ID.equals(\"H\")) {\r\n\tJsonObject subscriberDocument = getSubscriberDocument(MSISDN + \"-Indicators\");\r\n\tif (subscriberDocument != null) {\r\n\tJsonElement sourceSystem = subscriberDocument.get(\"SOURCE_SYSTEM_ID_LifeTime-L\");\r\n\tif(sourceSystem!=null){\r\n\t\t\tif(sourceSystem.getAsString().equals(\"H\")){\r\n\t\t\t\treturn 0;\r\n\t\t\t\t} else return 2;\r\n\t}\r\n \t}\r\n}\r\n\r\nif(\",HMER,HBAR,DATA,VOICE,SMS,CONTENT,VIDEO,MMS,HLDR,\".contains(\",\"+RECORD_TYPE+\",\")&&!CAC_ID.equals(\"-99\") && !((RECORD_TYPE.equals(\"HMER\") && EVENT_TYPE.equals(\"5900\"))||(RECORD_TYPE.equals(\"HBAR\") && EVENT_TYPE.equals(\"3900\")))){\r\n\tJsonObject subscriberDocument = getSubscriberDocument(MSISDN + \"-Indicators\");\r\n\tJsonObject subscriberDocumentDelete = getSubscriberDocument(MSISDN + \"-Indicators-D\");\r\n\tif (subscriberDocumentDelete != null && subscriberDocument == null&& EVENT_TYPE.equals(\"5020\")) {\r\n\t    //System.out.println(\"5020\");\r\n\t    return 0;\r\n\t}\r\n\t  if (subscriberDocument != null) {\r\n\t\t\tJsonElement sourceSystem = subscriberDocument.get(\"SOURCE_SYSTEM_ID_LifeTime-L\");\r\n\t\t\tif(sourceSystem!=null){\r\n\t\t\t\tif(sourceSystem.getAsString().equals(\"H\")){\r\n\t\t\t\tprocessIndicator(\"*\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t}\r\n}\r\nreturn 2;"
Preprocessed Expression : if (("MER".equals(RECORD_TYPE) && "5004".equals(EVENT_TYPE)) || ("LDR".equals(RECORD_TYPE) && "4004".equals(EVENT_TYPE)) || ("HMER".equals(RECORD_TYPE) && "5004".equals(EVENT_TYPE)) ||("HLDR".equals(RECORD_TYPE) && "4004".equals(EVENT_TYPE))) {
    JsonObject subscriberDocument =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators");
    if (subscriberDocument != null) {
         SIFTMATH.setDocumentInPersist(MSISDN + "-Indicators-D", 3, subscriberDocument.toString());
         SIFTMATH.deleteSubscriber(MSISDN);
    }
    return 0;
}

//These are usages/rechard activities done by the user. These can occur in any order after activation and before deactivation. These record types can create a proile if it does not already exisit, else simply update relavent indicators in profile
//Check if the profile is marked for deletion, if so then do not process the record.
else if (",DATA,VOICE,SMS,CONTENT,MMS,LDR,BTR,BATCH_TRIGGER,".contains(","+RECORD_TYPE+",")) {
    JsonObject subscriberDocument =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators");
    if (subscriberDocument == null) {
        JsonObject subscriberDocumentDelete =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators-D");
        if (subscriberDocumentDelete != null) {
           // System.out.println("LCS : " + RECORD_TIMESTAMP + " : " + RECORD_TYPE + " : " + EVENT_TYPE + " : " + MSISDN + " : 101");
            return 0;
        }
    }
}
 
//Creation of profile in SIFT. These record types can recreate a profile in SIFT if the profile is more than 3 days old. If the profile is created with in last 3 days, it will simply update the profile
else if ("MER".equals(RECORD_TYPE) || "HMER".equals(RECORD_TYPE) ){
    if ("5002".equals(EVENT_TYPE) || "5003".equals(EVENT_TYPE) ||"5001".equals(EVENT_TYPE) ) {
        int numberOfDays = 3;
        long numberOfDaysInMilliSecs = numberOfDays * 86400000L;
        JsonObject subscriberDocument =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators");
      
        if (subscriberDocument != null) {
            JsonElement docLifeCycleJele = subscriberDocument.get("DOCUMENT_LIFECYCLE_LifeTime-L");
            if (docLifeCycleJele != null && !docLifeCycleJele.isJsonNull()) {
                JsonElement firstRecordJele = docLifeCycleJele.getAsJsonObject().get("FIRSTRECORD");
                if (firstRecordJele != null) {
                    String firstRecordJeleString = firstRecordJele.getAsString();
                    String timeStamp = firstRecordJeleString.substring(firstRecordJeleString.lastIndexOf('-') + 1);
                    long profileCreationTimeStamp = Long.parseLong(timeStamp);
                    long duration = RECORD_TIMESTAMP - profileCreationTimeStamp;
                    if (duration > numberOfDaysInMilliSecs) {
                        //System.out.println("LCS : " + RECORD_TIMESTAMP + " : " + RECORD_TYPE + " : " + EVENT_TYPE + " : " + MSISDN + " : 102");
                         SIFTMATH.resetIndicators(MSISDN);
                    }
                } else {
                    //System.out.println("LCS : " + RECORD_TIMESTAMP + " : " + RECORD_TYPE + " : " + EVENT_TYPE + " : " + MSISDN + " : 102");
                     SIFTMATH.resetIndicators(MSISDN);
                }
            } else {
               // System.out.println("LCS : " + RECORD_TIMESTAMP + " : " + RECORD_TYPE + " : " + EVENT_TYPE + " : " + MSISDN + " : 102");
                 SIFTMATH.resetIndicators(MSISDN);
            }
        } else {
            JsonObject subscriberDocument_D =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators-D");
			
            if (subscriberDocument_D == null) {
                 SIFTMATH.resetIndicators(MSISDN);
            } else {
                JsonElement newMSISDNJele = subscriberDocument_D.get("newMSISDN");
				
                if (newMSISDNJele != null && !newMSISDNJele.isJsonNull()) {
                    String newMsisdn = newMSISDNJele.getAsString();
                 // System.out.println("LCS : " + RECORD_TIMESTAMP + " : " + RECORD_TYPE + " : " + EVENT_TYPE + " : " + MSISDN + " : 103");
					
                     SIFTMATH.setNewNumber(newMsisdn);
                } else {
					
					
                  // System.out.println("LCS : " + RECORD_TIMESTAMP + " : " + RECORD_TYPE + " : " + EVENT_TYPE + " : " + MSISDN + " : 104");
                     SIFTMATH.resetIndicators(MSISDN);
                }
            }
        }
    } 
}	
if ("5007".equals(EVENT_TYPE) ){
		String newCAC = CAC_ID;
        JsonObject oldSubscriberDocument =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators");
        String oldSubscriberEventTagList =  SIFTMATH.getSubscriberEventTagList(MSISDN);
        if (oldSubscriberDocument == null) {
            oldSubscriberDocument = new JsonObject();
            oldSubscriberDocument.addProperty("docType", "subscriberIndicators");
            oldSubscriberDocument.addProperty("newMSISDN", NEW_MSISDN);
             SIFTMATH.setDocumentInPersist(MSISDN + "-Indicators-D", 3, oldSubscriberDocument.toString());
            return 0;
        } else {     
		    JsonObject newSubscriberDocument =  SIFTMATH.getSubscriberDocument(NEW_MSISDN + "-Indicators");
			if(newSubscriberDocument ==null)
			{
               SIFTMATH.setDocumentInPersist(NEW_MSISDN + "-Indicators", 0, oldSubscriberDocument.toString());
			  if(!"".equals(oldSubscriberEventTagList))
               SIFTMATH.setDocumentInPersist("EventTagList-" + NEW_MSISDN, 0, oldSubscriberEventTagList);
              oldSubscriberDocument.addProperty("newMSISDN", NEW_MSISDN);
			  JsonObject subscriberDocument =  SIFTMATH.getSubscriberDocument(NEW_MSISDN + "-Indicators");
			   if (subscriberDocument != null) {
				JsonElement cacJele = subscriberDocument.get("CAC_ID_LifeTime-L");
				if (cacJele != null) {
					JsonObject cacObj = cacJele.getAsJsonObject();
					 if (cacObj != null) {
						JsonElement currentJele = cacObj.get("current");
							
						if (currentJele != null && !currentJele.isJsonNull()) {
							if (!currentJele.getAsString().equals(newCAC) ) {
									
								 JsonElement prevJele = cacObj.get("prev");
								 if(prevJele !=null && !prevJele.isJsonNull()){
									  if(prevJele.getAsString().equals(newCAC)){
									 
										  return 0;
									  }
								 }		 
								if(!RECORD_TYPE.equals("BATCH_TRIGGER")) {
									 SIFTMATH.resetIndicators(NEW_MSISDN);
									JsonObject newerSubscriberDocument =  SIFTMATH.getSubscriberDocument(NEW_MSISDN + "-Indicators");
								
									JsonObject cacJobj = new JsonObject();
									cacJobj.addProperty("current",newCAC);
									cacJobj.addProperty("prev",currentJele.getAsString());
									newerSubscriberDocument.add("CAC_ID_LifeTime",cacJobj);     
									 SIFTMATH.setDocumentInPersist(NEW_MSISDN + "-Indicators",0, newerSubscriberDocument.toString());
									
								} else {
									return 0;
								}
							}
						}
					}
				}
			}
               SIFTMATH.setDocumentInPersist(MSISDN + "-Indicators-D", 3, oldSubscriberDocument.toString());
               SIFTMATH.deleteSubscriber(MSISDN);
              return 0;
            }
			else{
				// this case of MER event type 5007 logging for beyond time boundry, both new and old NEW_MSISDN exsist be handled by correcting data
			    //System.out.println("Both new and old NEW_MSISDN exist, Record_Type: "+RECORD_TYPE+" Event Type: "+EVENT_TYPE+" MSISDN: "+MSISDN+"New NEW_MSISDN: "+NEW_MSISDN);
				// System.out.println("LCS : " + RECORD_TIMESTAMP + " : " + RECORD_TYPE + " : " + EVENT_TYPE + " : " + NEW_MSISDN + " : 106");
		}
    }
}

//Creation of profile in SIFT. These record type will create a profile if it does not already exist, else it will simply update relavent triggers
else if (",BARSUB,CREDIT,HBAR,".contains(","+RECORD_TYPE+",") && "3402".equals(EVENT_TYPE)) {
	
    JsonObject subscriberDocument =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators");
	
    if (subscriberDocument == null) {
        JsonObject subscriberDocument_D =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators-D");
        if (subscriberDocument_D != null) {
            JsonElement newMSISDNJele = subscriberDocument_D.get("newMSISDN");
            if (newMSISDNJele != null && !newMSISDNJele.isJsonNull()) {
                String newMsisdn = newMSISDNJele.getAsString();
                 SIFTMATH.setNewNumber(newMsisdn);
            }
        }
    }
}
 
//Cannot create a new profile in SIFT. It can only update a pre-exisiting profile
if (",BATCH_TRIGGER,MOB_ACTIVITY,BAL,MODEL_SCORE,SFMC_PROFILE_FEED,ETL_TRIGGER,DISASTER_BONUS,ADHOC,SFDC,".contains(","+RECORD_TYPE+",")) {
    JsonObject subscriberDocument =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators");  
    if (subscriberDocument == null) {
        //System.out.println("LCS : " + RECORD_TIMESTAMP + " : " + RECORD_TYPE + " : " + EVENT_TYPE + " : " + MSISDN + " : 108");
        return 0;
    }
}

//If for a given MSISDN, the incoming BAID value is valid but different than the current BAID in SIFT than the profile must be recycled in SIFT. If the BAID value is -99 then this rule will not apply and the profile should be normally updated.
if (",MER,BARSUB,CREDIT,DATA,VOICE,SMS,CONTENT,MMS,LDR,BATCH_TRIGGER,".contains(","+RECORD_TYPE+",") && !BA_ID.equals("-99") && !SOURCE_SYSTEM_ID.equals("H") && !(RECORD_TYPE.equals("MER") && EVENT_TYPE.equals("5006"))) {
    JsonObject subscriberDocument =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators");
    if (subscriberDocument != null) {
        JsonElement baidJele = subscriberDocument.get("BAID_LifeTime-L");
        if (baidJele != null) {
            JsonObject baidObj = baidJele.getAsJsonObject();
             if (baidObj != null) {
                JsonElement currentJele = baidObj.get("current");
                if (currentJele != null && !currentJele.isJsonNull()) {
                    if (!currentJele.getAsString().equals(BA_ID) ) {
						 JsonElement prevJele = baidObj.get("prev");
						 if(prevJele !=null && !prevJele.isJsonNull()){
						      if(prevJele.getAsString().equals(BA_ID)){
								  return 0;
							  }
						 }		 
                        if(!RECORD_TYPE.equals("BATCH_TRIGGER")){
                             SIFTMATH.resetIndicators(MSISDN);
							JsonObject newSubscriberDocument =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators");
							
							JsonObject baidJobj = new JsonObject();
							baidJobj.addProperty("current",BA_ID);
							baidJobj.addProperty("prev",currentJele.getAsString());
							
							newSubscriberDocument.add("BAID_LifeTime-L",baidJobj);     
	                         SIFTMATH.setDocumentInPersist(MSISDN + "-Indicators",0, newSubscriberDocument.toString());
							
                        } else {
						
                            return 0;
                        }
                    }
                }
            }
        }
    }
}
if (",HMER,HBAR,DATA,VOICE,SMS,VIDEO,MMS,HLDR,SFDC_ACCOUNT,".contains(","+RECORD_TYPE+",") && (!CAC_ID.equals("-99")|| !CAC_ID.equals("")) && !(RECORD_TYPE.equals("HMER") && EVENT_TYPE.equals("5007"))) {
    JsonObject subscriberDocument =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators");
    if (subscriberDocument != null) {
        JsonElement cacJele = subscriberDocument.get("CAC_ID_LifeTime-L");
        if (cacJele != null) {
            JsonObject cacObj = cacJele.getAsJsonObject();
             if (cacObj != null) {
                JsonElement currentJele = cacObj.get("current");
                if (currentJele != null && !currentJele.isJsonNull()) {
                    if (!currentJele.getAsString().equals(CAC_ID) ) {
                         			//System.out.println("CAC id different");
                        //System.out.println("LCS : " + RECORD_TIMESTAMP + " : " + RECORD_TYPE + " : " + EVENT_TYPE + " : " + MSISDN + " : 109");
						 JsonElement prevJele = cacObj.get("prev");
						 if(prevJele !=null && !prevJele.isJsonNull()){
						      if(prevJele.getAsString().equals(CAC_ID)){
								  return 0;
							  }
						 }		 
                        if(!RECORD_TYPE.equals("BATCH_TRIGGER")){
							JsonObject subscriberDocumentN =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators");
							 SIFTMATH.setDocumentInPersist(MSISDN + "-Indicators-D", 3, subscriberDocumentN.toString());
                             SIFTMATH.resetIndicators(MSISDN);
							
							JsonObject newSubscriberDocument =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators");
							JsonObject cacJobj = new JsonObject();
							cacJobj.addProperty("current",CAC_ID);
							cacJobj.addProperty("prev",currentJele.getAsString());
							
							newSubscriberDocument.add("CAC_ID_LifeTime-L",cacJobj);   
	                         SIFTMATH.setDocumentInPersist(MSISDN + "-Indicators",0, newSubscriberDocument.toString());
							
                        } else {
                          return 0;
                        }
                    }
                }
            }
        }
    }
}
if (",HMER,HBAR,".contains(","+RECORD_TYPE+",") && !CAC_ID.equals("-99")&& ((RECORD_TYPE.equals("HMER") && EVENT_TYPE.equals("5900"))||(RECORD_TYPE.equals("HBAR") && EVENT_TYPE.equals("3900")))){
	String newCAC = CAC_ID;
    JsonObject subscriberDocument =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators");
    String oldSubscriberEventTagList =  SIFTMATH.getSubscriberEventTagList(MSISDN);
		Long reversalTimestamp =0l;
	  if (subscriberDocument != null) {
			JsonElement migrationele = subscriberDocument.get("HENDRIX_MIGRATION_LifeTime-L");
				if(migrationele !=null){
					JsonArray migrationarr= migrationele.getAsJsonArray();
					boolean found = false;
					for (int i = 0; i < migrationarr.size(); i++) {
						if (migrationarr.get(i).getAsString().equals("S")){
							found =true;
							break;
						}
						if (migrationarr.get(i).getAsString().equals("F"))
							reversalTimestamp =migrationarr.get(i+1).getAsLong();
						}
						if(!found && (RECORD_TIMESTAMP > reversalTimestamp) ){
							if(!"".equals(oldSubscriberEventTagList))
								 SIFTMATH.setDocumentInPersist("EventTagList-" + MSISDN+"-D", 3, oldSubscriberEventTagList);
							JsonElement cacJele = subscriberDocument.get("CAC_ID_LifeTime-L");
							if (cacJele != null) {
								JsonObject cacObj = cacJele.getAsJsonObject();
								if (cacObj != null) {
									JsonElement currentJele = cacObj.get("current");
							
								if (currentJele != null && !currentJele.isJsonNull()) {
									if (!currentJele.getAsString().equals(newCAC) ) {
									
										JsonElement prevJele = cacObj.get("prev");
									if(prevJele !=null && !prevJele.isJsonNull()){
										if(prevJele.getAsString().equals(newCAC)){
											return 0;
										}
									}		 
								if(!RECORD_TYPE.equals("BATCH_TRIGGER")) {
								 SIFTMATH.setDocumentInPersist(MSISDN + "-Indicators-D", 3, subscriberDocument.toString());
								 SIFTMATH.resetIndicators(MSISDN);
								 SIFTMATH.processIndicator("*");
								} else {
								return 2;
								}
							}
						}
					}
				}
				
			}else {
				return 2;}
    	}
	}
}
if (",HMER,HBAR,".contains(","+RECORD_TYPE+",") && !CAC_ID.equals("-99")&& ((RECORD_TYPE.equals("HMER") && EVENT_TYPE.equals("5901"))||(RECORD_TYPE.equals("HBAR") && EVENT_TYPE.equals("3901"))) ){
	String newCAC = CAC_ID;
    JsonObject subscriberDocument =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators");
	  if (subscriberDocument != null) {
			JsonElement migrationele = subscriberDocument.get("HENDRIX_MIGRATION_LifeTime-L");
				if(migrationele !=null){
					JsonArray migrationarr= migrationele.getAsJsonArray();
					boolean found = false;
					Long successTimestamp =0l;
					for (int i = 0; i < migrationarr.size(); i++) {
						if (migrationarr.get(i).getAsString().equals("F")){
							found =true;
							break;
						}
						if (migrationarr.get(i).getAsString().equals("S"))
							successTimestamp =migrationarr.get(i+1).getAsLong();
					}
						if(!found){
							if(RECORD_TIMESTAMP > succline 1:0 no viable alternative at input 'if'
essTimestamp) {
								JsonObject oldSubscriberEventTagList =  SIFTMATH.getSubscriberDocument("EventTagList-" + MSISDN+"-D");
								if(oldSubscriberEventTagList != null)
									 SIFTMATH.setDocumentInPersist("EventTagList-" + MSISDN, 0, oldSubscriberEventTagList.toString());
									//JsonArray newarr = new JsonArray();
									 SIFTMATH.processIndicator("*");
									//processIndicators(CAC_ID_LifeTime);
									//processIndicators(HENDRIX_MIGRATION_LifeTime);
								}else {
									return 2;
								}
						}
					}else {
					return 2;
					}
	}
}
if(",MER,BARSUB,CREDIT,DATA,VOICE,SMS,CONTENT,MMS,LDR,".contains(","+RECORD_TYPE+",") && !BA_ID.equals("-99") && !SOURCE_SYSTEM_ID.equals("H")) {
	JsonObject subscriberDocument =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators");
	if (subscriberDocument != null) {
	JsonElement sourceSystem = subscriberDocument.get("SOURCE_SYSTEM_ID_LifeTime-L");
	if(sourceSystem!=null){
			if(sourceSystem.getAsString().equals("H")){
				return 0;
				} else return 2;
	}
 	}
}

if(",HMER,HBAR,DATA,VOICE,SMS,CONTENT,VIDEO,MMS,HLDR,".contains(","+RECORD_TYPE+",")&&!CAC_ID.equals("-99") && !((RECORD_TYPE.equals("HMER") && EVENT_TYPE.equals("5900"))||(RECORD_TYPE.equals("HBAR") && EVENT_TYPE.equals("3900")))){
	JsonObject subscriberDocument =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators");
	JsonObject subscriberDocumentDelete =  SIFTMATH.getSubscriberDocument(MSISDN + "-Indicators-D");
	if (subscriberDocumentDelete != null && subscriberDocument == null&& EVENT_TYPE.equals("5020")) {
	    //System.out.println("5020");
	    return 0;
	}
	  if (subscriberDocument != null) {
			JsonElement sourceSystem = subscriberDocument.get("SOURCE_SYSTEM_ID_LifeTime-L");
			if(sourceSystem!=null){
				if(sourceSystem.getAsString().equals("H")){
				 SIFTMATH.processIndicator("*");
				} else {
					return 0;
				} 
			}
	}
}
return 2;
------------Infered params RECORD_TYPE -- java.lang.String -- String
------------Infered params EVENT_TYPE -- java.lang.String -- String
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
------------Infered params MSISDN -- java.lang.String -- String
------------Infered params RECORD_TIMESTAMP -- long -- long
------------Infered params CAC_ID -- java.lang.String -- String
------------Infered params NEW_MSISDN -- java.lang.String -- String
------------Infered params BA_ID -- java.lang.String -- String
------------Infered params SOURCE_SYSTEM_ID -- java.lang.String -- String
Compiling Function : "isPreviouslyAutoRecharge" -- > "boolean result=false;\r\nJsonObject ExpiryBased = null;\r\nif(AUTO_RECHARGE_LifeTime!=null && !AUTO_RECHARGE_LifeTime.isJsonNull() && AUTO_RECHARGE_LifeTime.entrySet().size()>0 ){\r\n\tif (Type.equalsIgnoreCase(\"ExpiryBased\")||Type.equalsIgnoreCase(\"ANY\")) {\r\n\t\tif(AUTO_RECHARGE_LifeTime.has(\"ExpiryBased\")) {\r\n\t\t\tExpiryBased = AUTO_RECHARGE_LifeTime.get(\"ExpiryBased\").getAsJsonObject();\r\n\t\t\tif(ExpiryBased.has(\"state\")&&ExpiryBased.get(\"state\").getAsString().equals(\"enable\")){\r\n\t\t\t\tif(ExpiryBased.has(\"nextRechargeCycle\")) {\r\n\t\t\t\t\tif((ExpiryBased.get(\"nextRechargeCycle\").getAsLong()<getCurrentTime()) && (ExpiryBased.get(\"nextRechargeCycle\").getAsLong()!=-99))\r\n\t\t\t\t\t\tresult=true; \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (Type.equalsIgnoreCase(\"SDOM\")|| Type.equalsIgnoreCase(\"ANY\")){\r\n\t\tif(AUTO_RECHARGE_LifeTime.has(\"SDOM\")){\r\n\t\t\tif(AUTO_RECHARGE_LifeTime.get(\"SDOM\").getAsLong()<=(getCurrentTime()-(31 * 86400000L))&& \tAUTO_RECHARGE_LifeTime.get(\"SDOM\").getAsLong()!=-99)\r\n\t\t\t\tresult=true;\r\n\t\t}\r\n\t}\r\n\tif (Type.equalsIgnoreCase(\"LCPT\")||Type.equalsIgnoreCase(\"ANY\")){\r\n\t\tif(AUTO_RECHARGE_LifeTime.has(\"LCPT\")){\r\n\t\t\tif(AUTO_RECHARGE_LifeTime.get(\"LCPT\").getAsLong()<=(getCurrentTime()-(365 * 86400000L))&& AUTO_RECHARGE_LifeTime.get(\"LCPT\").getAsLong()!=-99)\r\n\t\t\tresult=true;\r\n\t\t}\r\n\t}\r\n}\r\nreturn result;"
Preprocessed Expression : boolean result=false;
JsonObject ExpiryBased = null;
if(AUTO_RECHARGE_LifeTime!=null && !AUTO_RECHARGE_LifeTime.isJsonNull() && AUTO_RECHARGE_LifeTime.entrySet().size()>0 ){
	if (Type.equalsIgnoreCase("ExpiryBased")||Type.equalsIgnoreCase("ANY")) {
		if(AUTO_RECHARGE_LifeTime.has("ExpiryBased")) {
			ExpiryBased = AUTO_RECHARGE_LifeTime.get("ExpiryBased").getAsJsonObject();
			if(ExpiryBased.has("state")&&ExpiryBased.get("state").getAsString().equals("enable")){
				if(ExpiryBased.has("nextRechargeCycle")) {
					if((ExpiryBased.get("nextRechargeCycle").getAsLong()< SIFTMATH.getCurrentTime()) && (ExpiryBased.get("nextRechargeCycle").getAsLong()!=-99))
						result=true; 
				}
			}
		}
	}
	if (Type.equalsIgnoreCase("SDOM")|| Type.equalsIgnoreCase("ANY")){
		if(AUTO_RECHARGE_LifeTime.has("SDOM")){
			if(AUTO_RECHARGE_LifeTime.get("SDOM").getAsLong()<=( SIFTMATH.getCurrentTime()-(31 * 86400000L))&& 	AUTO_RECHARGE_LifeTime.get("SDOM").getAsLong()!=-99)
				result=true;
		}
	}
	if (Type.equalsIgnoreCase("LCPT")||Type.equalsIgnoreCase("ANY")){
		if(AUTO_RECHARGE_LifeTime.has("LCPT")){
			if(AUTO_RECHARGE_LifeTime.get("LCPT").getAsLong()<=( SIFTMATH.getCurrentTime()-(365 * 86400000L))&& AUTO_RECHARGE_LifeTime.get("LCPT").getAsLong()!=-99)
			result=true;
		}
	}
}
return result;
line 1:0 no viable alternative at input 'boolean'
------------Infered params AUTO_RECHARGE_LifeTime -- com.google.gson.JsonObject -- JsonObject
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getTenure" -- > "if( ACCOUNT_STARTDATE_LifeTime >0 ){\r\nlong currentTime = new java.util.Date().getTime();\r\ncurrentTime += java.util.TimeZone.getDefault().getOffset( currentTime );\r\nlong tempAge = ( currentTime - ACCOUNT_STARTDATE_LifeTime ) / 86400000 ;\r\nif( tempAge >= 0 )\r\nreturn (int)tempAge;\r\n}\r\nreturn null;"
Preprocessed Expression : if( ACCOUNT_STARTDATE_LifeTime >0 ){
long currentTime = new java.util.Date().getTime();
currentTime += java.util.TimeZone.getDefault().getOffset( currentTime );
long tempAge = ( currentTime - ACCOUNT_STARTDATE_LifeTime ) / 86400000 ;
if( tempAge >= 0 )
return (int)tempAge;
}
return null;
line 1:0 no viable alternative at input 'if'
------------Infered params ACCOUNT_STARTDATE_LifeTime -- long -- long
Compiling Function : "getLifetimeDataConsumed" -- > "double dataConsumed = 0.0;\r\nif(DATA_USAGE_SERIES_LifeTime!=null && !DATA_USAGE_SERIES_LifeTime.isJsonNull() && DATA_USAGE_SERIES_LifeTime.entrySet().size()!=0) {\r\nJsonArray ekeys = DATA_USAGE_SERIES_LifeTime.get(\"keys\").getAsJsonArray();\r\nif(ekeys.size()!=0){\r\nString latestDate = ekeys.get(ekeys.size()-1).getAsString();\r\ndataConsumed = DATA_USAGE_SERIES_LifeTime.get( latestDate  ).getAsDouble();\r\n}\r\n}\r\nreturn dataConsumed;"
Preprocessed Expression : double dataConsumed = 0.0;
if(DATA_USAGE_SERIES_LifeTime!=null && !DATA_USAGE_SERIES_LifeTime.isJsonNull() && DATA_USAGE_SERIES_LifeTime.entrySet().size()!=0) {
JsonArray ekeys = DATA_USAGE_SERIES_LifeTime.get("keys").getAsJsonArray();
if(ekeys.size()!=0){
String latestDate = ekeys.get(ekeys.size()-1).getAsString();
dataConsumed = DATA_USAGE_SERIES_LifeTime.get( latestDate  ).getAsDouble();
}
}
return dataConsumed;
line 1:0 no viable alternative at input 'double'
------------Infered params DATA_USAGE_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getValueFromMonthlyIDDMultiSeries" -- > "if( start < 0 || duration < 0 )\r\n\t\t\treturn 0.0;\r\n\t\tif( series == null )\r\n\t\t\treturn 0.0;\r\n\r\n\t\tString[ ] monthKeys = new String[ duration ];\r\n\r\n\t\tString[ ] strCondColIndexs = condColIndexs.split( \",\" );\r\n\t\tString[ ] strConditionValues = conditionValues.split( \",\" );\r\n\t\tString[ ] strCondOperators = condOperators.split( \",\" );\r\n\t\tString[ ] strCondColTypes = condColTypes.split( \",\" );\r\n\r\n\t\torg.joda.time.LocalDate currentTime = org.joda.time.LocalDate.now();\r\n\t\t// System.out.println(currentTime);\r\n\t\tcurrentTime = currentTime.minusMonths( start );\r\n\t\tmonthKeys[ 0 ] = String.valueOf( currentTime.getYear() * 100 + currentTime.getMonthOfYear() );\r\n\r\n\t\tfor( int i = 1; i < duration; i++ ) {\r\n\t\t\tcurrentTime = currentTime.minusMonths( 1 );\r\n\t\t\tmonthKeys[ i ] = String.valueOf( currentTime.getYear() * 100 + currentTime.getMonthOfYear() );\r\n\t\t}\r\n\t\t// System.out.println(java.util.Arrays.toString( monthKeys ));\r\n\t\tint[ ] nCondColIndexes = new int[ strCondColIndexs.length ];\r\n\t\tfor( int i = 0; i < strCondColIndexs.length; i++ )\r\n\t\t\tnCondColIndexes[ i ] = Integer.parseInt( strCondColIndexs[ i ] );\r\n\r\n\t\t// long lStart = getCurrentTime() - ( start * msecPerDay );\r\n\t\t// lStart = lStart - ( lStart % msecPerDay );\r\n\t\t// long lEnd = lStart - ( end * msecPerDay );\r\n\t\tjava.util.ArrayList< Double > selectedValues = new java.util.ArrayList< Double >();\r\n\t\tfor( int i = 0; i < duration; i++ ) {\r\n\t\t\tJsonElement e = series.get( monthKeys[ i ] );\r\n\t\t\tif( e == null )\r\n\t\t\t\tcontinue;\r\n\t\t\tJsonElement iddTypeJele = e.getAsJsonObject().get(iddType);\r\n\t\t\tif(iddTypeJele ==null)\r\n\t\t\t\tcontinue;\t\r\n\t\t\tJsonElement eIDD = iddTypeJele.getAsJsonObject().get( iddIndex );\r\n\t\t\tif( eIDD == null )\r\n\t\t\t\tcontinue;\r\n\t\t\tJsonArray jValue = eIDD.getAsJsonArray();\r\n\t\t\tjava.util.ArrayList< Boolean > results = new java.util.ArrayList< Boolean >();\r\n\t\t\tfor( int j = 0; j < nCondColIndexes.length; j++ ) {\r\n\t\t\t\tString lhs = jValue.get( nCondColIndexes[ j ] ).getAsString();\r\n\t\t\t\tString rhs = strConditionValues[ j ];\r\n\t\t\t\tif( strCondColTypes[ j ].equals( \"String\" ) && !evaluateStringOperations( lhs, rhs, strCondOperators[ j ] ) )\r\n\t\t\t\t\tbreak;\r\n\t\t\t\telse if( !strCondColTypes[ j ].equals( \"String\" )\r\n\t\t\t\t\t\t&& !evaluateNumericOperation( Double.parseDouble( lhs ), Double.parseDouble( rhs ), strCondOperators[ j ] ) )\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tresults.add( true );\r\n\t\t\t}\r\n\t\t\tif( results.size() == nCondColIndexes.length )\r\n\t\t\t\tselectedValues.add( jValue.get( opColumn ).getAsDouble() );\r\n\t\t}\r\n\t\t// System.out.println( \"SelectedValues : \" + selectedValues.toString()\r\n\t\t// );\r\n\t\tdouble[ ] dRes = new double[ selectedValues.size() ];\r\n\t\tfor( int i = 0; i < selectedValues.size(); i++ )\r\n\t\t\tdRes[ i ] = (Double) selectedValues.get( i );\r\n\t\t// /SUM,COUNT,MODE,MEAN,MAX\r\n\t\tif( operationType.equals( \"SUM\" ) ) {\r\n\t\t\torg.apache.commons.math3.stat.descriptive.summary.Sum sum = new org.apache.commons.math3.stat.descriptive.summary.Sum();\r\n\t\t\treturn sum.evaluate( dRes );\r\n\t\t}else if( operationType.equals( \"COUNT\" ) )\r\n\t\t\treturn (double)dRes.length;\r\n\t\telse if( operationType.equals( \"MEAN\" ) ) {\r\n\t\t\t\r\n\t\t\torg.apache.commons.math3.stat.descriptive.moment.Mean mean = new org.apache.commons.math3.stat.descriptive.moment.Mean();\r\n\t\t\treturn mean.evaluate( dRes );\r\n\t\t}else if( operationType.equals( \"MIN\" ) ) {\r\n\t\t\torg.apache.commons.math3.stat.descriptive.rank.Min min = new org.apache.commons.math3.stat.descriptive.rank.Min();\r\n\t\t\treturn min.evaluate( dRes );\r\n\t\t}else if( operationType.equals( \"MEDIAN\" ) ) {\r\n\t\t\torg.apache.commons.math.stat.descriptive.rank.Median med = new org.apache.commons.math.stat.descriptive.rank.Median();\r\n\t\t\tDouble retVal = med.evaluate( dRes );\r\n\t\t\treturn Double.isNaN( retVal ) ? new Double(0.0) : retVal;\r\n\t\t}else if( operationType.equals( \"MAX\" ) ) {\r\n\t\t\torg.apache.commons.math3.stat.descriptive.rank.Max max = new org.apache.commons.math3.stat.descriptive.rank.Max();\r\n\t\t\treturn max.evaluate( dRes );\r\n\t\t}else if( operationType.equals( \"MODE\" ) ) {\r\n\t\t\tdouble maxValue = 0, maxCount = 0;\r\n\t\t\tfor( int i = 0; i < dRes.length; ++i ) {\r\n\t\t\t\tdouble count = 0;\r\n\t\t\t\tfor( int j = 0; j < dRes.length; ++j ) {\r\n\t\t\t\t\tif( dRes[ j ] == dRes[ i ] )\r\n\t\t\t\t\t\t++count;\r\n\t\t\t\t}\r\n\t\t\t\tif( count >= maxCount ) {\r\n\t\t\t\t\tmaxCount = count;\r\n\t\t\t\t\tmaxValue = dRes[ i ];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn maxValue;\r\n\t\t}\r\n\t\treturn 0.0;"
Preprocessed Expression : if( start < 0 || duration < 0 )
			return 0.0;
		if( series == null )
			return 0.0;

		String[ ] monthKeys = new String[ duration ];

		String[ ] strCondColIndexs = condColIndexs.split( "," );
		String[ ] strConditionValues = conditionValues.split( "," );
		String[ ] strCondOperators = condOperators.split( "," );
		String[ ] strCondColTypes = condColTypes.split( "," );

		org.joda.time.LocalDate currentTime = org.joda.time.LocalDate.now();
		// System.out.println(currentTime);
		currentTime = currentTime.minusMonths( start );
		monthKeys[ 0 ] = String.valueOf( currentTime.getYear() * 100 + currentTime.getMonthOfYear() );

		for( int i = 1; i < duration; i++ ) {
			currentTime = currentTime.minusMonths( 1 );
			monthKeys[ i ] = String.valueOf( currentTime.getYear() * 100 + currentTime.getMonthOfYear() );
		}
		// System.out.println(java.util.Arrays.toString( monthKeys ));
		int[ ] nCondColIndexes = new int[ strCondColIndexs.length ];
		for( int i = 0; i < strCondColIndexs.length; i++ )
			nCondColIndexes[ i ] = Integer.parseInt( strCondColIndexs[ i ] );

		// long lStart =  SIFTMATH.getCurrentTime() - ( start * msecPerDay );
		// lStart = lStart - ( lStart % msecPerDay );
		// long lEnd = lStart - ( end * msecPerDay );
		java.util.ArrayList< Double > selectedValues = new java.util.ArrayList< Double >();
		for( int i = 0; i < duration; i++ ) {
			JsonElement e = series.get( monthKeys[ i ] );
			if( e == null )
				continue;
			JsonElement iddTypeJele = e.getAsJsonObject().get(iddType);
			if(iddTypeJele ==null)
				continue;	
			JsonElement eIDD = iddTypeJele.getAsJsonObject().get( iddIndex );
			if( eIDD == null )
				continue;
			JsonArray jValue = eIDD.getAsJsonArray();
			java.util.ArrayList< Boolean > results = new java.util.ArrayList< Boolean >();
			for( int j = 0; j < nCondColIndexes.length; j++ ) {
				String lhs = jValue.get( nCondColIndexes[ j ] ).getAsString();
				String rhs = strConditionValues[ j ];
				if( strCondColTypes[ j ].equals( "String" ) && ! SIFTMATH.execBooleanFunction("evaluateStringOperations",  lhs, rhs, strCondOperators[ j ] ) )
					break;
				else if( !strCondColTypes[ j ].equals( "String" )
						&& ! SIFTMATH.execBooleanFunction("evaluateNumericOperation",  Double.parseDouble( lhs ), Double.parseDouble( rhs ), strCondOperators[ j ] ) )
					break;
				results.add( true );
			}
			if( results.size() == nCondColIndexes.length )
				selectedValues.add( jValue.get( opColumn ).getAsDouble() );
		}
		// System.out.println( "SelectedValues : " + selectedValues.toString()
		// );
		double[ ] dRes = new double[ selectedValues.size() ];
		for( int i = 0; i < selectedValues.size(); i++ )
			dRes[ i ] = (Double) selectedValues.get( i );
		// /SUM,COUNT,MODE,MEAN,MAX
		if( operationType.equals( "SUM" ) ) {
			org.apache.commons.math3.stat.descriptive.summary.Sum sum = new org.apache.commons.math3.stat.descriptive.summary.Sum();
			return sum.evaluate( dRes );
		}else if( operationType.equals( "COUNT" ) )
			return (double)dRes.length;
		else if( operationType.equals( "MEAN" ) ) {
			
			org.apache.commons.math3.stat.descriptive.moment.Mean mean = new org.apache.commons.math3.stat.descriptive.moment.Mean();
			return mean.evaluate( dRes );
		}else if( operationType.equals( "MIN" ) ) {
			org.apache.commons.math3.stat.descriptive.rank.Min min = new org.apache.commons.math3.stat.descriptive.rank.Min();
			return min.evaluate( dRes );
		}else if( operationType.equals( "MEDIAN" ) ) {
			org.apache.commons.math.stat.descriptive.rank.Median med = new org.apache.commons.math.stat.descriptive.rank.Median();
			Double retVal = med.evaluate( dRes );
			return Double.isNaN( retVal ) ? new Double(0.0) : retVal;
		}else if( operationType.equals( "MAX" ) ) {
			org.apache.commons.math3.stat.descriptive.rank.Max max = new org.apache.commons.math3.stat.descriptive.rank.Max();
			return max.evaluate( dRes );
		}else if( operationType.equals( "MODE" ) ) {
			double maxValue = 0, maxCount = 0;
			for( int i = 0; i < dRes.length; ++i ) {
				double count = 0;
				for( int j = 0; j < dRes.length; ++j ) {
					if( dRes[ j ] == dRes[ i ] )
						++count;
				}
				if( count >= maxCount ) {
					maxCount = count;
					maxValue = dRes[ i ];
				}
			}
			return maxValue;
		}
		return 0.0;
line 1:0 no viable alternative at input 'if'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getLastDiscountOfferId" -- > "if (OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime != null && !OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.isJsonNull() && OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.entrySet().size() > 0) {\r\n    \r\n\tif (OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.has(\"lastDiscountOfferId\")) {\r\n\t\treturn OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.get(\"lastDiscountOfferId\").getAsString();\r\n    }\r\n}\r\n\r\nreturn \"\";"
Preprocessed Expression : if (OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime != null && !OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.isJsonNull() && OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.entrySet().size() > 0) {
    
	if (OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.has("lastDiscountOfferId")) {
		return OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime.get("lastDiscountOfferId").getAsString();
    }
}

return "";
line 1:0 no viable alternative at input 'if'
------------Infered params OFFER_PAYLOAD_FOR_EXTRACTION_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getDaysSinceBarUpdated" -- > "if(DAYS_SINCE_BAR_UPDATED!=-1)\r\n{\r\nint noofdays=(int)DAYS_SINCE_BAR_UPDATED;\r\nreturn noofdays;\r\n}\r\nreturn null;"
Preprocessed Expression : if(DAYS_SINCE_BAR_UPDATED!=-1)
{
int noofdays=(int)DAYS_SINCE_BAR_UPDATED;
return noofdays;
}
return null;
line 1:0 no viable alternative at input 'if'
------------Infered params DAYS_SINCE_BAR_UPDATED -- long -- long
Compiling Function : "getContactInfo" -- > "return MSISDN;"
Preprocessed Expression : return MSISDN;
line 1:0 no viable alternative at input 'return'
------------Infered params MSISDN -- java.lang.String -- String
Compiling Function : "getMonitoringEndTime" -- > "long EndTime =0l;\r\nJsonArray currentlyMonitored = isCurrentlyMonitored();\r\nif (currentlyMonitored!=null && !currentlyMonitored.isJsonNull() && currentlyMonitored.size()>0){\r\n\tString[] monitoringOffers = currentlyMonitored.get(0).getAsString().split(\"\\\\~\",-1);\r\n\tString[] endDates = currentlyMonitored.get(1).getAsString().split(\"\\\\~\",-1);\r\n\tfor (int i=0; i< monitoringOffers.length; i++){\r\n\t\tif(monitoringOffers[i].equals(offerName)) {\r\n\t\t\tEndTime = Long.parseLong(endDates[i]);\r\n\t\t}\r\n\t }\r\n }\r\n return EndTime;"
Preprocessed Expression : long EndTime =0l;
JsonArray currentlyMonitored =  SIFTMATH.execJsonArrayFunction("isCurrentlyMonitored" );
if (currentlyMonitored!=null && !currentlyMonitored.isJsonNull() && currentlyMonitored.size()>0){
	String[] monitoringOffers = currentlyMonitored.get(0).getAsString().split("\\~",-1);
	String[] endDates = currentlyMonitored.get(1).getAsString().split("\\~",-1);
	for (int i=0; i< monitoringOffers.length; i++){
		if(monitoringOffers[i].equals(offerName)) {
			EndTime = Long.parseLong(endDates[i]);
		}
	 }
 }
 return EndTime;
line 1:0 no viable alternative at input 'long'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling Function : "getCurrentBAID" -- > "if ( BAID_LifeTime != null&& !BAID_LifeTime.isJsonNull() && BAID_LifeTime.entrySet().size()!=0){\r\n    String CurrentBaid = BAID_LifeTime.get(\"current\").getAsString();\r\n    if(CurrentBaid!=null && CurrentBaid.length()!=0)\r\n        return CurrentBaid;\r\n}\r\nreturn \"\";"
Preprocessed Expression : if ( BAID_LifeTime != null&& !BAID_LifeTime.isJsonNull() && BAID_LifeTime.entrySet().size()!=0){
    String CurrentBaid = BAID_LifeTime.get("current").getAsString();
    if(CurrentBaid!=null && CurrentBaid.length()!=0)
        return CurrentBaid;
}
return "";
line 1:0 no viable alternative at input 'if'
------------Infered params BAID_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling Function : "getPreviousRechargeValue" -- > "double value = 0.0;\r\nif(CREDIT_SERIES_LifeTime!=null && !CREDIT_SERIES_LifeTime.isJsonNull() && CREDIT_SERIES_LifeTime.entrySet().size()!=0 && CREDIT_SERIES_LifeTime.has(\"previousCreditValue\"))\r\nvalue = CREDIT_SERIES_LifeTime.get(\"previousCreditValue\").getAsDouble();\r\nreturn value;"
Preprocessed Expression : double value = 0.0;
if(CREDIT_SERIES_LifeTime!=null && !CREDIT_SERIES_LifeTime.isJsonNull() && CREDIT_SERIES_LifeTime.entrySet().size()!=0 && CREDIT_SERIES_LifeTime.has("previousCreditValue"))
value = CREDIT_SERIES_LifeTime.get("previousCreditValue").getAsDouble();
return value;
line 1:0 no viable alternative at input 'double'
------------Infered params CREDIT_SERIES_LifeTime -- com.google.gson.JsonObject -- JsonObject
Compiling : "CIM_DEC_RECORD_TIMESTAMP" -- > "//Current system time in seconds will be used \n return getCurrentTime();"
Preprocessed Expression : //Current system time in seconds will be used 
 return  SIFTMATH.getCurrentTime();
line 2:1 no viable alternative at input 'return'
------------Infered params SIFTMATH -- com.knowesis.sift.expression.SiftMath -- SiftMath
Compiling : "CIM_DEC_RECORD_TYPE" -- > "\"DEC\""
Preprocessed Expression : "DEC"
line 1:0 no viable alternative at input '"DEC"'
Compiling : "CIM_DEC_DEFAULT" -- > "true"
Preprocessed Expression : true
line 1:0 no viable alternative at input 'true'
----------------------------------- Compiled all the Expressions -----------------------------------
org.apache.kafka.common.errors.TimeoutException: Timeout expired while fetching topic metadata
java.lang.NullPointerException
	at com.knowesis.sift.operators.ConfigUpdateTask.connectKafka(ConfigUpdateTask.java:140)
	at com.knowesis.sift.operators.ConfigUpdateTask.<init>(ConfigUpdateTask.java:110)
	at com.knowesis.sift.dataSourceFactory.SiftDataSource.initialiseConfigUpdateExecutor(SiftDataSource.java:39)
	at com.knowesis.sift.dataSourceFactory.SiftDataSource.<init>(SiftDataSource.java:32)
	at com.knowesis.sift.core.datasource.DirectoryScanner.<init>(DirectoryScanner.java:75)
	at com.knowesis.sift.dataSourceFactory.SourceFactory.initialiseDataSource(SourceFactory.java:119)
	at com.knowesis.sift.dataSourceFactory.SourceFactory.main(SourceFactory.java:61)
Exception in thread "main" java.lang.NullPointerException
	at com.knowesis.sift.operators.ConfigUpdateTask.connectKafka(ConfigUpdateTask.java:140)
	at com.knowesis.sift.operators.ConfigUpdateTask.<init>(ConfigUpdateTask.java:110)
	at com.knowesis.sift.dataSourceFactory.SiftDataSource.initialiseConfigUpdateExecutor(SiftDataSource.java:39)
	at com.knowesis.sift.dataSourceFactory.SiftDataSource.<init>(SiftDataSource.java:32)
	at com.knowesis.sift.core.datasource.DirectoryScanner.<init>(DirectoryScanner.java:75)
	at com.knowesis.sift.dataSourceFactory.SourceFactory.initialiseDataSource(SourceFactory.java:119)
	at com.knowesis.sift.dataSourceFactory.SourceFactory.main(SourceFactory.java:61)
